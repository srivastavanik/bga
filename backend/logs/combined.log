{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-15 00:00:50"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"info","message":"Using fallback test response since API call failed","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Extracted 8029 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)C(=O)NC)N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)C(CS(=O)C(=O)NC)N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Validating SMILES: COc1ccc(CCN2CCN(c3ncnc4[nH]ccc34)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(CCN2CCN(c3ncnc4[nH]ccc34)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:47"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(CCNC(=O)C2CCN(CC3=Cc4ccccc4C3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:47"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(CCNC(=O)C2CCN(CC3=Cc4ccccc4C3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:48"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:36:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Extracted 8364 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Validating SMILES: CC(C(=O)OC)C1CCN(C)CC1c1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Successfully validated SMILES: CC(C(=O)OC)C1CCN(C)CC1c1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(C(=O)CS(=O)c2ccccc2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(C(=O)CS(=O)c2ccccc2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 00:38:32"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc(F)cc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:38:32"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc(F)cc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Validating SMILES: N-substituted-2-amino-3-(4-ethoxy-phenyl)propane","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Successfully validated SMILES: N-substituted-2-amino-3-(4-ethoxy-phenyl)propane","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Extracted 9582 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Validating SMILES: CC(C)C(=O)OCCCN1C(=O)C2=C(C1=O)C(=O)N(C(=O)N2)CCCOC(=O)C(C)C","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Successfully validated SMILES: CC(C)C(=O)OCCCN1C(=O)C2=C(C1=O)C(=O)N(C(=O)N2)CCCOC(=O)C(C)C","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc4c(c3)OCO4)CC2)cc(OC)c1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc4c(c3)OCO4)CC2)cc(OC)c1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:50:56"}
{"level":"info","message":"Validating SMILES: 3,4,5-trimethoxy-N-[1-(3-(1,3-benzodioxol-5-yloxy)propyl)piperidin-4-yl]benzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:56"}
{"level":"info","message":"Successfully validated SMILES: 3,4,5-trimethoxy-N-[1-(3-(1,3-benzodioxol-5-yloxy)propyl)piperidin-4-yl]benzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Validating SMILES: COc1ccc(OC)c(CC(=O)NCCCNc2ncnc3[nH]cnc23)c1","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(OC)c(CC(=O)NCCCNc2ncnc3[nH]cnc23)c1","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Validating SMILES: N-(3-(9H-purin-6-ylamino)propyl)-2-(2,5-dimethoxyphenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Successfully validated SMILES: N-(3-(9H-purin-6-ylamino)propyl)-2-(2,5-dimethoxyphenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:58"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:50:58"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Extracted 6670 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Validating SMILES: O=C(O)C1C(=O)N(CC2=CC=C(F)C=C2)C(=O)N1CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Successfully validated SMILES: O=C(O)C1C(=O)N(CC2=CC=C(F)C=C2)C(=O)N1CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CC(=O)N2CCN(C3CCN(C(=O)C4=CC=C(F)C=C4)CC3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CC(=O)N2CCN(C3CCN(C(=O)C4=CC=C(F)C=C4)CC3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Validating SMILES: N-(4-(4-(2-methoxyphenyl)piperazin-1-yl)butyl)-4-fluorobenzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Successfully validated SMILES: N-(4-(4-(2-methoxyphenyl)piperazin-1-yl)butyl)-4-fluorobenzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Validating SMILES: CC(C)NC(=O)C1(C2=CC(Cl)=C(OC)C=C2)CCN(CC3=CC=C(F)C=C3)CC1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Successfully validated SMILES: CC(C)NC(=O)C1(C2=CC(Cl)=C(OC)C=C2)CCN(CC3=CC=C(F)C=C3)CC1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Validating SMILES: N-Isopropyl-1-(3-chloro-4-methoxyphenyl)-4-(4-fluorobenzyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Successfully validated SMILES: N-Isopropyl-1-(3-chloro-4-methoxyphenyl)-4-(4-fluorobenzyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:21"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:52:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Extracted 9597 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)NC)NC(=O)OC1CCCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)C(CS(=O)NC)NC(=O)OC1CCCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-methyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-methyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:00:44"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N1CCN(C2=CC=CC=C2F)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:44"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(C1CCCC1)N1CCN(C2=CC=CC=C2F)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Validating SMILES: 2-(1-piperidyl)-2-(cyclopentyl)acetate-N-(2-fluorophenyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Successfully validated SMILES: 2-(1-piperidyl)-2-(cyclopentyl)acetate-N-(2-fluorophenyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Validating SMILES: C1CN(CC(C1)OC(=O)N1CCCCC1)C(=O)C1=CC=C(C=C1)C#CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Successfully validated SMILES: C1CN(CC(C1)OC(=O)N1CCCCC1)C(=O)C1=CC=C(C=C1)C#CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:46"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:00:46"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Extracted 8003 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Validating SMILES: C[C@H](OS(=O)(=O)c1ccccc1)C(=O)NCCCC(c1ccccc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Successfully validated SMILES: C[C@H](OS(=O)(=O)c1ccccc1)C(=O)NCCCC(c1ccccc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(cc1OC)C(=O)N1CCN(CC1)C(C)Cc1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(cc1OC)C(=O)N1CCN(CC1)C(C)Cc1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(cc1)OCCCOc1cccc(c1)C#N","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(cc1)OCCCOc1cccc(c1)C#N","service":"breaking-good-api","timestamp":"2025-04-15 01:06:48"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:06:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Extracted 5870 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Validating SMILES: N-methyl-4-phenyl-3-(pyrrolidin-1-yl)butan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-4-phenyl-3-(pyrrolidin-1-yl)butan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Validating SMILES: CC(CCCN(C)C)C1=CC=CC=C1N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Successfully validated SMILES: CC(CCCN(C)C)C1=CC=CC=C1N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Validating SMILES: CN(C)C(CC1=CC=CC=C1)C1=NC(N)=CO1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Successfully validated SMILES: CN(C)C(CC1=CC=CC=C1)C1=NC(N)=CO1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:36"}
{"level":"info","message":"Validating SMILES: 3-(benzofuran-4-yl)-N,N-dimethyl-3-(methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:36"}
{"level":"info","message":"Successfully validated SMILES: 3-(benzofuran-4-yl)-N,N-dimethyl-3-(methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Validating SMILES: CN(C)CCCC(NC)C1=CC2=CC=CC=C2O1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Successfully validated SMILES: CN(C)CCCC(NC)C1=CC2=CC=CC=C2O1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Extracted 7530 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1=CC(=C(C=C1)S(=O)(=O)N)OC2CCOCC2)C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Successfully validated SMILES: CC(NC(=O)C1=CC(=C(C=C1)S(=O)(=O)N)OC2CCOCC2)C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Validating SMILES: CCCC(C(=O)N1CCN(CC1)C2=CC=C(C=C2)OC)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Successfully validated SMILES: CCCC(C(=O)N1CCN(CC1)C2=CC=C(C=C2)OC)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1OC)C(=O)NC2CCN(CC2)CC3=CC=CC=C3CN4C=NC=N4","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC(=CC=C1OC)C(=O)NC2CCN(CC2)CC3=CC=CC=C3CN4C=NC=N4","service":"breaking-good-api","timestamp":"2025-04-15 01:17:19"}
{"level":"info","message":"Validating SMILES: N-(1-(benzylimidazol-1-yl)piperidin-4-yl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:17:19"}
{"level":"info","message":"Successfully validated SMILES: N-(1-(benzylimidazol-1-yl)piperidin-4-yl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:17:20"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:17:20"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Extracted 7165 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Validating SMILES: COC(=O)C(CS(=O)C(C)(C)NC(=O)OC)NC(=O)OCH3","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(CS(=O)C(C)(C)NC(=O)OC)NC(=O)OCH3","service":"breaking-good-api","timestamp":"2025-04-15 01:18:24"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CCCC1)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:24"}
{"level":"info","message":"Successfully validated SMILES: CC(NC(=O)C1CCCC1)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1OC)CCN1CC(CC2=CC=C(Cl)C=C2)N(C)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC(=CC=C1OC)CCN1CC(CC2=CC=C(Cl)C=C2)N(C)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Extracted 5776 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Found 6 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)CNC(=O)OS(=O)(=O)c1ccc(N)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)CNC(=O)OS(=O)(=O)c1ccc(N)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Validating SMILES: N-(2,2-dimethylpropanoyl)-2-[(4-aminophenyl)sulfonyloxy]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Successfully validated SMILES: N-(2,2-dimethylpropanoyl)-2-[(4-aminophenyl)sulfonyloxy]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:23:59"}
{"level":"info","message":"Validating SMILES: C1CN2CCC1CC2C(c1ccccc1)OC(=O)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:23:59"}
{"level":"info","message":"Successfully validated SMILES: C1CN2CCC1CC2C(c1ccccc1)OC(=O)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Validating SMILES: N-methyl-N-(3","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-N-(3","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Validating SMILES: COc1ccc(CC(NC)C(=O)NCC2=CC(=O)OC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(CC(NC)C(=O)NCC2=CC(=O)OC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Validating SMILES: N-methyl-2-(4-methoxyphenyl)-3-oxo-3-((2-oxo-2H-pyran-4-yl)methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-2-(4-methoxyphenyl)-3-oxo-3-((2-oxo-2H-pyran-4-yl)methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Validated 6 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Extracted 7089 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Validating SMILES: CNC(=O)C(C1=CC=CC=C1)C2CCN(C)CC2","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)C(C1=CC=CC=C1)C2CCN(C)CC2","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)NCCCC1=CC=C(OS(=O)(=O)C)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)NCCCC1=CC=C(OS(=O)(=O)C)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CCNC(=O)C2CCN(CC3=CC=C(F)C=C3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CCNC(=O)C2CCN(CC3=CC=C(F)C=C3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:07"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:25:07"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Extracted 8237 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Validating SMILES: CC(C(=O)OC)C(C1=CC=CC=C1)N2CCN(CC2)C3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Successfully validated SMILES: CC(C(=O)OC)C(C1=CC=CC=C1)N2CCN(CC2)C3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:29:46"}
{"level":"info","message":"Validating SMILES: CNC(=O)C1=CC(=C(C=C1)NS(=O)(=O)C2=CC=C(C=C2)OC)OC3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-15 01:29:46"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)C1=CC(=C(C=C1)NS(=O)(=O)C2=CC=C(C=C2)OC)OC3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Validating SMILES: N-methyl-3-methoxy-4-(3-piperidinyloxy)-N-(4-methoxyphenylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-3-methoxy-4-(3-piperidinyloxy)-N-(4-methoxyphenylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Validating SMILES: CC1C2CCC(C1(C)C(=O)C(C)(C)S(=O)C3=CC=C(C=C3)OC)N2C","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Successfully validated SMILES: CC1C2CCC(C1(C)C(=O)C(C)(C)S(=O)C3=CC=C(C=C3)OC)N2C","service":"breaking-good-api","timestamp":"2025-04-15 01:29:48"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:29:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Extracted 7796 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(OC(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:05"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(S(=O)C(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:05"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(S(=O)C(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Validating SMILES: COc1ccc(C(=O)NCCc2ccc(F)cc2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(C(=O)NCCc2ccc(F)cc2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Validating SMILES: N-(4-fluorophenethyl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Successfully validated SMILES: N-(4-fluorophenethyl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:31:07"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:31:07"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Extracted 8676 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NC(=O)C[C@@H](C(=O)NC(C)(C)C)S(=O)C1=CC=C(C=C1)OC","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NC(=O)C[C@@H](C(=O)NC(C)(C)C)S(=O)C1=CC=C(C=C1)OC","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methoxyphenyl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methoxyphenyl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:40:42"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C(C1CCCCN1)C1=CC=C(C=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-15 01:40:42"}
{"level":"info","message":"Successfully validated SMILES: CCOC(=O)C(C1CCCCN1)C1=CC=C(C=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CC(N)CC2=CC(OC)=C(OC)C=C2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CC(N)CC2=CC(OC)=C(OC)C=C2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"info","message":"Created request ID: 4188bbd8-e522-42c8-a711-03547da661ec","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Error in molecule generation: Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"info","message":"Received molecule generation request with requirements: Design a non-stimulant ADHD medication that targets dopamine transporters with minimal side effects.","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"info","message":"Created request ID: f85b9484-cd97-4a98-bc83-33f104f2686f","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Error in molecule generation: Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"info","message":"Created request ID: e8c2a69e-ac76-4b5f-9150-2debb94408c5","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Generating fallback molecules due to Claude API error","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Successfully created fallback response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CN1C=NC2=C1C(=O)N(C(=O)N2C)C: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CC(CS)C(=O)N1CCCC1C(=O)O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Created request ID: 3553c4d5-d592-4032-bf56-0d9ea1600903","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Received Claude response with ID: msg_01GaAHpBm1e26niU6V2irMrS","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Extracted 7593 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N(C)Cc1cccc(c1)C(=O)NC(C)(C)CS(=O)(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES COC(=O)C(C1CCCC1)N(C)Cc1cccc(c1)C(=O)NC(C)(C)CS(=O)(=O)c1ccccc1: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N(C)Cc1ccc(F)c(c1)C(O)C#N","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES COC(=O)C(C1CCCC1)N(C)Cc1ccc(F)c(c1)C(O)C#N: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)OC(C)(C)C)C(=O)NCCc1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES CC(NC(=O)OC(C)(C)C)C(=O)NCCc1ccc(OC)c(OC)c1: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Created request ID: 6ae9bbb0-99e6-4fd9-a965-420ed10695e8","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Received Claude response with ID: msg_012vm6UqPzEf21xbfZNCNW1M","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Extracted 8547 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Validating SMILES: COC(=O)c1cc2ccccc2cc1N1CCC(c2ccc(F)cc2)(C)C(C)C1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)c1cc2ccccc2cc1N1CCC(c2ccc(F)cc2)(C)C(C)C1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Validating SMILES: CC1(C)OCC(CN(C)C(=O)c2ccc(C)cc2)C(c2ccc(Cl)c(Cl)cc2)N1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Successfully validated SMILES: CC1(C)OCC(CN(C)C(=O)c2ccc(C)cc2)C(c2ccc(Cl)c(Cl)cc2)N1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Validating SMILES: CCN(CC)CCOc1ccc(N2CCN(c3ccc4oc(c5c(F)cccc5F)nc4c3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Successfully validated SMILES: CCN(CC)CCOc1ccc(N2CCN(c3ccc4oc(c5c(F)cccc5F)nc4c3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Successfully extracted 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Saving results to file for request 6ae9bbb0-99e6-4fd9-a965-420ed10695e8","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Created request ID: b69bdc80-fbeb-4c3e-a27b-5e2981a12263","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Received Claude response with ID: msg_01YUdrsGwycmeLTAhKXSR9mN","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Extracted 7439 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)c1ccc(cc1)OC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CC(NC)C(=O)c1ccc(cc1)OC(F)(F)F: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(c(c1)OC)NS(=O)(=O)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CC(N)Cc1ccc(c(c1)OC)NS(=O)(=O)C(F)(F)F: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CCCN1CCN(CC1)C(=O)c1ccc(cc1)C(C)NC","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CCCN1CCN(CC1)C(=O)c1ccc(cc1)C(C)NC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Created request ID: 3668773d-b529-490c-88dd-efef149d4a47","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Received Claude response with ID: msg_01N1r6wdXkUEq3FtCMKEJCJ6","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Extracted 9618 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C2C(C2)C3=CC=C(C=C3)OC4=CC=C(N)C=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C2C(C2)C3=CC=C(C=C3)OC4=CC=C(N)C=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1)C2CCCN2CC(=O)C3=CC=C(F)C=C3NC4=CC=CC=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES COC1=CC(=CC=C1)C2CCCN2CC(=O)C3=CC=C(F)C=C3NC4=CC=CC=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: CC1=C(C(=O)N(C)C2=CC=CC=C12)CC3CCNCC3C4=CC=C(OC)C=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES CC1=C(C(=O)N(C)C2=CC=CC=C12)CC3CCNCC3C4=CC=C(OC)C=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Created request ID: fc360418-703a-42a1-ba9e-ad04c4002201","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Received Claude response with ID: msg_012uSaZfvoG8mnj1oWAoZ12r","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Extracted 8020 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: FC(F)(F)c1ccc(cc1)C(=O)NC2CCN(CC2)CCCOc3ccc(F)cc3","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES FC(F)(F)c1ccc(cc1)C(=O)NC2CCN(CC2)CCCOc3ccc(F)cc3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: N-(4-(trifluoromethyl)phenyl)-1-(3-(4-fluorophenoxy)propyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES N-(4-(trifluoromethyl)phenyl)-1-(3-(4-fluorophenoxy)propyl)piperidine-4-carboxamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: N-{1-[3-(3-fluoro-phenyl)-propyl]-piperidin-4-yl}-N-phenyl-propionamide","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES N-{1-[3-(3-fluoro-phenyl)-propyl]-piperidin-4-yl}-N-phenyl-propionamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: COc1ccc2c(c1)C(=O)N(C2)CCCN3CCN(CC3)c4cccc(Cl)c4","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES COc1ccc2c(c1)C(=O)N(C2)CCCN3CCN(CC3)c4cccc(Cl)c4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: Cc1nc(sc1C(=O)NCCN2CCN(CC2)c3ccc(F)cc3F)N4CCN(CC4)CC(=O)O","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES Cc1nc(sc1C(=O)NCCN2CCN(CC2)c3ccc(F)cc3F)N4CCN(CC4)CC(=O)O: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Created request ID: 3554d0ee-534e-48b8-b602-352f19735c70","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Received Claude response with ID: msg_01LCnyk5nWn3PHQkfamaSM9e","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Extracted 7170 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Validating SMILES: CC(N)C(=O)NC1CCCC(C1)C(C)NC(=O)C2=CC=CC=C2OC","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error during validation/property call for SMILES CC(N)C(=O)NC1CCCC(C1)C(C)NC(=O)C2=CC=CC=C2OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Validating SMILES: S)-2-amino-N-((R)-1-cyclohexyl-2-(methylamino)-2-oxoethyl)-3-(4-methoxyphenyl)propanamide","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES S)-2-amino-N-((R)-1-cyclohexyl-2-(methylamino)-2-oxoethyl)-3-(4-methoxyphenyl)propanamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: CNCC1=CC(OC)=C(OC)C=C1CC(=O)NC2CCCCC2N","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES CNCC1=CC(OC)=C(OC)C=C1CC(=O)NC2CCCCC2N: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: 3-(3,4-dimethoxyphenyl)-N-(2-aminocyclohexyl)-N-methylpropanamide","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES 3-(3,4-dimethoxyphenyl)-N-(2-aminocyclohexyl)-N-methylpropanamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: FC(F)(F)C1=CC=C(C=C1)C2CCCN2CC3=CC=C(O)C=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES FC(F)(F)C1=CC=C(C=C1)C2CCCN2CC3=CC=C(O)C=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-19 19:26:12"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-19 19:26:12"}
{"level":"info","message":"Received molecule generation request with requirements: Generate","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Created request ID: 2dbcf70c-dcfd-4a4b-85e5-53a9b2ec19a8","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Received Claude response with ID: msg_01P2FZUTGnX5siweKDvz4aDH","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Extracted 7240 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: CC(NC)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES CC(NC)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: 2-(4-(4-methylpiperazine-1-carbonyloxy)phenyl)-N-methylethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES 2-(4-(4-methylpiperazine-1-carbonyloxy)phenyl)-N-methylethan-1-amine: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCc3ccccc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES COc1cc(CC(=O)N2CCN(CCCc3ccccc3)CC2)ccc1OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: CNC(=O)c1ccc(N2CCN(CC(O)c3ccc(F)cc3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES CNC(=O)c1ccc(N2CCN(CC(O)c3ccc(F)cc3)CC2)cc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: 4-(4-(1-hydroxy-2-(4-fluorophenyl)ethyl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES 4-(4-(1-hydroxy-2-(4-fluorophenyl)ethyl)piperazin-1-yl)-N-methylbenzamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Created request ID: 4ed02fe6-df96-4c53-8b6f-0891a6a134f5","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Received Claude response with ID: msg_013dTVi7zucwmW6kYbYyyW21","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Extracted 6959 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CCCCC1)C(=O)NCCC2=CNC3=C2C=C(OC)C=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error during validation/property call for SMILES CC(NC(=O)C1CCCCC1)C(=O)NCCC2=CNC3=C2C=C(OC)C=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Validating SMILES: N-(1-(1H-indol-4-yloxy)propan-2-yl)-cyclohexanecarboxamide","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES N-(1-(1H-indol-4-yloxy)propan-2-yl)-cyclohexanecarboxamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: CC(C)NC(=O)C1=CC(=C(C=C1)OC)OCC2CCCN2CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES CC(C)NC(=O)C1=CC(=C(C=C1)OC)OCC2CCCN2CC3=CC=CC=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: N-isopropyl-4-methoxy-3-((1-phenethylpyrrolidin-3-yl)methoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES N-isopropyl-4-methoxy-3-((1-phenethylpyrrolidin-3-yl)methoxy)benzamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: CCCN1CCN(CC1)C(=O)C2=CN=C(N)S2.Cl","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES CCCN1CCN(CC1)C(=O)C2=CN=C(N)S2.Cl: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Created request ID: 76c6829f-e83f-44bd-bb28-42b56f6865ee","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Received Claude response with ID: msg_012i67F1HcGgCT6CWTYxwuJr","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Extracted 7231 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Validating SMILES: 2-[(4-fluorophenyl)(1-methylpiperidin-4-yl)methoxy]-N-methyl-N-(2-phenylethyl)ethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Successfully validated SMILES: 2-[(4-fluorophenyl)(1-methylpiperidin-4-yl)methoxy]-N-methyl-N-(2-phenylethyl)ethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-20 13:28:13"}
{"level":"info","message":"Validating SMILES: FC1=CC=C(C(OCCN(C)CCC2=CC=CC=C2)C2CCN(C)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-20 13:28:13"}
{"level":"error","message":"Error comparing molecules: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: the following arguments are required: --operation\r\n","service":"breaking-good-api","timestamp":"2025-04-20 17:05:14"}
{"level":"info","message":"Searching PubMed for: adhd AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:05:40"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:05:41"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:05:41"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:45"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:46"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:47"}
{"level":"info","message":"Searching PubMed for: Adderall AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:14"}
{"level":"info","message":"Found 10 IDs (total 44853)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:15"}
{"level":"error","message":"Literature search error: pubmedData?.ArticleIdList?.ArticleId?.find is not a function","service":"breaking-good-api","stack":"TypeError: pubmedData?.ArticleIdList?.ArticleId?.find is not a function\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:87:59\n    at Array.map (<anonymous>)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:62:40\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","timestamp":"2025-04-20 17:06:16"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:19"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:19"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:20"}
{"level":"info","message":"Searching PubMed for: Aderall AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:26"}
{"level":"info","message":"Found 0 IDs (total 0)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:26"}
{"level":"info","message":"Searching PubMed for: Neuro AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:35"}
{"level":"info","message":"Found 10 IDs (total 56201)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:35"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:36"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:43"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:44"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:44"}
{"level":"info","message":"Fetching details for ID: 29428394","service":"breaking-good-api","timestamp":"2025-04-20 17:06:46"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Created request ID: c9b61eb2-3679-4fc0-b7aa-56ce285360c7","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Received Claude response with ID: msg_01XLXUNvmwUNkeKR9xMm1B5R","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Extracted 6700 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: CC(C)(OCC(=O)N(C)CS(=O)(=O)c1ccc(cc1)C(=O)NC2C(=O)N(CC(c3ccccc3)C2)C","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(OCC(=O)N(C)CS(=O)(=O)c1ccc(cc1)C(=O)NC2C(=O)N(CC(c3ccccc3)C2)C","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: 2-[(Diphenylmethyl)sulfinyl]-N-[2-(1-oxo-4-phenyl-2-pyrrolidinyl)acetamide]methylacetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Successfully validated SMILES: 2-[(Diphenylmethyl)sulfinyl]-N-[2-(1-oxo-4-phenyl-2-pyrrolidinyl)acetamide]methylacetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: C1CC(CNC(=O)C2CCN(CC2)c3nc4c(cnn4)c(n3)C(F)(F)F)C(=O)N1CCc5ccccc5OC","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Created request ID: a82d4b9c-4c4f-4b0d-8a32-4969f7af9fac","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Received Claude response with ID: msg_01RJH8r4DhAKVYi5Tbd3iYr3","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Extracted 8554 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(cc1)Oc1ccc(cc1)C(=O)NC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(cc1)Oc1ccc(cc1)C(=O)NC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-20 17:28:08"}
{"level":"info","message":"Validating SMILES: 2-(4-(4-(2-aminopropyl)phenoxy)phenyl)-N-tert-butyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:28:08"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Created request ID: 7cd5360a-ac3e-4314-b341-9ffca932ff97","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Received Claude response with ID: msg_01TxuvMqtuhgTNRGyWMCNLEU","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Extracted 7240 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Validating SMILES: 2-[(R)-1-amino-2-methylpropyl]-N-methyl-benzhydrylsulfinamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Successfully validated SMILES: 2-[(R)-1-amino-2-methylpropyl]-N-methyl-benzhydrylsulfinamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Validating SMILES: CC(C)[C@H](N)C1=CC=CC=C1C(C2=CC=CC=C2)S(=O)NCH3","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Successfully validated SMILES: CC(C)[C@H](N)C1=CC=CC=C1C(C2=CC=CC=C2)S(=O)NCH3","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Validating SMILES: S)-N-(4-fluorophenethyl)-3-(1H-imidazol-5-yl)-2-methyl-propanamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Created request ID: 8f7c476b-07f4-46a0-940d-2eeccce0db79","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Saving results to file for request 8f7c476b-07f4-46a0-940d-2eeccce0db79","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:23"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"info","message":"Created request ID: 94660d83-dd94-4b2c-80e2-673cc7797043","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Saving results to file for request 94660d83-dd94-4b2c-80e2-673cc7797043","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"info","message":"Created request ID: 41eb4027-95a7-417d-94bb-8aae4f0d3401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Saving results to file for request 41eb4027-95a7-417d-94bb-8aae4f0d3401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Created request ID: f58250ad-3ac6-4d73-8a52-1a45de6bfb9a","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Saving results to file for request f58250ad-3ac6-4d73-8a52-1a45de6bfb9a","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:08"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:05"}
{"level":"info","message":"Created request ID: f63128db-e949-4f7a-aa05-9c8daf9855fd","service":"breaking-good-api","timestamp":"2025-04-22 23:02:05"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 23:02:05"}
{"level":"info","message":"Received Claude response with ID: msg_01HxFtZq516NgpqXyffcFnZq","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Extracted 7393 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)NCC(C)c1ccc(S(=O)C(C)(C)C)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Successfully validated SMILES: CC(NC)C(=O)NCC(C)c1ccc(S(=O)C(C)(C)C)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Validating SMILES: N-(2-(4-(tert-butylsulfinyl)phenyl)propyl)-2-(methylamino)propanamide","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Successfully validated SMILES: N-(2-(4-(tert-butylsulfinyl)phenyl)propyl)-2-(methylamino)propanamide","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Validating SMILES: COc1cc(CCN(C)C)cc(OC)c1OCC1CN(CCF)CCO1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CCN(C)C)cc(OC)c1OCC1CN(CCF)CCO1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Validated 4 molecules out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Saving results to file for request f63128db-e949-4f7a-aa05-9c8daf9855fd","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 11:16:12"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 11:16:12"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 11:50:43"}
{"level":"info","message":"Created request ID: 94fb17c9-2e9f-49c3-98dd-045410ce7099","service":"breaking-good-api","timestamp":"2025-04-23 11:50:43"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 11:50:43"}
{"level":"info","message":"Received Claude response with ID: msg_014tokmXeCPpKd4PF4jkEQLE","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Extracted 7791 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C)NC(=O)OC1CCN(C(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(C)NC(=O)OC1CCN(C(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C1=C(C)NC(C)=C1C(=O)OC2CC3CCC(C2)N3C","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully validated SMILES: CCOC(=O)C1=C(C)NC(C)=C1C(=O)OC2CC3CCC(C2)N3C","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validating SMILES: CN1C(=O)N(CC2=CC=CC=C2)C(=O)C1CCN3CCN(C(=O)C4=CC(F)=C(F)C=C4)CC3","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully validated SMILES: CN1C(=O)N(CC2=CC=CC=C2)C(=O)C1CCN3CCN(C(=O)C4=CC(F)=C(F)C=C4)CC3","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validated 3 molecules out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Saving results to file for request 94fb17c9-2e9f-49c3-98dd-045410ce7099","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:03"}
{"level":"info","message":"Created request ID: f1a98ee1-773f-474b-a8eb-6b38d7690299","service":"breaking-good-api","timestamp":"2025-04-23 12:38:03"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 12:38:03"}
{"level":"info","message":"Received Claude response with ID: msg_01AoRaXFG851THW2otPd9p8h","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Extracted 8686 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(pyrrolidin-1-yl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(pyrrolidin-1-yl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Validating SMILES: CC(=O)N(C)CC(C)(C)C(=O)NC1CCN(CC1)Cc1ccc(cc1)S(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Successfully validated SMILES: CC(=O)N(C)CC(C)(C)C(=O)NC1CCN(CC1)Cc1ccc(cc1)S(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Validating SMILES: OC(=O)C1(NCCCOP(=O)(O)O)CCN(CC1)c1cccc(Cl)c1Cl","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Successfully validated SMILES: OC(=O)C1(NCCCOP(=O)(O)O)CCN(CC1)c1cccc(Cl)c1Cl","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Validating SMILES: CN1CC(OC(=O)c2ccc(F)cc2)CC1CCc1ccc(O)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Successfully validated SMILES: CN1CC(OC(=O)c2ccc(F)cc2)CC1CCc1ccc(O)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Validated 4 molecules out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Saving results to file for request f1a98ee1-773f-474b-a8eb-6b38d7690299","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:48"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 16:45:30"}
{"level":"info","message":"Created request ID: 72dc3f95-d940-4400-a9f3-5722fe835ba9","service":"breaking-good-api","timestamp":"2025-04-23 16:45:30"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 16:45:30"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 17:09:53"}
{"level":"info","message":"Created request ID: f1de2b6a-45bf-42bd-a86f-45e2625339c1","service":"breaking-good-api","timestamp":"2025-04-23 17:09:53"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 17:09:53"}
{"level":"info","message":"Received Claude response with ID: msg_015E2kD7wKQwM5HbDiYozprt","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Extracted 8790 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Validating SMILES: OC1=CC(CCNCCc2cc(F)c(O)c(F)c2)=C(O)C=C1","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Successfully validated SMILES: OC1=CC(CCNCCc2cc(F)c(O)c(F)c2)=C(O)C=C1","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Validating SMILES: NC[C@H](c1ccccc1)c2ccc3OCCNc3c2","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Successfully validated SMILES: NC[C@H](c1ccccc1)c2ccc3OCCNc3c2","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Validating SMILES: Cc1cc2c(c(C)c1)N=C(CN3CCC(c4ccc(Cl)cc4)CC3)N(Cc1ccccc1SC)C2=O","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Successfully validated SMILES: Cc1cc2c(c(C)c1)N=C(CN3CCC(c4ccc(Cl)cc4)CC3)N(Cc1ccccc1SC)C2=O","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Validated 3 molecules out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Saving results to file for request f1de2b6a-45bf-42bd-a86f-45e2625339c1","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 17:12:43"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 17:12:43"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:17"}
{"level":"info","message":"Created request ID: 8c54b1f2-3cee-4c8f-802e-640a1b94edb7","service":"breaking-good-api","timestamp":"2025-04-23 17:33:17"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 17:33:17"}
{"level":"info","message":"Received Claude response with ID: msg_01GgLXRPfegMsyp4Q7rS1sm5","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Extracted 6611 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: R)-3-(3,4-difluorophenyl)-N-ethyl-N-(pyridin-3-yl)methyl-2-methylpropan-1-amine","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: R)-3-(3,4-difluorophenyl)-N-ethyl-N-(pyridin-3-yl)methyl-2-methylpropan-1-amine","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: CC(C(CN(CC)Cc1cccnc1)c2ccc(F)c(F)c2)C","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: CC(C(CN(CC)Cc1cccnc1)c2ccc(F)c(F)c2)C","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: S)-4-(2-amino-4-chlorophenoxy)-N-(2-(pyrrolidin-1-yl)ethyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: S)-4-(2-amino-4-chlorophenoxy)-N-(2-(pyrrolidin-1-yl)ethyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: Nc1cc(Cl)ccc1OC2CCN(C(=O)NCCN3CCCC3)CC2","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: Nc1cc(Cl)ccc1OC2CCN(C(=O)NCCN3CCCC3)CC2","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)c1ccc(C(F)(F)F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: CC(NC)C(=O)c1ccc(C(F)(F)F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Saving results to file for request 8c54b1f2-3cee-4c8f-802e-640a1b94edb7","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Enhancing molecules with ADMET predictions and Molblocks...","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"warn","message":"Molblock generation failed for R)-3-(3,4-difluorophenyl)-N-ethyl-N-(pyridin-3-yl)methyl-2-methylpropan-1-amine: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"warn","message":"Molblock generation failed for S)-4-(2-amino-4-chlorophenoxy)-N-(2-(pyrrolidin-1-yl)ethyl)piperidine-1-carboxamide: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully obtained molblock for CC(NC)C(=O)c1ccc(C(F)(F)F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully obtained molblock for CC(C(CN(CC)Cc1cccnc1)c2ccc(F)c(F)c2)C","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully obtained molblock for Nc1cc(Cl)ccc1OC2CCN(C(=O)NCCN3CCCC3)CC2","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:08"}
{"level":"info","message":"Created request ID: 99099315-59e7-4104-a90a-727535a7ff77","service":"breaking-good-api","timestamp":"2025-04-23 17:42:08"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 17:42:08"}
{"level":"info","message":"Received Claude response with ID: msg_01FqeXhY1kaoMhHW28gy7f5u","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Extracted 6685 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Validating SMILES: CCC(=O)Nc1ccc(C(=O)NC2CCN(CCCc3ccccc3F)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Successfully validated SMILES: CCC(=O)Nc1ccc(C(=O)NC2CCN(CCCc3ccccc3F)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Validating SMILES: N-(4-(2-(3-(3-fluorophenethyl)piperazin-1-yl)acetamido)phenyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Successfully validated SMILES: N-(4-(2-(3-(3-fluorophenethyl)piperazin-1-yl)acetamido)phenyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validating SMILES: CNC(=O)c1ccc(N2CCN(C3CCCc4ccc(F)cc43)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)c1ccc(N2CCN(C3CCCc4ccc(F)cc43)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validating SMILES: 4-(4-(7-fluoro-1,2,3,4-tetrahydronaphthalen-1-yl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully validated SMILES: 4-(4-(7-fluoro-1,2,3,4-tetrahydronaphthalen-1-yl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Saving results to file for request 99099315-59e7-4104-a90a-727535a7ff77","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Enhancing molecules with ADMET predictions and Molblocks...","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"warn","message":"Molblock generation failed for N-(4-(2-(3-(3-fluorophenethyl)piperazin-1-yl)acetamido)phenyl)propionamide: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"warn","message":"Molblock generation failed for 4-(4-(7-fluoro-1,2,3,4-tetrahydronaphthalen-1-yl)piperazin-1-yl)-N-methylbenzamide: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Successfully obtained molblock for CCC(=O)Nc1ccc(C(=O)NC2CCN(CCCc3ccccc3F)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Successfully obtained molblock for CNC(=O)c1ccc(N2CCN(C3CCCc4ccc(F)cc43)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Successfully obtained molblock for COc1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:04"}
{"level":"info","message":"Created request ID: 08772a44-fb37-4a79-879f-8823433b9556","service":"breaking-good-api","timestamp":"2025-04-23 18:06:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 18:06:04"}
{"level":"info","message":"Received Claude response with ID: msg_01MEQixZr3RPP3EDjnfiRE87","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Extracted 5874 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C(C2=CC=C(SC3CC3)C=C2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C(C2=CC=C(SC3CC3)C=C2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: R)-2-(diphenylmethyl)-N-methyl-1-phenylethylamine-2-sulfonamide","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: R)-2-(diphenylmethyl)-N-methyl-1-phenylethylamine-2-sulfonamide","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: O=C(NC1CCN(CC1)C2=CC=CC=C2)C3=CC=C(C=C3)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: O=C(NC1CCN(CC1)C2=CC=CC=C2)C3=CC=C(C=C3)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: CN1C2CCC1CC(C2)OC(C3=CC=CC=C3)C4=CC=C(Cl)C=C4","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: CN1C2CCC1CC(C2)OC(C3=CC=CC=C3)C4=CC=C(Cl)C=C4","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validated 4 molecules out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Saving results to file for request 08772a44-fb37-4a79-879f-8823433b9556","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:36"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 18:14:11"}
{"level":"info","message":"Created request ID: f52719b4-f8a7-4df0-be14-453bb657c061","service":"breaking-good-api","timestamp":"2025-04-23 18:14:11"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 18:14:11"}
{"level":"info","message":"Received Claude response with ID: msg_01NN9VXE6wyRJeCgZt1x2YTt","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Extracted 8733 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Validating SMILES: FC1=CC(=C(F)C=C1)C2=CCN(C)C(C2)C(=O)N","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Attempting 3D structure generation for: FC1=CC(=C(F)C=C1)C2=CCN(C)C(C2)C(=O)N","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): FC1=CC(=C(F)C=C1)C2=CCN(C)C(C2)C(=O)N","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Validating SMILES: R)-2-(benzhydryloxy)-N-methyl-3-(1H-imidazol-4-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Attempting 3D structure generation for: R)-2-(benzhydryloxy)-N-methyl-3-(1H-imidazol-4-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: R)-2-(benzhydryloxy)-N-methyl-3-(1H-imidazol-4-yl)propanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Validating SMILES: O=C(NC)C(OC(C1=CC=CC=C1)C2=CC=CC=C2)[C@H]3CN=CN3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Attempting 3D structure generation for: O=C(NC)C(OC(C1=CC=CC=C1)C2=CC=CC=C2)[C@H]3CN=CN3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): O=C(NC)C(OC(C1=CC=CC=C1)C2=CC=CC=C2)[C@H]3CN=CN3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Validating SMILES: CN1C(=O)N(C)C2=C1C(=O)N(CCO)C(C(=O)N)=C2C3=CC=C(Cl)C=C3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Attempting 3D structure generation for: CN1C(=O)N(C)C2=C1C(=O)N(CCO)C(C(=O)N)=C2C3=CC=C(Cl)C=C3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CN1C(=O)N(C)C2=C1C(=O)N(CCO)C(C(=O)N)=C2C3=CC=C(Cl)C=C3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Saving results to file for request f52719b4-f8a7-4df0-be14-453bb657c061","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 18:15:02"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 18:15:26"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 18:15:26"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 18:21:23"}
{"level":"info","message":"Created request ID: 11307025-bd20-41a8-b17c-7db97527e197","service":"breaking-good-api","timestamp":"2025-04-23 18:21:23"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 18:21:23"}
{"level":"info","message":"Received Claude response with ID: msg_01SDK1Cbt7kGSktdzi8oBcG5","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Extracted 8076 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Validating SMILES: CCC(=O)NCCC1=CC(OC)=C(OC)C=C1NC(=O)C1CC1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Attempting 3D structure generation for: CCC(=O)NCCC1=CC(OC)=C(OC)C=C1NC(=O)C1CC1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCC(=O)NCCC1=CC(OC)=C(OC)C=C1NC(=O)C1CC1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Validating SMILES: N-(3-(3,4-dimethoxyphenyl)propyl)-N-(cyclopropanecarbonyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Attempting 3D structure generation for: N-(3-(3,4-dimethoxyphenyl)propyl)-N-(cyclopropanecarbonyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(3-(3,4-dimethoxyphenyl)propyl)-N-(cyclopropanecarbonyl)propionamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Validating SMILES: FC(F)(F)c1ccc(C(=O)N2CC3(CCN(C)CC3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Attempting 3D structure generation for: FC(F)(F)c1ccc(C(=O)N2CC3(CCN(C)CC3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): FC(F)(F)c1ccc(C(=O)N2CC3(CCN(C)CC3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Validating SMILES: CN1CCC(C(=O)Nc2ccc(OC)c(OC)c2)CC1OC(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Attempting 3D structure generation for: CN1CCC(C(=O)Nc2ccc(OC)c(OC)c2)CC1OC(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CN1CCC(C(=O)Nc2ccc(OC)c(OC)c2)CC1OC(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Saving results to file for request 11307025-bd20-41a8-b17c-7db97527e197","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 18:24:16"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 18:24:16"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 21:30:34"}
{"level":"info","message":"Created request ID: a366ac6b-6e00-4e15-b958-b63e24b9f363","service":"breaking-good-api","timestamp":"2025-04-23 21:30:34"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 21:30:34"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 21:30:35"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic-version: header is required\"}}","service":"breaking-good-api","timestamp":"2025-04-23 21:30:35"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 21:30:35"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 400\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:76:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:274:24","timestamp":"2025-04-23 21:30:35"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 21:39:52"}
{"level":"info","message":"Created request ID: 4cffdee4-5007-4e5f-87c0-2475406c9071","service":"breaking-good-api","timestamp":"2025-04-23 21:39:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 21:39:52"}
{"level":"info","message":"Received Claude response with ID: msg_01Fcuz3epwrRoB1e56yBNsKy","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Extracted 7017 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Validating SMILES: O=C(OC)[C@](Cc1ccc(F)cc1)(c2cccnc2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Attempting 3D structure generation for: O=C(OC)[C@](Cc1ccc(F)cc1)(c2cccnc2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): O=C(OC)[C@](Cc1ccc(F)cc1)(c2cccnc2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Validating SMILES: 2S)-N,N-diethyl-2-(6,7-dihydro-4H-benzo[e][1,3]oxazin-3(5H)-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Attempting 3D structure generation for: 2S)-N,N-diethyl-2-(6,7-dihydro-4H-benzo[e][1,3]oxazin-3(5H)-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2S)-N,N-diethyl-2-(6,7-dihydro-4H-benzo[e][1,3]oxazin-3(5H)-yl)propanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Validating SMILES: CCN(CC)C(=O)[C@H](C)N1CCc2ccccc2OC1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Attempting 3D structure generation for: CCN(CC)C(=O)[C@H](C)N1CCc2ccccc2OC1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCN(CC)C(=O)[C@H](C)N1CCc2ccccc2OC1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Validating SMILES: CC(C)[C@H](N)Cc1ccnc(N2CCN(c3cccc(Cl)c3Cl)C(=O)C2)n1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)[C@H](N)Cc1ccnc(N2CCN(c3cccc(Cl)c3Cl)C(=O)C2)n1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)[C@H](N)Cc1ccnc(N2CCN(c3cccc(Cl)c3Cl)C(=O)C2)n1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Saving results to file for request 4cffdee4-5007-4e5f-87c0-2475406c9071","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 22:24:13"}
{"level":"info","message":"Created request ID: 77d4b80b-f275-4570-9213-9de9f5a147d5","service":"breaking-good-api","timestamp":"2025-04-23 22:24:13"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 22:24:13"}
{"level":"info","message":"Received Claude response with ID: msg_01EeFBE8jxqC1oRDfB6gnLZB","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Extracted 8713 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Validating SMILES: CC(N)CC(=O)N1CCN(C(=O)C2(c3ccccc3)CC2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)CC(=O)N1CCN(C(=O)C2(c3ccccc3)CC2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)CC(=O)N1CCN(C(=O)C2(c3ccccc3)CC2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Validating SMILES: 2-amino-3-methyl-N-(4-(2-(cyclopropyl(phenyl)methanoyl)piperazin-1-yl)butanamide","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Attempting 3D structure generation for: 2-amino-3-methyl-N-(4-(2-(cyclopropyl(phenyl)methanoyl)piperazin-1-yl)butanamide","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-amino-3-methyl-N-(4-(2-(cyclopropyl(phenyl)methanoyl)piperazin-1-yl)butanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Validating SMILES: COc1cc(CCN2CCN(C(=O)C3CCC(F)(F)CC3)CC2)c(OC)c2c1OCO2","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(CCN2CCN(C(=O)C3CCC(F)(F)CC3)CC2)c(OC)c2c1OCO2","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(CCN2CCN(C(=O)C3CCC(F)(F)CC3)CC2)c(OC)c2c1OCO2","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C1=C(C)NC(C)=C(C1c1ccccc1N(C)S(=O)(=O)c1ccc(N)cc1)C(=O)OCC","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Attempting 3D structure generation for: CCOC(=O)C1=C(C)NC(C)=C(C1c1ccccc1N(C)S(=O)(=O)c1ccc(N)cc1)C(=O)OCC","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCOC(=O)C1=C(C)NC(C)=C(C1c1ccccc1N(C)S(=O)(=O)c1ccc(N)cc1)C(=O)OCC","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Validating SMILES: 2,6-dimethyl-4-(2-(N-methyl-N-(4-aminophenylsulfonyl)amino)phenyl)-1,4-dihydropyridine-3,5-dicarboxylate","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Attempting 3D structure generation for: 2,6-dimethyl-4-(2-(N-methyl-N-(4-aminophenylsulfonyl)amino)phenyl)-1,4-dihydropyridine-3,5-dicarboxylate","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2,6-dimethyl-4-(2-(N-methyl-N-(4-aminophenylsulfonyl)amino)phenyl)-1,4-dihydropyridine-3,5-dicarboxylate - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Saving results to file for request 77d4b80b-f275-4570-9213-9de9f5a147d5","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
