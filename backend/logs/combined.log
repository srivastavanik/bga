{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-15 00:00:50"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"info","message":"Using fallback test response since API call failed","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Extracted 8029 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)C(=O)NC)N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)C(CS(=O)C(=O)NC)N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Validating SMILES: COc1ccc(CCN2CCN(c3ncnc4[nH]ccc34)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(CCN2CCN(c3ncnc4[nH]ccc34)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:47"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(CCNC(=O)C2CCN(CC3=Cc4ccccc4C3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:47"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(CCNC(=O)C2CCN(CC3=Cc4ccccc4C3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:48"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:36:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Extracted 8364 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Validating SMILES: CC(C(=O)OC)C1CCN(C)CC1c1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Successfully validated SMILES: CC(C(=O)OC)C1CCN(C)CC1c1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(C(=O)CS(=O)c2ccccc2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(C(=O)CS(=O)c2ccccc2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 00:38:32"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc(F)cc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:38:32"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc(F)cc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Validating SMILES: N-substituted-2-amino-3-(4-ethoxy-phenyl)propane","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Successfully validated SMILES: N-substituted-2-amino-3-(4-ethoxy-phenyl)propane","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Extracted 9582 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Validating SMILES: CC(C)C(=O)OCCCN1C(=O)C2=C(C1=O)C(=O)N(C(=O)N2)CCCOC(=O)C(C)C","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Successfully validated SMILES: CC(C)C(=O)OCCCN1C(=O)C2=C(C1=O)C(=O)N(C(=O)N2)CCCOC(=O)C(C)C","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc4c(c3)OCO4)CC2)cc(OC)c1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc4c(c3)OCO4)CC2)cc(OC)c1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:50:56"}
{"level":"info","message":"Validating SMILES: 3,4,5-trimethoxy-N-[1-(3-(1,3-benzodioxol-5-yloxy)propyl)piperidin-4-yl]benzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:56"}
{"level":"info","message":"Successfully validated SMILES: 3,4,5-trimethoxy-N-[1-(3-(1,3-benzodioxol-5-yloxy)propyl)piperidin-4-yl]benzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Validating SMILES: COc1ccc(OC)c(CC(=O)NCCCNc2ncnc3[nH]cnc23)c1","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(OC)c(CC(=O)NCCCNc2ncnc3[nH]cnc23)c1","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Validating SMILES: N-(3-(9H-purin-6-ylamino)propyl)-2-(2,5-dimethoxyphenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Successfully validated SMILES: N-(3-(9H-purin-6-ylamino)propyl)-2-(2,5-dimethoxyphenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:58"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:50:58"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Extracted 6670 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Validating SMILES: O=C(O)C1C(=O)N(CC2=CC=C(F)C=C2)C(=O)N1CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Successfully validated SMILES: O=C(O)C1C(=O)N(CC2=CC=C(F)C=C2)C(=O)N1CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CC(=O)N2CCN(C3CCN(C(=O)C4=CC=C(F)C=C4)CC3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CC(=O)N2CCN(C3CCN(C(=O)C4=CC=C(F)C=C4)CC3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Validating SMILES: N-(4-(4-(2-methoxyphenyl)piperazin-1-yl)butyl)-4-fluorobenzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Successfully validated SMILES: N-(4-(4-(2-methoxyphenyl)piperazin-1-yl)butyl)-4-fluorobenzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Validating SMILES: CC(C)NC(=O)C1(C2=CC(Cl)=C(OC)C=C2)CCN(CC3=CC=C(F)C=C3)CC1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Successfully validated SMILES: CC(C)NC(=O)C1(C2=CC(Cl)=C(OC)C=C2)CCN(CC3=CC=C(F)C=C3)CC1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Validating SMILES: N-Isopropyl-1-(3-chloro-4-methoxyphenyl)-4-(4-fluorobenzyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Successfully validated SMILES: N-Isopropyl-1-(3-chloro-4-methoxyphenyl)-4-(4-fluorobenzyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:21"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:52:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Extracted 9597 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)NC)NC(=O)OC1CCCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)C(CS(=O)NC)NC(=O)OC1CCCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-methyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-methyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:00:44"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N1CCN(C2=CC=CC=C2F)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:44"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(C1CCCC1)N1CCN(C2=CC=CC=C2F)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Validating SMILES: 2-(1-piperidyl)-2-(cyclopentyl)acetate-N-(2-fluorophenyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Successfully validated SMILES: 2-(1-piperidyl)-2-(cyclopentyl)acetate-N-(2-fluorophenyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Validating SMILES: C1CN(CC(C1)OC(=O)N1CCCCC1)C(=O)C1=CC=C(C=C1)C#CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Successfully validated SMILES: C1CN(CC(C1)OC(=O)N1CCCCC1)C(=O)C1=CC=C(C=C1)C#CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:46"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:00:46"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Extracted 8003 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Validating SMILES: C[C@H](OS(=O)(=O)c1ccccc1)C(=O)NCCCC(c1ccccc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Successfully validated SMILES: C[C@H](OS(=O)(=O)c1ccccc1)C(=O)NCCCC(c1ccccc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(cc1OC)C(=O)N1CCN(CC1)C(C)Cc1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(cc1OC)C(=O)N1CCN(CC1)C(C)Cc1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(cc1)OCCCOc1cccc(c1)C#N","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(cc1)OCCCOc1cccc(c1)C#N","service":"breaking-good-api","timestamp":"2025-04-15 01:06:48"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:06:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Extracted 5870 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Validating SMILES: N-methyl-4-phenyl-3-(pyrrolidin-1-yl)butan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-4-phenyl-3-(pyrrolidin-1-yl)butan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Validating SMILES: CC(CCCN(C)C)C1=CC=CC=C1N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Successfully validated SMILES: CC(CCCN(C)C)C1=CC=CC=C1N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Validating SMILES: CN(C)C(CC1=CC=CC=C1)C1=NC(N)=CO1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Successfully validated SMILES: CN(C)C(CC1=CC=CC=C1)C1=NC(N)=CO1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:36"}
{"level":"info","message":"Validating SMILES: 3-(benzofuran-4-yl)-N,N-dimethyl-3-(methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:36"}
{"level":"info","message":"Successfully validated SMILES: 3-(benzofuran-4-yl)-N,N-dimethyl-3-(methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Validating SMILES: CN(C)CCCC(NC)C1=CC2=CC=CC=C2O1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Successfully validated SMILES: CN(C)CCCC(NC)C1=CC2=CC=CC=C2O1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Extracted 7530 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1=CC(=C(C=C1)S(=O)(=O)N)OC2CCOCC2)C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Successfully validated SMILES: CC(NC(=O)C1=CC(=C(C=C1)S(=O)(=O)N)OC2CCOCC2)C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Validating SMILES: CCCC(C(=O)N1CCN(CC1)C2=CC=C(C=C2)OC)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Successfully validated SMILES: CCCC(C(=O)N1CCN(CC1)C2=CC=C(C=C2)OC)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1OC)C(=O)NC2CCN(CC2)CC3=CC=CC=C3CN4C=NC=N4","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC(=CC=C1OC)C(=O)NC2CCN(CC2)CC3=CC=CC=C3CN4C=NC=N4","service":"breaking-good-api","timestamp":"2025-04-15 01:17:19"}
{"level":"info","message":"Validating SMILES: N-(1-(benzylimidazol-1-yl)piperidin-4-yl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:17:19"}
{"level":"info","message":"Successfully validated SMILES: N-(1-(benzylimidazol-1-yl)piperidin-4-yl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:17:20"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:17:20"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Extracted 7165 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Validating SMILES: COC(=O)C(CS(=O)C(C)(C)NC(=O)OC)NC(=O)OCH3","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(CS(=O)C(C)(C)NC(=O)OC)NC(=O)OCH3","service":"breaking-good-api","timestamp":"2025-04-15 01:18:24"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CCCC1)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:24"}
{"level":"info","message":"Successfully validated SMILES: CC(NC(=O)C1CCCC1)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1OC)CCN1CC(CC2=CC=C(Cl)C=C2)N(C)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC(=CC=C1OC)CCN1CC(CC2=CC=C(Cl)C=C2)N(C)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Extracted 5776 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Found 6 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)CNC(=O)OS(=O)(=O)c1ccc(N)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)CNC(=O)OS(=O)(=O)c1ccc(N)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Validating SMILES: N-(2,2-dimethylpropanoyl)-2-[(4-aminophenyl)sulfonyloxy]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Successfully validated SMILES: N-(2,2-dimethylpropanoyl)-2-[(4-aminophenyl)sulfonyloxy]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:23:59"}
{"level":"info","message":"Validating SMILES: C1CN2CCC1CC2C(c1ccccc1)OC(=O)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:23:59"}
{"level":"info","message":"Successfully validated SMILES: C1CN2CCC1CC2C(c1ccccc1)OC(=O)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Validating SMILES: N-methyl-N-(3","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-N-(3","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Validating SMILES: COc1ccc(CC(NC)C(=O)NCC2=CC(=O)OC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(CC(NC)C(=O)NCC2=CC(=O)OC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Validating SMILES: N-methyl-2-(4-methoxyphenyl)-3-oxo-3-((2-oxo-2H-pyran-4-yl)methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-2-(4-methoxyphenyl)-3-oxo-3-((2-oxo-2H-pyran-4-yl)methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Validated 6 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Extracted 7089 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Validating SMILES: CNC(=O)C(C1=CC=CC=C1)C2CCN(C)CC2","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)C(C1=CC=CC=C1)C2CCN(C)CC2","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)NCCCC1=CC=C(OS(=O)(=O)C)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)NCCCC1=CC=C(OS(=O)(=O)C)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CCNC(=O)C2CCN(CC3=CC=C(F)C=C3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CCNC(=O)C2CCN(CC3=CC=C(F)C=C3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:07"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:25:07"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Extracted 8237 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Validating SMILES: CC(C(=O)OC)C(C1=CC=CC=C1)N2CCN(CC2)C3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Successfully validated SMILES: CC(C(=O)OC)C(C1=CC=CC=C1)N2CCN(CC2)C3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:29:46"}
{"level":"info","message":"Validating SMILES: CNC(=O)C1=CC(=C(C=C1)NS(=O)(=O)C2=CC=C(C=C2)OC)OC3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-15 01:29:46"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)C1=CC(=C(C=C1)NS(=O)(=O)C2=CC=C(C=C2)OC)OC3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Validating SMILES: N-methyl-3-methoxy-4-(3-piperidinyloxy)-N-(4-methoxyphenylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-3-methoxy-4-(3-piperidinyloxy)-N-(4-methoxyphenylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Validating SMILES: CC1C2CCC(C1(C)C(=O)C(C)(C)S(=O)C3=CC=C(C=C3)OC)N2C","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Successfully validated SMILES: CC1C2CCC(C1(C)C(=O)C(C)(C)S(=O)C3=CC=C(C=C3)OC)N2C","service":"breaking-good-api","timestamp":"2025-04-15 01:29:48"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:29:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Extracted 7796 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(OC(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:05"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(S(=O)C(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:05"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(S(=O)C(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Validating SMILES: COc1ccc(C(=O)NCCc2ccc(F)cc2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(C(=O)NCCc2ccc(F)cc2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Validating SMILES: N-(4-fluorophenethyl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Successfully validated SMILES: N-(4-fluorophenethyl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:31:07"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:31:07"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Extracted 8676 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NC(=O)C[C@@H](C(=O)NC(C)(C)C)S(=O)C1=CC=C(C=C1)OC","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NC(=O)C[C@@H](C(=O)NC(C)(C)C)S(=O)C1=CC=C(C=C1)OC","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methoxyphenyl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methoxyphenyl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:40:42"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C(C1CCCCN1)C1=CC=C(C=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-15 01:40:42"}
{"level":"info","message":"Successfully validated SMILES: CCOC(=O)C(C1CCCCN1)C1=CC=C(C=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CC(N)CC2=CC(OC)=C(OC)C=C2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CC(N)CC2=CC(OC)=C(OC)C=C2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"info","message":"Created request ID: 4188bbd8-e522-42c8-a711-03547da661ec","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Error in molecule generation: Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"info","message":"Received molecule generation request with requirements: Design a non-stimulant ADHD medication that targets dopamine transporters with minimal side effects.","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"info","message":"Created request ID: f85b9484-cd97-4a98-bc83-33f104f2686f","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Error in molecule generation: Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"info","message":"Created request ID: e8c2a69e-ac76-4b5f-9150-2debb94408c5","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Generating fallback molecules due to Claude API error","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Successfully created fallback response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CN1C=NC2=C1C(=O)N(C(=O)N2C)C: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CC(CS)C(=O)N1CCCC1C(=O)O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Created request ID: 3553c4d5-d592-4032-bf56-0d9ea1600903","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Received Claude response with ID: msg_01GaAHpBm1e26niU6V2irMrS","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Extracted 7593 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N(C)Cc1cccc(c1)C(=O)NC(C)(C)CS(=O)(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES COC(=O)C(C1CCCC1)N(C)Cc1cccc(c1)C(=O)NC(C)(C)CS(=O)(=O)c1ccccc1: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N(C)Cc1ccc(F)c(c1)C(O)C#N","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES COC(=O)C(C1CCCC1)N(C)Cc1ccc(F)c(c1)C(O)C#N: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)OC(C)(C)C)C(=O)NCCc1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES CC(NC(=O)OC(C)(C)C)C(=O)NCCc1ccc(OC)c(OC)c1: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Created request ID: 6ae9bbb0-99e6-4fd9-a965-420ed10695e8","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Received Claude response with ID: msg_012vm6UqPzEf21xbfZNCNW1M","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Extracted 8547 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Validating SMILES: COC(=O)c1cc2ccccc2cc1N1CCC(c2ccc(F)cc2)(C)C(C)C1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)c1cc2ccccc2cc1N1CCC(c2ccc(F)cc2)(C)C(C)C1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Validating SMILES: CC1(C)OCC(CN(C)C(=O)c2ccc(C)cc2)C(c2ccc(Cl)c(Cl)cc2)N1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Successfully validated SMILES: CC1(C)OCC(CN(C)C(=O)c2ccc(C)cc2)C(c2ccc(Cl)c(Cl)cc2)N1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Validating SMILES: CCN(CC)CCOc1ccc(N2CCN(c3ccc4oc(c5c(F)cccc5F)nc4c3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Successfully validated SMILES: CCN(CC)CCOc1ccc(N2CCN(c3ccc4oc(c5c(F)cccc5F)nc4c3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Successfully extracted 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Saving results to file for request 6ae9bbb0-99e6-4fd9-a965-420ed10695e8","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Created request ID: b69bdc80-fbeb-4c3e-a27b-5e2981a12263","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Received Claude response with ID: msg_01YUdrsGwycmeLTAhKXSR9mN","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Extracted 7439 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)c1ccc(cc1)OC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CC(NC)C(=O)c1ccc(cc1)OC(F)(F)F: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(c(c1)OC)NS(=O)(=O)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CC(N)Cc1ccc(c(c1)OC)NS(=O)(=O)C(F)(F)F: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CCCN1CCN(CC1)C(=O)c1ccc(cc1)C(C)NC","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CCCN1CCN(CC1)C(=O)c1ccc(cc1)C(C)NC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Created request ID: 3668773d-b529-490c-88dd-efef149d4a47","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Received Claude response with ID: msg_01N1r6wdXkUEq3FtCMKEJCJ6","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Extracted 9618 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C2C(C2)C3=CC=C(C=C3)OC4=CC=C(N)C=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C2C(C2)C3=CC=C(C=C3)OC4=CC=C(N)C=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1)C2CCCN2CC(=O)C3=CC=C(F)C=C3NC4=CC=CC=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES COC1=CC(=CC=C1)C2CCCN2CC(=O)C3=CC=C(F)C=C3NC4=CC=CC=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: CC1=C(C(=O)N(C)C2=CC=CC=C12)CC3CCNCC3C4=CC=C(OC)C=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES CC1=C(C(=O)N(C)C2=CC=CC=C12)CC3CCNCC3C4=CC=C(OC)C=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Created request ID: fc360418-703a-42a1-ba9e-ad04c4002201","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Received Claude response with ID: msg_012uSaZfvoG8mnj1oWAoZ12r","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Extracted 8020 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: FC(F)(F)c1ccc(cc1)C(=O)NC2CCN(CC2)CCCOc3ccc(F)cc3","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES FC(F)(F)c1ccc(cc1)C(=O)NC2CCN(CC2)CCCOc3ccc(F)cc3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: N-(4-(trifluoromethyl)phenyl)-1-(3-(4-fluorophenoxy)propyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES N-(4-(trifluoromethyl)phenyl)-1-(3-(4-fluorophenoxy)propyl)piperidine-4-carboxamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: N-{1-[3-(3-fluoro-phenyl)-propyl]-piperidin-4-yl}-N-phenyl-propionamide","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES N-{1-[3-(3-fluoro-phenyl)-propyl]-piperidin-4-yl}-N-phenyl-propionamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: COc1ccc2c(c1)C(=O)N(C2)CCCN3CCN(CC3)c4cccc(Cl)c4","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES COc1ccc2c(c1)C(=O)N(C2)CCCN3CCN(CC3)c4cccc(Cl)c4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: Cc1nc(sc1C(=O)NCCN2CCN(CC2)c3ccc(F)cc3F)N4CCN(CC4)CC(=O)O","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES Cc1nc(sc1C(=O)NCCN2CCN(CC2)c3ccc(F)cc3F)N4CCN(CC4)CC(=O)O: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Created request ID: 3554d0ee-534e-48b8-b602-352f19735c70","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Received Claude response with ID: msg_01LCnyk5nWn3PHQkfamaSM9e","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Extracted 7170 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Validating SMILES: CC(N)C(=O)NC1CCCC(C1)C(C)NC(=O)C2=CC=CC=C2OC","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error during validation/property call for SMILES CC(N)C(=O)NC1CCCC(C1)C(C)NC(=O)C2=CC=CC=C2OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Validating SMILES: S)-2-amino-N-((R)-1-cyclohexyl-2-(methylamino)-2-oxoethyl)-3-(4-methoxyphenyl)propanamide","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES S)-2-amino-N-((R)-1-cyclohexyl-2-(methylamino)-2-oxoethyl)-3-(4-methoxyphenyl)propanamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: CNCC1=CC(OC)=C(OC)C=C1CC(=O)NC2CCCCC2N","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES CNCC1=CC(OC)=C(OC)C=C1CC(=O)NC2CCCCC2N: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: 3-(3,4-dimethoxyphenyl)-N-(2-aminocyclohexyl)-N-methylpropanamide","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES 3-(3,4-dimethoxyphenyl)-N-(2-aminocyclohexyl)-N-methylpropanamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: FC(F)(F)C1=CC=C(C=C1)C2CCCN2CC3=CC=C(O)C=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES FC(F)(F)C1=CC=C(C=C1)C2CCCN2CC3=CC=C(O)C=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-19 19:26:12"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-19 19:26:12"}
{"level":"info","message":"Received molecule generation request with requirements: Generate","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Created request ID: 2dbcf70c-dcfd-4a4b-85e5-53a9b2ec19a8","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Received Claude response with ID: msg_01P2FZUTGnX5siweKDvz4aDH","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Extracted 7240 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: CC(NC)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES CC(NC)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: 2-(4-(4-methylpiperazine-1-carbonyloxy)phenyl)-N-methylethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES 2-(4-(4-methylpiperazine-1-carbonyloxy)phenyl)-N-methylethan-1-amine: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCc3ccccc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES COc1cc(CC(=O)N2CCN(CCCc3ccccc3)CC2)ccc1OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: CNC(=O)c1ccc(N2CCN(CC(O)c3ccc(F)cc3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES CNC(=O)c1ccc(N2CCN(CC(O)c3ccc(F)cc3)CC2)cc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: 4-(4-(1-hydroxy-2-(4-fluorophenyl)ethyl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES 4-(4-(1-hydroxy-2-(4-fluorophenyl)ethyl)piperazin-1-yl)-N-methylbenzamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Created request ID: 4ed02fe6-df96-4c53-8b6f-0891a6a134f5","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Received Claude response with ID: msg_013dTVi7zucwmW6kYbYyyW21","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Extracted 6959 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CCCCC1)C(=O)NCCC2=CNC3=C2C=C(OC)C=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error during validation/property call for SMILES CC(NC(=O)C1CCCCC1)C(=O)NCCC2=CNC3=C2C=C(OC)C=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Validating SMILES: N-(1-(1H-indol-4-yloxy)propan-2-yl)-cyclohexanecarboxamide","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES N-(1-(1H-indol-4-yloxy)propan-2-yl)-cyclohexanecarboxamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: CC(C)NC(=O)C1=CC(=C(C=C1)OC)OCC2CCCN2CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES CC(C)NC(=O)C1=CC(=C(C=C1)OC)OCC2CCCN2CC3=CC=CC=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: N-isopropyl-4-methoxy-3-((1-phenethylpyrrolidin-3-yl)methoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES N-isopropyl-4-methoxy-3-((1-phenethylpyrrolidin-3-yl)methoxy)benzamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: CCCN1CCN(CC1)C(=O)C2=CN=C(N)S2.Cl","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES CCCN1CCN(CC1)C(=O)C2=CN=C(N)S2.Cl: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Created request ID: 76c6829f-e83f-44bd-bb28-42b56f6865ee","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Received Claude response with ID: msg_012i67F1HcGgCT6CWTYxwuJr","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Extracted 7231 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Validating SMILES: 2-[(4-fluorophenyl)(1-methylpiperidin-4-yl)methoxy]-N-methyl-N-(2-phenylethyl)ethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Successfully validated SMILES: 2-[(4-fluorophenyl)(1-methylpiperidin-4-yl)methoxy]-N-methyl-N-(2-phenylethyl)ethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-20 13:28:13"}
{"level":"info","message":"Validating SMILES: FC1=CC=C(C(OCCN(C)CCC2=CC=CC=C2)C2CCN(C)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-20 13:28:13"}
{"level":"error","message":"Error comparing molecules: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: the following arguments are required: --operation\r\n","service":"breaking-good-api","timestamp":"2025-04-20 17:05:14"}
{"level":"info","message":"Searching PubMed for: adhd AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:05:40"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:05:41"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:05:41"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:45"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:46"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:47"}
{"level":"info","message":"Searching PubMed for: Adderall AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:14"}
{"level":"info","message":"Found 10 IDs (total 44853)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:15"}
{"level":"error","message":"Literature search error: pubmedData?.ArticleIdList?.ArticleId?.find is not a function","service":"breaking-good-api","stack":"TypeError: pubmedData?.ArticleIdList?.ArticleId?.find is not a function\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:87:59\n    at Array.map (<anonymous>)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:62:40\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","timestamp":"2025-04-20 17:06:16"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:19"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:19"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:20"}
{"level":"info","message":"Searching PubMed for: Aderall AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:26"}
{"level":"info","message":"Found 0 IDs (total 0)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:26"}
{"level":"info","message":"Searching PubMed for: Neuro AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:35"}
{"level":"info","message":"Found 10 IDs (total 56201)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:35"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:36"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:43"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:44"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:44"}
{"level":"info","message":"Fetching details for ID: 29428394","service":"breaking-good-api","timestamp":"2025-04-20 17:06:46"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Created request ID: c9b61eb2-3679-4fc0-b7aa-56ce285360c7","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Received Claude response with ID: msg_01XLXUNvmwUNkeKR9xMm1B5R","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Extracted 6700 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: CC(C)(OCC(=O)N(C)CS(=O)(=O)c1ccc(cc1)C(=O)NC2C(=O)N(CC(c3ccccc3)C2)C","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(OCC(=O)N(C)CS(=O)(=O)c1ccc(cc1)C(=O)NC2C(=O)N(CC(c3ccccc3)C2)C","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: 2-[(Diphenylmethyl)sulfinyl]-N-[2-(1-oxo-4-phenyl-2-pyrrolidinyl)acetamide]methylacetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Successfully validated SMILES: 2-[(Diphenylmethyl)sulfinyl]-N-[2-(1-oxo-4-phenyl-2-pyrrolidinyl)acetamide]methylacetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: C1CC(CNC(=O)C2CCN(CC2)c3nc4c(cnn4)c(n3)C(F)(F)F)C(=O)N1CCc5ccccc5OC","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Created request ID: a82d4b9c-4c4f-4b0d-8a32-4969f7af9fac","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Received Claude response with ID: msg_01RJH8r4DhAKVYi5Tbd3iYr3","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Extracted 8554 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(cc1)Oc1ccc(cc1)C(=O)NC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(cc1)Oc1ccc(cc1)C(=O)NC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-20 17:28:08"}
{"level":"info","message":"Validating SMILES: 2-(4-(4-(2-aminopropyl)phenoxy)phenyl)-N-tert-butyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:28:08"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Created request ID: 7cd5360a-ac3e-4314-b341-9ffca932ff97","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Received Claude response with ID: msg_01TxuvMqtuhgTNRGyWMCNLEU","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Extracted 7240 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Validating SMILES: 2-[(R)-1-amino-2-methylpropyl]-N-methyl-benzhydrylsulfinamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Successfully validated SMILES: 2-[(R)-1-amino-2-methylpropyl]-N-methyl-benzhydrylsulfinamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Validating SMILES: CC(C)[C@H](N)C1=CC=CC=C1C(C2=CC=CC=C2)S(=O)NCH3","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Successfully validated SMILES: CC(C)[C@H](N)C1=CC=CC=C1C(C2=CC=CC=C2)S(=O)NCH3","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Validating SMILES: S)-N-(4-fluorophenethyl)-3-(1H-imidazol-5-yl)-2-methyl-propanamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Created request ID: 8f7c476b-07f4-46a0-940d-2eeccce0db79","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Saving results to file for request 8f7c476b-07f4-46a0-940d-2eeccce0db79","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:23"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"info","message":"Created request ID: 94660d83-dd94-4b2c-80e2-673cc7797043","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Saving results to file for request 94660d83-dd94-4b2c-80e2-673cc7797043","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"info","message":"Created request ID: 41eb4027-95a7-417d-94bb-8aae4f0d3401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Saving results to file for request 41eb4027-95a7-417d-94bb-8aae4f0d3401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Created request ID: f58250ad-3ac6-4d73-8a52-1a45de6bfb9a","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Saving results to file for request f58250ad-3ac6-4d73-8a52-1a45de6bfb9a","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:08"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:05"}
{"level":"info","message":"Created request ID: f63128db-e949-4f7a-aa05-9c8daf9855fd","service":"breaking-good-api","timestamp":"2025-04-22 23:02:05"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 23:02:05"}
{"level":"info","message":"Received Claude response with ID: msg_01HxFtZq516NgpqXyffcFnZq","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Extracted 7393 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)NCC(C)c1ccc(S(=O)C(C)(C)C)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Successfully validated SMILES: CC(NC)C(=O)NCC(C)c1ccc(S(=O)C(C)(C)C)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Validating SMILES: N-(2-(4-(tert-butylsulfinyl)phenyl)propyl)-2-(methylamino)propanamide","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Successfully validated SMILES: N-(2-(4-(tert-butylsulfinyl)phenyl)propyl)-2-(methylamino)propanamide","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Validating SMILES: COc1cc(CCN(C)C)cc(OC)c1OCC1CN(CCF)CCO1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CCN(C)C)cc(OC)c1OCC1CN(CCF)CCO1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Validated 4 molecules out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Saving results to file for request f63128db-e949-4f7a-aa05-9c8daf9855fd","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 11:16:12"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 11:16:12"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 11:50:43"}
{"level":"info","message":"Created request ID: 94fb17c9-2e9f-49c3-98dd-045410ce7099","service":"breaking-good-api","timestamp":"2025-04-23 11:50:43"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 11:50:43"}
{"level":"info","message":"Received Claude response with ID: msg_014tokmXeCPpKd4PF4jkEQLE","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Extracted 7791 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C)NC(=O)OC1CCN(C(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(C)NC(=O)OC1CCN(C(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C1=C(C)NC(C)=C1C(=O)OC2CC3CCC(C2)N3C","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully validated SMILES: CCOC(=O)C1=C(C)NC(C)=C1C(=O)OC2CC3CCC(C2)N3C","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validating SMILES: CN1C(=O)N(CC2=CC=CC=C2)C(=O)C1CCN3CCN(C(=O)C4=CC(F)=C(F)C=C4)CC3","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully validated SMILES: CN1C(=O)N(CC2=CC=CC=C2)C(=O)C1CCN3CCN(C(=O)C4=CC(F)=C(F)C=C4)CC3","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validated 3 molecules out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Saving results to file for request 94fb17c9-2e9f-49c3-98dd-045410ce7099","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:03"}
{"level":"info","message":"Created request ID: f1a98ee1-773f-474b-a8eb-6b38d7690299","service":"breaking-good-api","timestamp":"2025-04-23 12:38:03"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 12:38:03"}
{"level":"info","message":"Received Claude response with ID: msg_01AoRaXFG851THW2otPd9p8h","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Extracted 8686 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(pyrrolidin-1-yl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(pyrrolidin-1-yl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Validating SMILES: CC(=O)N(C)CC(C)(C)C(=O)NC1CCN(CC1)Cc1ccc(cc1)S(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Successfully validated SMILES: CC(=O)N(C)CC(C)(C)C(=O)NC1CCN(CC1)Cc1ccc(cc1)S(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Validating SMILES: OC(=O)C1(NCCCOP(=O)(O)O)CCN(CC1)c1cccc(Cl)c1Cl","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Successfully validated SMILES: OC(=O)C1(NCCCOP(=O)(O)O)CCN(CC1)c1cccc(Cl)c1Cl","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Validating SMILES: CN1CC(OC(=O)c2ccc(F)cc2)CC1CCc1ccc(O)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Successfully validated SMILES: CN1CC(OC(=O)c2ccc(F)cc2)CC1CCc1ccc(O)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Validated 4 molecules out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Saving results to file for request f1a98ee1-773f-474b-a8eb-6b38d7690299","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:48"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 16:45:30"}
{"level":"info","message":"Created request ID: 72dc3f95-d940-4400-a9f3-5722fe835ba9","service":"breaking-good-api","timestamp":"2025-04-23 16:45:30"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 16:45:30"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 17:09:53"}
{"level":"info","message":"Created request ID: f1de2b6a-45bf-42bd-a86f-45e2625339c1","service":"breaking-good-api","timestamp":"2025-04-23 17:09:53"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 17:09:53"}
{"level":"info","message":"Received Claude response with ID: msg_015E2kD7wKQwM5HbDiYozprt","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Extracted 8790 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Validating SMILES: OC1=CC(CCNCCc2cc(F)c(O)c(F)c2)=C(O)C=C1","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Successfully validated SMILES: OC1=CC(CCNCCc2cc(F)c(O)c(F)c2)=C(O)C=C1","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Validating SMILES: NC[C@H](c1ccccc1)c2ccc3OCCNc3c2","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Successfully validated SMILES: NC[C@H](c1ccccc1)c2ccc3OCCNc3c2","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Validating SMILES: Cc1cc2c(c(C)c1)N=C(CN3CCC(c4ccc(Cl)cc4)CC3)N(Cc1ccccc1SC)C2=O","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Successfully validated SMILES: Cc1cc2c(c(C)c1)N=C(CN3CCC(c4ccc(Cl)cc4)CC3)N(Cc1ccccc1SC)C2=O","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Validated 3 molecules out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Saving results to file for request f1de2b6a-45bf-42bd-a86f-45e2625339c1","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 17:12:43"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 17:12:43"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:17"}
{"level":"info","message":"Created request ID: 8c54b1f2-3cee-4c8f-802e-640a1b94edb7","service":"breaking-good-api","timestamp":"2025-04-23 17:33:17"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 17:33:17"}
{"level":"info","message":"Received Claude response with ID: msg_01GgLXRPfegMsyp4Q7rS1sm5","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Extracted 6611 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: R)-3-(3,4-difluorophenyl)-N-ethyl-N-(pyridin-3-yl)methyl-2-methylpropan-1-amine","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: R)-3-(3,4-difluorophenyl)-N-ethyl-N-(pyridin-3-yl)methyl-2-methylpropan-1-amine","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: CC(C(CN(CC)Cc1cccnc1)c2ccc(F)c(F)c2)C","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: CC(C(CN(CC)Cc1cccnc1)c2ccc(F)c(F)c2)C","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: S)-4-(2-amino-4-chlorophenoxy)-N-(2-(pyrrolidin-1-yl)ethyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: S)-4-(2-amino-4-chlorophenoxy)-N-(2-(pyrrolidin-1-yl)ethyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: Nc1cc(Cl)ccc1OC2CCN(C(=O)NCCN3CCCC3)CC2","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: Nc1cc(Cl)ccc1OC2CCN(C(=O)NCCN3CCCC3)CC2","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)c1ccc(C(F)(F)F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: CC(NC)C(=O)c1ccc(C(F)(F)F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Saving results to file for request 8c54b1f2-3cee-4c8f-802e-640a1b94edb7","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Enhancing molecules with ADMET predictions and Molblocks...","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"warn","message":"Molblock generation failed for R)-3-(3,4-difluorophenyl)-N-ethyl-N-(pyridin-3-yl)methyl-2-methylpropan-1-amine: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"warn","message":"Molblock generation failed for S)-4-(2-amino-4-chlorophenoxy)-N-(2-(pyrrolidin-1-yl)ethyl)piperidine-1-carboxamide: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully obtained molblock for CC(NC)C(=O)c1ccc(C(F)(F)F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully obtained molblock for CC(C(CN(CC)Cc1cccnc1)c2ccc(F)c(F)c2)C","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully obtained molblock for Nc1cc(Cl)ccc1OC2CCN(C(=O)NCCN3CCCC3)CC2","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:08"}
{"level":"info","message":"Created request ID: 99099315-59e7-4104-a90a-727535a7ff77","service":"breaking-good-api","timestamp":"2025-04-23 17:42:08"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 17:42:08"}
{"level":"info","message":"Received Claude response with ID: msg_01FqeXhY1kaoMhHW28gy7f5u","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Extracted 6685 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Validating SMILES: CCC(=O)Nc1ccc(C(=O)NC2CCN(CCCc3ccccc3F)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Successfully validated SMILES: CCC(=O)Nc1ccc(C(=O)NC2CCN(CCCc3ccccc3F)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Validating SMILES: N-(4-(2-(3-(3-fluorophenethyl)piperazin-1-yl)acetamido)phenyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Successfully validated SMILES: N-(4-(2-(3-(3-fluorophenethyl)piperazin-1-yl)acetamido)phenyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validating SMILES: CNC(=O)c1ccc(N2CCN(C3CCCc4ccc(F)cc43)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)c1ccc(N2CCN(C3CCCc4ccc(F)cc43)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validating SMILES: 4-(4-(7-fluoro-1,2,3,4-tetrahydronaphthalen-1-yl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully validated SMILES: 4-(4-(7-fluoro-1,2,3,4-tetrahydronaphthalen-1-yl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Saving results to file for request 99099315-59e7-4104-a90a-727535a7ff77","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Enhancing molecules with ADMET predictions and Molblocks...","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"warn","message":"Molblock generation failed for N-(4-(2-(3-(3-fluorophenethyl)piperazin-1-yl)acetamido)phenyl)propionamide: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"warn","message":"Molblock generation failed for 4-(4-(7-fluoro-1,2,3,4-tetrahydronaphthalen-1-yl)piperazin-1-yl)-N-methylbenzamide: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Successfully obtained molblock for CCC(=O)Nc1ccc(C(=O)NC2CCN(CCCc3ccccc3F)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Successfully obtained molblock for CNC(=O)c1ccc(N2CCN(C3CCCc4ccc(F)cc43)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Successfully obtained molblock for COc1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:04"}
{"level":"info","message":"Created request ID: 08772a44-fb37-4a79-879f-8823433b9556","service":"breaking-good-api","timestamp":"2025-04-23 18:06:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 18:06:04"}
{"level":"info","message":"Received Claude response with ID: msg_01MEQixZr3RPP3EDjnfiRE87","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Extracted 5874 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C(C2=CC=C(SC3CC3)C=C2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C(C2=CC=C(SC3CC3)C=C2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: R)-2-(diphenylmethyl)-N-methyl-1-phenylethylamine-2-sulfonamide","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: R)-2-(diphenylmethyl)-N-methyl-1-phenylethylamine-2-sulfonamide","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: O=C(NC1CCN(CC1)C2=CC=CC=C2)C3=CC=C(C=C3)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: O=C(NC1CCN(CC1)C2=CC=CC=C2)C3=CC=C(C=C3)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: CN1C2CCC1CC(C2)OC(C3=CC=CC=C3)C4=CC=C(Cl)C=C4","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: CN1C2CCC1CC(C2)OC(C3=CC=CC=C3)C4=CC=C(Cl)C=C4","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validated 4 molecules out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Saving results to file for request 08772a44-fb37-4a79-879f-8823433b9556","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:36"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 18:14:11"}
{"level":"info","message":"Created request ID: f52719b4-f8a7-4df0-be14-453bb657c061","service":"breaking-good-api","timestamp":"2025-04-23 18:14:11"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 18:14:11"}
{"level":"info","message":"Received Claude response with ID: msg_01NN9VXE6wyRJeCgZt1x2YTt","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Extracted 8733 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Validating SMILES: FC1=CC(=C(F)C=C1)C2=CCN(C)C(C2)C(=O)N","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Attempting 3D structure generation for: FC1=CC(=C(F)C=C1)C2=CCN(C)C(C2)C(=O)N","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): FC1=CC(=C(F)C=C1)C2=CCN(C)C(C2)C(=O)N","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Validating SMILES: R)-2-(benzhydryloxy)-N-methyl-3-(1H-imidazol-4-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Attempting 3D structure generation for: R)-2-(benzhydryloxy)-N-methyl-3-(1H-imidazol-4-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: R)-2-(benzhydryloxy)-N-methyl-3-(1H-imidazol-4-yl)propanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Validating SMILES: O=C(NC)C(OC(C1=CC=CC=C1)C2=CC=CC=C2)[C@H]3CN=CN3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Attempting 3D structure generation for: O=C(NC)C(OC(C1=CC=CC=C1)C2=CC=CC=C2)[C@H]3CN=CN3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): O=C(NC)C(OC(C1=CC=CC=C1)C2=CC=CC=C2)[C@H]3CN=CN3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Validating SMILES: CN1C(=O)N(C)C2=C1C(=O)N(CCO)C(C(=O)N)=C2C3=CC=C(Cl)C=C3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Attempting 3D structure generation for: CN1C(=O)N(C)C2=C1C(=O)N(CCO)C(C(=O)N)=C2C3=CC=C(Cl)C=C3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CN1C(=O)N(C)C2=C1C(=O)N(CCO)C(C(=O)N)=C2C3=CC=C(Cl)C=C3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Saving results to file for request f52719b4-f8a7-4df0-be14-453bb657c061","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 18:15:02"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 18:15:26"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 18:15:26"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 18:21:23"}
{"level":"info","message":"Created request ID: 11307025-bd20-41a8-b17c-7db97527e197","service":"breaking-good-api","timestamp":"2025-04-23 18:21:23"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 18:21:23"}
{"level":"info","message":"Received Claude response with ID: msg_01SDK1Cbt7kGSktdzi8oBcG5","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Extracted 8076 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Validating SMILES: CCC(=O)NCCC1=CC(OC)=C(OC)C=C1NC(=O)C1CC1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Attempting 3D structure generation for: CCC(=O)NCCC1=CC(OC)=C(OC)C=C1NC(=O)C1CC1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCC(=O)NCCC1=CC(OC)=C(OC)C=C1NC(=O)C1CC1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Validating SMILES: N-(3-(3,4-dimethoxyphenyl)propyl)-N-(cyclopropanecarbonyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Attempting 3D structure generation for: N-(3-(3,4-dimethoxyphenyl)propyl)-N-(cyclopropanecarbonyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(3-(3,4-dimethoxyphenyl)propyl)-N-(cyclopropanecarbonyl)propionamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Validating SMILES: FC(F)(F)c1ccc(C(=O)N2CC3(CCN(C)CC3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Attempting 3D structure generation for: FC(F)(F)c1ccc(C(=O)N2CC3(CCN(C)CC3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): FC(F)(F)c1ccc(C(=O)N2CC3(CCN(C)CC3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Validating SMILES: CN1CCC(C(=O)Nc2ccc(OC)c(OC)c2)CC1OC(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Attempting 3D structure generation for: CN1CCC(C(=O)Nc2ccc(OC)c(OC)c2)CC1OC(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CN1CCC(C(=O)Nc2ccc(OC)c(OC)c2)CC1OC(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Saving results to file for request 11307025-bd20-41a8-b17c-7db97527e197","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 18:24:16"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 18:24:16"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 21:30:34"}
{"level":"info","message":"Created request ID: a366ac6b-6e00-4e15-b958-b63e24b9f363","service":"breaking-good-api","timestamp":"2025-04-23 21:30:34"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 21:30:34"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 21:30:35"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic-version: header is required\"}}","service":"breaking-good-api","timestamp":"2025-04-23 21:30:35"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 21:30:35"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 400\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:76:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:274:24","timestamp":"2025-04-23 21:30:35"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 21:39:52"}
{"level":"info","message":"Created request ID: 4cffdee4-5007-4e5f-87c0-2475406c9071","service":"breaking-good-api","timestamp":"2025-04-23 21:39:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 21:39:52"}
{"level":"info","message":"Received Claude response with ID: msg_01Fcuz3epwrRoB1e56yBNsKy","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Extracted 7017 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Validating SMILES: O=C(OC)[C@](Cc1ccc(F)cc1)(c2cccnc2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Attempting 3D structure generation for: O=C(OC)[C@](Cc1ccc(F)cc1)(c2cccnc2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): O=C(OC)[C@](Cc1ccc(F)cc1)(c2cccnc2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Validating SMILES: 2S)-N,N-diethyl-2-(6,7-dihydro-4H-benzo[e][1,3]oxazin-3(5H)-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Attempting 3D structure generation for: 2S)-N,N-diethyl-2-(6,7-dihydro-4H-benzo[e][1,3]oxazin-3(5H)-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2S)-N,N-diethyl-2-(6,7-dihydro-4H-benzo[e][1,3]oxazin-3(5H)-yl)propanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Validating SMILES: CCN(CC)C(=O)[C@H](C)N1CCc2ccccc2OC1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Attempting 3D structure generation for: CCN(CC)C(=O)[C@H](C)N1CCc2ccccc2OC1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCN(CC)C(=O)[C@H](C)N1CCc2ccccc2OC1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Validating SMILES: CC(C)[C@H](N)Cc1ccnc(N2CCN(c3cccc(Cl)c3Cl)C(=O)C2)n1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)[C@H](N)Cc1ccnc(N2CCN(c3cccc(Cl)c3Cl)C(=O)C2)n1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)[C@H](N)Cc1ccnc(N2CCN(c3cccc(Cl)c3Cl)C(=O)C2)n1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Saving results to file for request 4cffdee4-5007-4e5f-87c0-2475406c9071","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 22:24:13"}
{"level":"info","message":"Created request ID: 77d4b80b-f275-4570-9213-9de9f5a147d5","service":"breaking-good-api","timestamp":"2025-04-23 22:24:13"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 22:24:13"}
{"level":"info","message":"Received Claude response with ID: msg_01EeFBE8jxqC1oRDfB6gnLZB","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Extracted 8713 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Validating SMILES: CC(N)CC(=O)N1CCN(C(=O)C2(c3ccccc3)CC2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)CC(=O)N1CCN(C(=O)C2(c3ccccc3)CC2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)CC(=O)N1CCN(C(=O)C2(c3ccccc3)CC2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Validating SMILES: 2-amino-3-methyl-N-(4-(2-(cyclopropyl(phenyl)methanoyl)piperazin-1-yl)butanamide","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Attempting 3D structure generation for: 2-amino-3-methyl-N-(4-(2-(cyclopropyl(phenyl)methanoyl)piperazin-1-yl)butanamide","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-amino-3-methyl-N-(4-(2-(cyclopropyl(phenyl)methanoyl)piperazin-1-yl)butanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Validating SMILES: COc1cc(CCN2CCN(C(=O)C3CCC(F)(F)CC3)CC2)c(OC)c2c1OCO2","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(CCN2CCN(C(=O)C3CCC(F)(F)CC3)CC2)c(OC)c2c1OCO2","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(CCN2CCN(C(=O)C3CCC(F)(F)CC3)CC2)c(OC)c2c1OCO2","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C1=C(C)NC(C)=C(C1c1ccccc1N(C)S(=O)(=O)c1ccc(N)cc1)C(=O)OCC","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Attempting 3D structure generation for: CCOC(=O)C1=C(C)NC(C)=C(C1c1ccccc1N(C)S(=O)(=O)c1ccc(N)cc1)C(=O)OCC","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCOC(=O)C1=C(C)NC(C)=C(C1c1ccccc1N(C)S(=O)(=O)c1ccc(N)cc1)C(=O)OCC","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Validating SMILES: 2,6-dimethyl-4-(2-(N-methyl-N-(4-aminophenylsulfonyl)amino)phenyl)-1,4-dihydropyridine-3,5-dicarboxylate","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Attempting 3D structure generation for: 2,6-dimethyl-4-(2-(N-methyl-N-(4-aminophenylsulfonyl)amino)phenyl)-1,4-dihydropyridine-3,5-dicarboxylate","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2,6-dimethyl-4-(2-(N-methyl-N-(4-aminophenylsulfonyl)amino)phenyl)-1,4-dihydropyridine-3,5-dicarboxylate - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Saving results to file for request 77d4b80b-f275-4570-9213-9de9f5a147d5","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 23:34:54"}
{"level":"info","message":"Created request ID: 1b83b1e9-bdc7-42c5-8acf-e66076a02b85","service":"breaking-good-api","timestamp":"2025-04-23 23:34:54"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 23:34:54"}
{"level":"info","message":"Received Claude response with ID: msg_01C7Z1soqLK7yDurZ1TtNVhV","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Extracted 7434 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: C[S](=O)C(=O)NC(c1ccccc1)c1ccc(cc1)C(=O)N1CC(=O)N(CC1)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES C[S](=O)C(=O)NC(c1ccccc1)c1ccc(cc1)C(=O)N1CC(=O)N(CC1)c1ccccc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylacetyl)amino]-N-methyl-N-(2-oxo-1-phenylpyrrolidin-3-yl)acetamide","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES 2-[(diphenylacetyl)amino]-N-methyl-N-(2-oxo-1-phenylpyrrolidin-3-yl)acetamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: CN1CCN(CC1)c1ccc(cc1)C(=O)CCCn1c(=O)[nH]c2cc(ccc21)N(C)C","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES CN1CCN(CC1)c1ccc(cc1)C(=O)CCCn1c(=O)[nH]c2cc(ccc21)N(C)C: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: 7-(4-(4-methylpiperazin-1-yl)phenethyl)-N,N-dimethyl-3,4-dihydro-1H-benzo[e][1,4]diazepin-2-one","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES 7-(4-(4-methylpiperazin-1-yl)phenethyl)-N,N-dimethyl-3,4-dihydro-1H-benzo[e][1,4]diazepin-2-one: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: CNCC(O)c1ccc(cc1)OCCCOc1ccc(C#N)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES CNCC(O)c1ccc(cc1)OCCCOc1ccc(C#N)cc1OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validated 0 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 23:37:09"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-23 23:39:43"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-23 23:40:47"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-23 23:41:30"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"Created request ID: 66f29ee0-c10a-4754-ad1e-c2353c965e1b","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-sonnet-20240229","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"error","message":"Claude API error: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"not_found_error\",\"message\":\"model: claude-3-sonnet-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 404\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:122:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:329:24","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:20:55"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:22:51"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"Created request ID: 87d6124b-2547-4123-b5f3-ecd942579e23","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-sonnet-20240229","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"error","message":"Claude API error: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:25:21"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"not_found_error\",\"message\":\"model: claude-3-sonnet-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 00:25:21"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:25:21"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 404\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:122:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:329:24","timestamp":"2025-04-24 00:25:21"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"Created request ID: 923209eb-6806-4729-aab7-ec09cd3a4fe8","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-sonnet-20240229","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"error","message":"Claude API error: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"not_found_error\",\"message\":\"model: claude-3-sonnet-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 404\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:122:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:329:24","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:26:44"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:29:11"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:30:29"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"Created request ID: 324c2ab5-6135-45b0-b28a-e71a235c237b","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-opus-20240229","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"max_tokens: 20000 > 4096, which is the maximum allowed number of output tokens for claude-3-opus-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 400\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:122:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:373:24","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 01:17:53"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:29:42"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:29:55"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:30:31"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:31:23"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"Created request ID: 90033d4f-69bd-4655-b0ac-0be8ab1ceb65","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-opus-20240229","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 01:33:17"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"max_tokens: 20000 > 4096, which is the maximum allowed number of output tokens for claude-3-opus-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 01:33:17"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 01:33:17"}
{"level":"error","message":"Error details: {}","service":"breaking-good-api","timestamp":"2025-04-24 01:33:17"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:45:53"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"Created request ID: ca87e4ca-5ad7-41b6-bb6f-87e643c16366","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-opus-20240229","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 01:46:23"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"max_tokens: 20000 > 4096, which is the maximum allowed number of output tokens for claude-3-opus-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 01:46:23"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 01:46:23"}
{"level":"error","message":"Error details: {}","service":"breaking-good-api","timestamp":"2025-04-24 01:46:23"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:49:18"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:49:31"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:49:43"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"Created request ID: 9fd37984-74f1-4794-83c4-48e3dc98ab57","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"Claude API response received: msg_01KrQCruNwsRM4UTAVktaTTA","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Received Claude response with ID: msg_01KrQCruNwsRM4UTAVktaTTA","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Using string content directly, length: 8014","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Extracted 8014 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)NCCOC(=O)C1CC1N(C)C2=CC=CC=C2)NC(=O)OC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)(C)C(=O)C(CS(=O)NCCOC(=O)C1CC1N(C)C2=CC=CC=C2)NC(=O)OC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)(C)C(=O)C(CS(=O)NCCOC(=O)C1CC1N(C)C2=CC=CC=C2)NC(=O)OC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methylphenyl)ethyl]acetamide-methylphenidate","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Attempting 3D structure generation for: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methylphenyl)ethyl]acetamide-methylphenidate","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methylphenyl)ethyl]acetamide-methylphenidate - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methylphenyl)ethyl]acetamide-methylphenidate","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Validating SMILES: CC(C)NCC(O)C1=CC(=C(C=C1)O)NC(=O)C2CC3CC2CN3C(=O)C4=CC=C(C=C4)F","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)NCC(O)C1=CC(=C(C=C1)O)NC(=O)C2CC3CC2CN3C(=O)C4=CC=C(C=C4)F","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)NCC(O)C1=CC(=C(C=C1)O)NC(=O)C2CC3CC2CN3C(=O)C4=CC=C(C=C4)F","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Validating SMILES: R)-2-amino-1-(3,4-dihydroxyphenyl)-N-(7-fluorobenzyl)-8-azabicyclo[3.2.1]octane-2-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Attempting 3D structure generation for: R)-2-amino-1-(3,4-dihydroxyphenyl)-N-(7-fluorobenzyl)-8-azabicyclo[3.2.1]octane-2-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: R)-2-amino-1-(3,4-dihydroxyphenyl)-N-(7-fluorobenzyl)-8-azabicyclo[3.2.1]octane-2-carboxamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Added molecule with properties but without 3D structure: R)-2-amino-1-(3,4-dihydroxyphenyl)-N-(7-fluorobenzyl)-8-azabicyclo[3.2.1]octane-2-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(C=C1)C(C2CCN(CC2)CCN3C=NC4=CC=CC=C43)O","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Attempting 3D structure generation for: COC1=CC=C(C=C1)C(C2CCN(CC2)CCN3C=NC4=CC=CC=C43)O","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COC1=CC=C(C=C1)C(C2CCN(CC2)CCN3C=NC4=CC=CC=C43)O","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Saving results to file for request 9fd37984-74f1-4794-83c4-48e3dc98ab57","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 01:53:46"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:53:48"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:30:41"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"Created request ID: 60092018-e31b-4fb5-ad80-fbc7654a932b","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"Claude API response received: msg_01Q5TSqnLWuDGoknJeV9JVvv","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Received Claude response with ID: msg_01Q5TSqnLWuDGoknJeV9JVvv","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Using string content directly, length: 7657","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Extracted 7657 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1cc(F)c(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1cc(F)c(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:51"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1cc(F)c(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:51"}
{"level":"info","message":"Validating SMILES: CNCC1CCC(c2ccc(F)cc2)C(COC(=O)C)C1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:51"}
{"level":"info","message":"Attempting 3D structure generation for: CNCC1CCC(c2ccc(F)cc2)C(COC(=O)C)C1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:52"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CNCC1CCC(c2ccc(F)cc2)C(COC(=O)C)C1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:52"}
{"level":"info","message":"Validating SMILES: 2-(((3-(4-fluorophenyl)-2-(acetoxymethyl)cyclopentyl)methyl)amino)-N-methylacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:52"}
{"level":"info","message":"Attempting 3D structure generation for: 2-(((3-(4-fluorophenyl)-2-(acetoxymethyl)cyclopentyl)methyl)amino)-N-methylacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-(((3-(4-fluorophenyl)-2-(acetoxymethyl)cyclopentyl)methyl)amino)-N-methylacetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-(((3-(4-fluorophenyl)-2-(acetoxymethyl)cyclopentyl)methyl)amino)-N-methylacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"info","message":"Validating SMILES: COc1ccc(CC2CCNC2CNC(=O)CF)cc1OC","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"info","message":"Attempting 3D structure generation for: COc1ccc(CC2CCNC2CNC(=O)CF)cc1OC","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1ccc(CC2CCNC2CNC(=O)CF)cc1OC","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Validating SMILES: N-((3-(3,4-dimethoxyphenethyl)pyrrolidin-2-yl)methyl)-2-fluoroacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Attempting 3D structure generation for: N-((3-(3,4-dimethoxyphenethyl)pyrrolidin-2-yl)methyl)-2-fluoroacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-((3-(3,4-dimethoxyphenethyl)pyrrolidin-2-yl)methyl)-2-fluoroacetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-((3-(3,4-dimethoxyphenethyl)pyrrolidin-2-yl)methyl)-2-fluoroacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Saving results to file for request 60092018-e31b-4fb5-ad80-fbc7654a932b","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:31:55"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:31:59"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:33:15"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"Created request ID: 2167b920-cb2b-4454-9774-0bbaca6d70f3","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"Claude API response received: msg_0128U3j5PU1fYfNENBPCHDTe","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Received Claude response with ID: msg_0128U3j5PU1fYfNENBPCHDTe","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Using string content directly, length: 6502","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Extracted 6502 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Validating SMILES: CC(=O)C(CS(=O)C(c1ccccc1)N1CCN(c2ccc(F)cc2)CC1)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Attempting 3D structure generation for: CC(=O)C(CS(=O)C(c1ccccc1)N1CCN(c2ccc(F)cc2)CC1)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(=O)C(CS(=O)C(c1ccccc1)N1CCN(c2ccc(F)cc2)CC1)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:35"}
{"level":"info","message":"Validating SMILES: R)-2-[(Diphenylmethyl)sulfinyl]-N-(4-fluorophenyl)piperazine-acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:36:35"}
{"level":"info","message":"Attempting 3D structure generation for: R)-2-[(Diphenylmethyl)sulfinyl]-N-(4-fluorophenyl)piperazine-acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:36:35"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: R)-2-[(Diphenylmethyl)sulfinyl]-N-(4-fluorophenyl)piperazine-acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:36:36"}
{"level":"info","message":"Added molecule with properties but without 3D structure: R)-2-[(Diphenylmethyl)sulfinyl]-N-(4-fluorophenyl)piperazine-acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:36:36"}
{"level":"info","message":"Validating SMILES: CNCC(=O)c1ccc(cc1)Oc1ccc(cc1)OC(C)C(=O)OC","service":"breaking-good-api","timestamp":"2025-04-24 08:36:36"}
{"level":"info","message":"Attempting 3D structure generation for: CNCC(=O)c1ccc(cc1)Oc1ccc(cc1)OC(C)C(=O)OC","service":"breaking-good-api","timestamp":"2025-04-24 08:36:36"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CNCC(=O)c1ccc(cc1)Oc1ccc(cc1)OC(C)C(=O)OC","service":"breaking-good-api","timestamp":"2025-04-24 08:36:37"}
{"level":"info","message":"Validating SMILES: CCN(CC)CC(O)COc1ccc(CC(=O)c2ccc(OC)c(OC)c2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:37"}
{"level":"info","message":"Attempting 3D structure generation for: CCN(CC)CC(O)COc1ccc(CC(=O)c2ccc(OC)c(OC)c2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:37"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCN(CC)CC(O)COc1ccc(CC(=O)c2ccc(OC)c(OC)c2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Validated 4 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Saving results to file for request 2167b920-cb2b-4454-9774-0bbaca6d70f3","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:36:42"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:43:59"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"Created request ID: 3c432b2a-3bfa-4e15-a1c1-834d93694a25","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"Claude API response received: msg_01WmHNC3WvRVEC7XmrEwEnj8","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Received Claude response with ID: msg_01WmHNC3WvRVEC7XmrEwEnj8","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Using string content directly, length: 6595","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Extracted 6595 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)N2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1ccc(OC(=O)N2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1ccc(OC(=O)N2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:13"}
{"level":"info","message":"Validating SMILES: 1-phenyl-2-(N-methylamino)propane-4-(N-piperidinylcarbonyloxy","service":"breaking-good-api","timestamp":"2025-04-24 08:45:13"}
{"level":"info","message":"Attempting 3D structure generation for: 1-phenyl-2-(N-methylamino)propane-4-(N-piperidinylcarbonyloxy","service":"breaking-good-api","timestamp":"2025-04-24 08:45:13"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 1-phenyl-2-(N-methylamino)propane-4-(N-piperidinylcarbonyloxy - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:45:14"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 1-phenyl-2-(N-methylamino)propane-4-(N-piperidinylcarbonyloxy","service":"breaking-good-api","timestamp":"2025-04-24 08:45:14"}
{"level":"info","message":"Validating SMILES: C1CN(C(=O)C(CS(=O)(=O)c2ccccc2)(C)C(=O)N)CCN1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:14"}
{"level":"info","message":"Attempting 3D structure generation for: C1CN(C(=O)C(CS(=O)(=O)c2ccccc2)(C)C(=O)N)CCN1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:14"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): C1CN(C(=O)C(CS(=O)(=O)c2ccccc2)(C)C(=O)N)CCN1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:15"}
{"level":"info","message":"Validating SMILES: 2-(piperazin-1-yl)-2-oxo-N-methyl-N-(phenylsulfonylmethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:15"}
{"level":"info","message":"Attempting 3D structure generation for: 2-(piperazin-1-yl)-2-oxo-N-methyl-N-(phenylsulfonylmethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:15"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-(piperazin-1-yl)-2-oxo-N-methyl-N-(phenylsulfonylmethyl)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:45:16"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-(piperazin-1-yl)-2-oxo-N-methyl-N-(phenylsulfonylmethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:16"}
{"level":"info","message":"Validating SMILES: CCNC(=O)C1CCN(CCCc2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:16"}
{"level":"info","message":"Attempting 3D structure generation for: CCNC(=O)C1CCN(CCCc2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:16"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCNC(=O)C1CCN(CCCc2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:17"}
{"level":"info","message":"Validating SMILES: 4-(3-(4-fluorophenyl)propyl)-N-ethylpiperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:17"}
{"level":"info","message":"Attempting 3D structure generation for: 4-(3-(4-fluorophenyl)propyl)-N-ethylpiperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:17"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 4-(3-(4-fluorophenyl)propyl)-N-ethylpiperidine-1-carboxamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 4-(3-(4-fluorophenyl)propyl)-N-ethylpiperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Validated 6 molecules (Props & 3D) out of 6 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Successfully extracted and validated 6 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Saving results to file for request 3c432b2a-3bfa-4e15-a1c1-834d93694a25","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:45:21"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"Created request ID: 0c137892-f2c0-47d6-88c3-1f97c0e5424c","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"Claude API response received: msg_01Qno5JP5y4i2ja2yQgAKVkp","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Received Claude response with ID: msg_01Qno5JP5y4i2ja2yQgAKVkp","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Using string content directly, length: 7533","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Extracted 7533 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Validating SMILES: C(=O)(NC(=O)CS)C1=C(C=CC(=C1)OC)S(=O)CC(=O)N1CCN(CC1)CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Attempting 3D structure generation for: C(=O)(NC(=O)CS)C1=C(C=CC(=C1)OC)S(=O)CC(=O)N1CCN(CC1)CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): C(=O)(NC(=O)CS)C1=C(C=CC(=C1)OC)S(=O)CC(=O)N1CCN(CC1)CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:48:57"}
{"level":"info","message":"Validating SMILES: 2-[(4-methoxyphenyl)sulfinyl]-N-(2-oxo-2-sulfanylethyl)-N","service":"breaking-good-api","timestamp":"2025-04-24 08:48:57"}
{"level":"info","message":"Attempting 3D structure generation for: 2-[(4-methoxyphenyl)sulfinyl]-N-(2-oxo-2-sulfanylethyl)-N","service":"breaking-good-api","timestamp":"2025-04-24 08:48:57"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-[(4-methoxyphenyl)sulfinyl]-N-(2-oxo-2-sulfanylethyl)-N - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:48:58"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-[(4-methoxyphenyl)sulfinyl]-N-(2-oxo-2-sulfanylethyl)-N","service":"breaking-good-api","timestamp":"2025-04-24 08:48:58"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(O)COc1ccc(cc1)C(=O)NCCCN1CCN(CC1)C1=CC=C(C=C1)F","service":"breaking-good-api","timestamp":"2025-04-24 08:48:58"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)(C)NCC(O)COc1ccc(cc1)C(=O)NCCCN1CCN(CC1)C1=CC=C(C=C1)F","service":"breaking-good-api","timestamp":"2025-04-24 08:48:58"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)(C)NCC(O)COc1ccc(cc1)C(=O)NCCCN1CCN(CC1)C1=CC=C(C=C1)F","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Validating SMILES: N-(3-(4-(4-fluorophenyl)piperazin-1-yl)propyl)-4-(2-hydroxy-3-(tert-butylamino)propoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Attempting 3D structure generation for: N-(3-(4-(4-fluorophenyl)piperazin-1-yl)propyl)-4-(2-hydroxy-3-(tert-butylamino)propoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(3-(4-(4-fluorophenyl)piperazin-1-yl)propyl)-4-(2-hydroxy-3-(tert-butylamino)propoxy)benzamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(3-(4-(4-fluorophenyl)piperazin-1-yl)propyl)-4-(2-hydroxy-3-(tert-butylamino)propoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Validating SMILES: COc1ccc(cc1)C(C)NC(=O)C1CCN(CC1)CCCOc1ccc(cc1)NS(=O)(=O)c1ccc(cc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Attempting 3D structure generation for: COc1ccc(cc1)C(C)NC(=O)C1CCN(CC1)CCCOc1ccc(cc1)NS(=O)(=O)c1ccc(cc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-24 08:49:00"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1ccc(cc1)C(C)NC(=O)C1CCN(CC1)CCCOc1ccc(cc1)NS(=O)(=O)c1ccc(cc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Validating SMILES: N-(1-(4-methoxyphenyl)ethyl)-4-(3-(4-(N-(4-(dimethylamino)phenylsulfonamido)phenoxy)propyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Attempting 3D structure generation for: N-(1-(4-methoxyphenyl)ethyl)-4-(3-(4-(N-(4-(dimethylamino)phenylsulfonamido)phenoxy)propyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(1-(4-methoxyphenyl)ethyl)-4-(3-(4-(N-(4-(dimethylamino)phenylsulfonamido)phenoxy)propyl)piperidine-1-carboxamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(1-(4-methoxyphenyl)ethyl)-4-(3-(4-(N-(4-(dimethylamino)phenylsulfonamido)phenoxy)propyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Validated 6 molecules (Props & 3D) out of 6 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Successfully extracted and validated 6 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Saving results to file for request 0c137892-f2c0-47d6-88c3-1f97c0e5424c","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:49:02"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:49:04"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:49:06"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:49:37"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:49:42"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:53:39"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"Created request ID: 28ef6724-407d-4752-adc0-01b71f780316","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"Claude API response received: msg_01VfC1aF46WVHtCuUUSaCush","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Received Claude response with ID: msg_01VfC1aF46WVHtCuUUSaCush","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Using string content directly, length: 6757","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Extracted 6757 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Validating SMILES: CC(=O)NC(CS(=O)C(C)(C)C)C(=O)NCCCCN1CCN(C(=O)c2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Attempting 3D structure generation for: CC(=O)NC(CS(=O)C(C)(C)C)C(=O)NCCCCN1CCN(C(=O)c2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:00"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(=O)NC(CS(=O)C(C)(C)C)C(=O)NCCCCN1CCN(C(=O)c2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:01"}
{"level":"info","message":"Validating SMILES: N-(2-(methylsulfinyl)-1-(4-(4-(4-fluorobenzoyl)piperazin-1-yl)butylcarbamoyl)ethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:58:01"}
{"level":"info","message":"Attempting 3D structure generation for: N-(2-(methylsulfinyl)-1-(4-(4-(4-fluorobenzoyl)piperazin-1-yl)butylcarbamoyl)ethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:58:01"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(2-(methylsulfinyl)-1-(4-(4-(4-fluorobenzoyl)piperazin-1-yl)butylcarbamoyl)ethyl)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:58:02"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(2-(methylsulfinyl)-1-(4-(4-(4-fluorobenzoyl)piperazin-1-yl)butylcarbamoyl)ethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:58:02"}
{"level":"info","message":"Validating SMILES: COC(=O)C1C(OC(=O)C)C2CCC(C2)N1CC1=CC=C(O)C(O)=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:02"}
{"level":"info","message":"Attempting 3D structure generation for: COC(=O)C1C(OC(=O)C)C2CCC(C2)N1CC1=CC=C(O)C(O)=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:02"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COC(=O)C1C(OC(=O)C)C2CCC(C2)N1CC1=CC=C(O)C(O)=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:03"}
{"level":"info","message":"Validating SMILES: CCCN1CCC(NC(=O)OC)CC1C1=CC(OC)=C(OC)C=C1N1CCCCC1=O","service":"breaking-good-api","timestamp":"2025-04-24 08:58:03"}
{"level":"info","message":"Attempting 3D structure generation for: CCCN1CCC(NC(=O)OC)CC1C1=CC(OC)=C(OC)C=C1N1CCCCC1=O","service":"breaking-good-api","timestamp":"2025-04-24 08:58:03"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCCN1CCC(NC(=O)OC)CC1C1=CC(OC)=C(OC)C=C1N1CCCCC1=O","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Validated 4 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Saving results to file for request 28ef6724-407d-4752-adc0-01b71f780316","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:58:05"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:58:08"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:58:09"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:59:41"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:59:53"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:00:02"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:00:11"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:06:52"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"Created request ID: b7b64b9a-f8a6-4594-a95e-2b5282b9ed08","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"Claude API response received: msg_01LCwtwsAXB4Fw4zrcgSCcZN","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Received Claude response with ID: msg_01LCwtwsAXB4Fw4zrcgSCcZN","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Using string content directly, length: 7252","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Extracted 7252 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)c1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC)C(=O)c1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:56"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC)C(=O)c1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:56"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(F)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:56"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1ccc(F)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:57"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1ccc(F)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:57"}
{"level":"info","message":"Validating SMILES: CC(CS(=O)C(c1ccccc1)c1ccccc1)N","service":"breaking-good-api","timestamp":"2025-04-24 09:07:57"}
{"level":"info","message":"Attempting 3D structure generation for: CC(CS(=O)C(c1ccccc1)c1ccccc1)N","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(CS(=O)C(c1ccccc1)c1ccccc1)N","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Saving results to file for request b7b64b9a-f8a6-4594-a95e-2b5282b9ed08","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 09:07:59"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:08:03"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:08:22"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:16:19"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"Created request ID: 03b2d02c-6e0e-461c-92e8-73e2f435bad5","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"Claude API response received: msg_01GvBiE99Sxqhfwh3bd1pHwx","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Received Claude response with ID: msg_01GvBiE99Sxqhfwh3bd1pHwx","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Using string content directly, length: 7044","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Extracted 7044 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Validating SMILES: COC1=C(OC)C=C2C(=C1)C(=O)C(C(=O)N3CCCC3)=C(N)C2=O","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Attempting 3D structure generation for: COC1=C(OC)C=C2C(=C1)C(=O)C(C(=O)N3CCCC3)=C(N)C2=O","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COC1=C(OC)C=C2C(=C1)C(=O)C(C(=O)N3CCCC3)=C(N)C2=O","service":"breaking-good-api","timestamp":"2025-04-24 09:17:32"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C1=C(C)NC(=C1C2=CC(OC)=C(OC)C=C2)C(=O)OCC3CC3","service":"breaking-good-api","timestamp":"2025-04-24 09:17:32"}
{"level":"info","message":"Attempting 3D structure generation for: CCOC(=O)C1=C(C)NC(=C1C2=CC(OC)=C(OC)C=C2)C(=O)OCC3CC3","service":"breaking-good-api","timestamp":"2025-04-24 09:17:32"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCOC(=O)C1=C(C)NC(=C1C2=CC(OC)=C(OC)C=C2)C(=O)OCC3CC3","service":"breaking-good-api","timestamp":"2025-04-24 09:17:33"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CC1)C2=CC(=CC=C2)Oc3cncnc3C#N","service":"breaking-good-api","timestamp":"2025-04-24 09:17:33"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC(=O)C1CC1)C2=CC(=CC=C2)Oc3cncnc3C#N","service":"breaking-good-api","timestamp":"2025-04-24 09:17:33"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC(=O)C1CC1)C2=CC(=CC=C2)Oc3cncnc3C#N","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Saving results to file for request 03b2d02c-6e0e-461c-92e8-73e2f435bad5","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 09:17:35"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:17:39"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-24 09:17:48"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"I","105":"'","106":"m","107":" ","108":"h","109":"e","11":"r","110":"r","111":"e","112":" ","113":"t","114":"o","115":" ","116":"h","117":"e","118":"l","119":"p","12":"o","120":" ","121":"w","122":"i","123":"t","124":"h","125":" ","126":"d","127":"r","128":"u","129":"g","13":"l","130":" ","131":"d","132":"e","133":"s","134":"i","135":"g","136":"n","137":".","138":" ","139":"C","14":"e","140":"o","141":"n","142":"t","143":"e","144":"x","145":"t","146":":","147":" ","148":"D","149":"i","15":"\"","150":"s","151":"c","152":"u","153":"s","154":"s","155":"i","156":"n","157":"g","158":" ","159":"M","16":":","160":"o","161":"l","162":"e","163":"c","164":"u","165":"l","166":"e","167":" ","168":"C","169":"a","17":" ","170":"n","171":"d","172":"i","173":"d","174":"a","175":"t","176":"e","177":" ","178":"1","179":" ","18":"\"","180":"(","181":"S","182":"M","183":"I","184":"L","185":"E","186":"S","187":":","188":" ","189":"C","19":"a","190":"O","191":"C","192":"1","193":"=","194":"C","195":"(","196":"O","197":"C","198":")","199":"C","2":" ","20":"s","200":"=","201":"C","202":"2","203":"C","204":"(","205":"=","206":"C","207":"1","208":")","209":"C","21":"s","210":"(","211":"=","212":"O","213":")","214":"C","215":"(","216":"C","217":"(","218":"=","219":"O","22":"i","220":")","221":"N","222":"3","223":"C","224":"C","225":"C","226":"C","227":"3","228":")","229":"=","23":"s","230":"C","231":"(","232":"N","233":")","234":"C","235":"2","236":"=","237":"O","238":")","239":"\"","24":"t","240":"\n","241":" ","242":" ","243":" ","244":" ","245":" ","246":" ","247":"}","248":"\n","249":" ","25":"a","250":" ","251":" ","252":" ","253":"]","254":"\n","255":" ","256":" ","257":"}","258":",","259":"\n","26":"n","260":" ","261":" ","262":"{","263":"\n","264":" ","265":" ","266":" ","267":" ","268":"\"","269":"r","27":"t","270":"o","271":"l","272":"e","273":"\"","274":":","275":" ","276":"\"","277":"u","278":"s","279":"e","28":"\"","280":"r","281":"\"","282":",","283":"\n","284":" ","285":" ","286":" ","287":" ","288":"\"","289":"c","29":",","290":"o","291":"n","292":"t","293":"e","294":"n","295":"t","296":"\"","297":":","298":" ","299":"[","3":" ","30":"\n","300":"\n","301":" ","302":" ","303":" ","304":" ","305":" ","306":" ","307":"{","308":"\n","309":" ","31":" ","310":" ","311":" ","312":" ","313":" ","314":" ","315":" ","316":" ","317":"\"","318":"t","319":"y","32":" ","320":"p","321":"e","322":"\"","323":":","324":" ","325":"\"","326":"t","327":"e","328":"x","329":"t","33":" ","330":"\"","331":",","332":"\n","333":" ","334":" ","335":" ","336":" ","337":" ","338":" ","339":" ","34":" ","340":" ","341":"\"","342":"t","343":"e","344":"x","345":"t","346":"\"","347":":","348":" ","349":"\"","35":"\"","350":"[","351":"C","352":"u","353":"r","354":"r","355":"e","356":"n","357":"t","358":" ","359":"F","36":"c","360":"o","361":"c","362":"u","363":"s","364":":","365":" ","366":"M","367":"o","368":"l","369":"e","37":"o","370":"c","371":"u","372":"l","373":"e","374":" ","375":"C","376":"a","377":"n","378":"d","379":"i","38":"n","380":"d","381":"a","382":"t","383":"e","384":" ","385":"1","386":",","387":" ","388":"S","389":"M","39":"t","390":"I","391":"L","392":"E","393":"S","394":":","395":" ","396":"C","397":"O","398":"C","399":"1","4":"{","40":"e","400":"=","401":"C","402":"(","403":"O","404":"C","405":")","406":"C","407":"=","408":"C","409":"2","41":"n","410":"C","411":"(","412":"=","413":"C","414":"1","415":")","416":"C","417":"(","418":"=","419":"O","42":"t","420":")","421":"C","422":"(","423":"C","424":"(","425":"=","426":"O","427":")","428":"N","429":"3","43":"\"","430":"C","431":"C","432":"C","433":"C","434":"3","435":")","436":"=","437":"C","438":"(","439":"N","44":":","440":")","441":"C","442":"2","443":"=","444":"O","445":"]","446":"\"","447":"\n","448":" ","449":" ","45":" ","450":" ","451":" ","452":" ","453":" ","454":"}","455":"\n","456":" ","457":" ","458":" ","459":" ","46":"[","460":"]","461":"\n","462":" ","463":" ","464":"}","465":",","466":"\n","467":" ","468":" ","469":"{","47":"\n","470":"\n","471":" ","472":" ","473":" ","474":" ","475":"\"","476":"r","477":"o","478":"l","479":"e","48":" ","480":"\"","481":":","482":" ","483":"\"","484":"u","485":"s","486":"e","487":"r","488":"\"","489":",","49":" ","490":"\n","491":" ","492":" ","493":" ","494":" ","495":"\"","496":"c","497":"o","498":"n","499":"t","5":"\n","50":" ","500":"e","501":"n","502":"t","503":"\"","504":":","505":" ","506":"[","507":"\n","508":" ","509":" ","51":" ","510":" ","511":" ","512":" ","513":" ","514":"{","515":"\n","516":" ","517":" ","518":" ","519":" ","52":" ","520":" ","521":" ","522":" ","523":" ","524":"\"","525":"t","526":"y","527":"p","528":"e","529":"\"","53":" ","530":":","531":" ","532":"\"","533":"t","534":"e","535":"x","536":"t","537":"\"","538":",","539":"\n","54":"{","540":" ","541":" ","542":" ","543":" ","544":" ","545":" ","546":" ","547":" ","548":"\"","549":"t","55":"\n","550":"e","551":"x","552":"t","553":"\"","554":":","555":" ","556":"\"","557":"T","558":"e","559":"l","56":" ","560":"l","561":" ","562":"m","563":"e","564":" ","565":"m","566":"o","567":"r","568":"e","569":"\"","57":" ","570":"\n","571":" ","572":" ","573":" ","574":" ","575":" ","576":" ","577":"}","578":"\n","579":" ","58":" ","580":" ","581":" ","582":" ","583":"]","584":"\n","585":" ","586":" ","587":"}","588":"\n","589":"]","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-24 09:17:48"}
{"level":"info","message":"Sending messages to Anthropic API...","service":"breaking-good-api","timestamp":"2025-04-24 09:17:48"}
{"level":"error","message":"Cannot read properties of undefined (reading 'create')","service":"breaking-good-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:863:46\n    at Layer.handle [as handle_request] (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at requireApiKey (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:44:12)\n    at Layer.handle [as handle_request] (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)","timestamp":"2025-04-24 09:17:48"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:19:10"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:21:41"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"Created request ID: 22e7a9f6-a31f-4155-8970-f227dcc72df9","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"Claude API response received: msg_01AdPDfJEpqRCXWjzfbRYSEX","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Received Claude response with ID: msg_01AdPDfJEpqRCXWjzfbRYSEX","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Using string content directly, length: 8658","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Extracted 8658 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(F)(F)F)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1ccc(OC(F)(F)F)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:50"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1ccc(OC(F)(F)F)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:50"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(C)N)c(OC)cc1OCC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 09:22:50"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(CC(C)N)c(OC)cc1OCC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 09:22:51"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(CC(C)N)c(OC)cc1OCC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 09:22:51"}
{"level":"info","message":"Validating SMILES: COc1ccc(C2=NCCN2CCN3CCN(Cc4ccccc4F)CC3)cc1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:51"}
{"level":"info","message":"Attempting 3D structure generation for: COc1ccc(C2=NCCN2CCN3CCN(Cc4ccccc4F)CC3)cc1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1ccc(C2=NCCN2CCN3CCN(Cc4ccccc4F)CC3)cc1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Saving results to file for request 22e7a9f6-a31f-4155-8970-f227dcc72df9","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 09:22:53"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:22:56"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:23:12"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-24 09:23:41"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"I","105":"'","106":"m","107":" ","108":"h","109":"e","11":"r","110":"r","111":"e","112":" ","113":"t","114":"o","115":" ","116":"h","117":"e","118":"l","119":"p","12":"o","120":" ","121":"w","122":"i","123":"t","124":"h","125":" ","126":"d","127":"r","128":"u","129":"g","13":"l","130":" ","131":"d","132":"e","133":"s","134":"i","135":"g","136":"n","137":".","138":" ","139":"C","14":"e","140":"o","141":"n","142":"t","143":"e","144":"x","145":"t","146":":","147":" ","148":"D","149":"i","15":"\"","150":"s","151":"c","152":"u","153":"s","154":"s","155":"i","156":"n","157":"g","158":" ","159":"M","16":":","160":"o","161":"l","162":"e","163":"c","164":"u","165":"l","166":"e","167":" ","168":"C","169":"a","17":" ","170":"n","171":"d","172":"i","173":"d","174":"a","175":"t","176":"e","177":" ","178":"2","179":" ","18":"\"","180":"(","181":"S","182":"M","183":"I","184":"L","185":"E","186":"S","187":":","188":" ","189":"C","19":"a","190":"O","191":"c","192":"1","193":"c","194":"c","195":"(","196":"C","197":"C","198":"(","199":"C","2":" ","20":"s","200":")","201":"N","202":")","203":"c","204":"(","205":"O","206":"C","207":")","208":"c","209":"c","21":"s","210":"1","211":"O","212":"C","213":"C","214":"(","215":"F","216":")","217":"(","218":"F","219":")","22":"i","220":"F","221":")","222":"\"","223":"\n","224":" ","225":" ","226":" ","227":" ","228":" ","229":" ","23":"s","230":"}","231":"\n","232":" ","233":" ","234":" ","235":" ","236":"]","237":"\n","238":" ","239":" ","24":"t","240":"}","241":",","242":"\n","243":" ","244":" ","245":"{","246":"\n","247":" ","248":" ","249":" ","25":"a","250":" ","251":"\"","252":"r","253":"o","254":"l","255":"e","256":"\"","257":":","258":" ","259":"\"","26":"n","260":"u","261":"s","262":"e","263":"r","264":"\"","265":",","266":"\n","267":" ","268":" ","269":" ","27":"t","270":" ","271":"\"","272":"c","273":"o","274":"n","275":"t","276":"e","277":"n","278":"t","279":"\"","28":"\"","280":":","281":" ","282":"[","283":"\n","284":" ","285":" ","286":" ","287":" ","288":" ","289":" ","29":",","290":"{","291":"\n","292":" ","293":" ","294":" ","295":" ","296":" ","297":" ","298":" ","299":" ","3":" ","30":"\n","300":"\"","301":"t","302":"y","303":"p","304":"e","305":"\"","306":":","307":" ","308":"\"","309":"t","31":" ","310":"e","311":"x","312":"t","313":"\"","314":",","315":"\n","316":" ","317":" ","318":" ","319":" ","32":" ","320":" ","321":" ","322":" ","323":" ","324":"\"","325":"t","326":"e","327":"x","328":"t","329":"\"","33":" ","330":":","331":" ","332":"\"","333":"[","334":"C","335":"u","336":"r","337":"r","338":"e","339":"n","34":" ","340":"t","341":" ","342":"F","343":"o","344":"c","345":"u","346":"s","347":":","348":" ","349":"M","35":"\"","350":"o","351":"l","352":"e","353":"c","354":"u","355":"l","356":"e","357":" ","358":"C","359":"a","36":"c","360":"n","361":"d","362":"i","363":"d","364":"a","365":"t","366":"e","367":" ","368":"2","369":",","37":"o","370":" ","371":"S","372":"M","373":"I","374":"L","375":"E","376":"S","377":":","378":" ","379":"C","38":"n","380":"O","381":"c","382":"1","383":"c","384":"c","385":"(","386":"C","387":"C","388":"(","389":"C","39":"t","390":")","391":"N","392":")","393":"c","394":"(","395":"O","396":"C","397":")","398":"c","399":"c","4":"{","40":"e","400":"1","401":"O","402":"C","403":"C","404":"(","405":"F","406":")","407":"(","408":"F","409":")","41":"n","410":"F","411":"]","412":"\"","413":"\n","414":" ","415":" ","416":" ","417":" ","418":" ","419":" ","42":"t","420":"}","421":"\n","422":" ","423":" ","424":" ","425":" ","426":"]","427":"\n","428":" ","429":" ","43":"\"","430":"}","431":",","432":"\n","433":" ","434":" ","435":"{","436":"\n","437":" ","438":" ","439":" ","44":":","440":" ","441":"\"","442":"r","443":"o","444":"l","445":"e","446":"\"","447":":","448":" ","449":"\"","45":" ","450":"u","451":"s","452":"e","453":"r","454":"\"","455":",","456":"\n","457":" ","458":" ","459":" ","46":"[","460":" ","461":"\"","462":"c","463":"o","464":"n","465":"t","466":"e","467":"n","468":"t","469":"\"","47":"\n","470":":","471":" ","472":"[","473":"\n","474":" ","475":" ","476":" ","477":" ","478":" ","479":" ","48":" ","480":"{","481":"\n","482":" ","483":" ","484":" ","485":" ","486":" ","487":" ","488":" ","489":" ","49":" ","490":"\"","491":"t","492":"y","493":"p","494":"e","495":"\"","496":":","497":" ","498":"\"","499":"t","5":"\n","50":" ","500":"e","501":"x","502":"t","503":"\"","504":",","505":"\n","506":" ","507":" ","508":" ","509":" ","51":" ","510":" ","511":" ","512":" ","513":" ","514":"\"","515":"t","516":"e","517":"x","518":"t","519":"\"","52":" ","520":":","521":" ","522":"\"","523":"T","524":"e","525":"l","526":"l","527":" ","528":"m","529":"e","53":" ","530":" ","531":"m","532":"o","533":"r","534":"e","535":".","536":"\"","537":"\n","538":" ","539":" ","54":"{","540":" ","541":" ","542":" ","543":" ","544":"}","545":"\n","546":" ","547":" ","548":" ","549":" ","55":"\n","550":"]","551":"\n","552":" ","553":" ","554":"}","555":"\n","556":"]","56":" ","57":" ","58":" ","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-24 09:23:41"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-24 09:23:41"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-24 09:23:47"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-24 09:24:11"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"I","105":"'","106":"m","107":" ","108":"h","109":"e","11":"r","110":"r","111":"e","112":" ","113":"t","114":"o","115":" ","116":"h","117":"e","118":"l","119":"p","12":"o","120":" ","121":"w","122":"i","123":"t","124":"h","125":" ","126":"d","127":"r","128":"u","129":"g","13":"l","130":" ","131":"d","132":"e","133":"s","134":"i","135":"g","136":"n","137":".","138":" ","139":"C","14":"e","140":"o","141":"n","142":"t","143":"e","144":"x","145":"t","146":":","147":" ","148":"D","149":"i","15":"\"","150":"s","151":"c","152":"u","153":"s","154":"s","155":"i","156":"n","157":"g","158":" ","159":"M","16":":","160":"o","161":"l","162":"e","163":"c","164":"u","165":"l","166":"e","167":" ","168":"C","169":"a","17":" ","170":"n","171":"d","172":"i","173":"d","174":"a","175":"t","176":"e","177":" ","178":"2","179":" ","18":"\"","180":"(","181":"S","182":"M","183":"I","184":"L","185":"E","186":"S","187":":","188":" ","189":"C","19":"a","190":"O","191":"c","192":"1","193":"c","194":"c","195":"(","196":"C","197":"C","198":"(","199":"C","2":" ","20":"s","200":")","201":"N","202":")","203":"c","204":"(","205":"O","206":"C","207":")","208":"c","209":"c","21":"s","210":"1","211":"O","212":"C","213":"C","214":"(","215":"F","216":")","217":"(","218":"F","219":")","22":"i","220":"F","221":")","222":"\"","223":"\n","224":" ","225":" ","226":" ","227":" ","228":" ","229":" ","23":"s","230":"}","231":"\n","232":" ","233":" ","234":" ","235":" ","236":"]","237":"\n","238":" ","239":" ","24":"t","240":"}","241":",","242":"\n","243":" ","244":" ","245":"{","246":"\n","247":" ","248":" ","249":" ","25":"a","250":" ","251":"\"","252":"r","253":"o","254":"l","255":"e","256":"\"","257":":","258":" ","259":"\"","26":"n","260":"u","261":"s","262":"e","263":"r","264":"\"","265":",","266":"\n","267":" ","268":" ","269":" ","27":"t","270":" ","271":"\"","272":"c","273":"o","274":"n","275":"t","276":"e","277":"n","278":"t","279":"\"","28":"\"","280":":","281":" ","282":"[","283":"\n","284":" ","285":" ","286":" ","287":" ","288":" ","289":" ","29":",","290":"{","291":"\n","292":" ","293":" ","294":" ","295":" ","296":" ","297":" ","298":" ","299":" ","3":" ","30":"\n","300":"\"","301":"t","302":"y","303":"p","304":"e","305":"\"","306":":","307":" ","308":"\"","309":"t","31":" ","310":"e","311":"x","312":"t","313":"\"","314":",","315":"\n","316":" ","317":" ","318":" ","319":" ","32":" ","320":" ","321":" ","322":" ","323":" ","324":"\"","325":"t","326":"e","327":"x","328":"t","329":"\"","33":" ","330":":","331":" ","332":"\"","333":"T","334":"e","335":"l","336":"l","337":" ","338":"m","339":"e","34":" ","340":" ","341":"m","342":"o","343":"r","344":"e","345":".","346":"\"","347":"\n","348":" ","349":" ","35":"\"","350":" ","351":" ","352":" ","353":" ","354":"}","355":"\n","356":" ","357":" ","358":" ","359":" ","36":"c","360":"]","361":"\n","362":" ","363":" ","364":"}","365":",","366":"\n","367":" ","368":" ","369":"{","37":"o","370":"\n","371":" ","372":" ","373":" ","374":" ","375":"\"","376":"r","377":"o","378":"l","379":"e","38":"n","380":"\"","381":":","382":" ","383":"\"","384":"a","385":"s","386":"s","387":"i","388":"s","389":"t","39":"t","390":"a","391":"n","392":"t","393":"\"","394":",","395":"\n","396":" ","397":" ","398":" ","399":" ","4":"{","40":"e","400":"\"","401":"c","402":"o","403":"n","404":"t","405":"e","406":"n","407":"t","408":"\"","409":":","41":"n","410":" ","411":"[","412":"\n","413":" ","414":" ","415":" ","416":" ","417":" ","418":" ","419":"{","42":"t","420":"\n","421":" ","422":" ","423":" ","424":" ","425":" ","426":" ","427":" ","428":" ","429":"\"","43":"\"","430":"t","431":"y","432":"p","433":"e","434":"\"","435":":","436":" ","437":"\"","438":"t","439":"e","44":":","440":"x","441":"t","442":"\"","443":",","444":"\n","445":" ","446":" ","447":" ","448":" ","449":" ","45":" ","450":" ","451":" ","452":" ","453":"\"","454":"t","455":"e","456":"x","457":"t","458":"\"","459":":","46":"[","460":" ","461":"\"","462":"E","463":"r","464":"r","465":"o","466":"r","467":":","468":" ","469":"I","47":"\n","470":"n","471":"v","472":"a","473":"l","474":"i","475":"d","476":" ","477":"r","478":"e","479":"s","48":" ","480":"p","481":"o","482":"n","483":"s","484":"e","485":" ","486":"f","487":"o","488":"r","489":"m","49":" ","490":"a","491":"t","492":" ","493":"f","494":"r","495":"o","496":"m","497":" ","498":"A","499":"P","5":"\n","50":" ","500":"I","501":"\"","502":"\n","503":" ","504":" ","505":" ","506":" ","507":" ","508":" ","509":"}","51":" ","510":"\n","511":" ","512":" ","513":" ","514":" ","515":"]","516":"\n","517":" ","518":" ","519":"}","52":" ","520":",","521":"\n","522":" ","523":" ","524":"{","525":"\n","526":" ","527":" ","528":" ","529":" ","53":" ","530":"\"","531":"r","532":"o","533":"l","534":"e","535":"\"","536":":","537":" ","538":"\"","539":"u","54":"{","540":"s","541":"e","542":"r","543":"\"","544":",","545":"\n","546":" ","547":" ","548":" ","549":" ","55":"\n","550":"\"","551":"c","552":"o","553":"n","554":"t","555":"e","556":"n","557":"t","558":"\"","559":":","56":" ","560":" ","561":"[","562":"\n","563":" ","564":" ","565":" ","566":" ","567":" ","568":" ","569":"{","57":" ","570":"\n","571":" ","572":" ","573":" ","574":" ","575":" ","576":" ","577":" ","578":" ","579":"\"","58":" ","580":"t","581":"y","582":"p","583":"e","584":"\"","585":":","586":" ","587":"\"","588":"t","589":"e","59":" ","590":"x","591":"t","592":"\"","593":",","594":"\n","595":" ","596":" ","597":" ","598":" ","599":" ","6":" ","60":" ","600":" ","601":" ","602":" ","603":"\"","604":"t","605":"e","606":"x","607":"t","608":"\"","609":":","61":" ","610":" ","611":"\"","612":"[","613":"C","614":"u","615":"r","616":"r","617":"e","618":"n","619":"t","62":" ","620":" ","621":"F","622":"o","623":"c","624":"u","625":"s","626":":","627":" ","628":"M","629":"o","63":" ","630":"l","631":"e","632":"c","633":"u","634":"l","635":"e","636":" ","637":"C","638":"a","639":"n","64":"\"","640":"d","641":"i","642":"d","643":"a","644":"t","645":"e","646":" ","647":"2","648":",","649":" ","65":"t","650":"S","651":"M","652":"I","653":"L","654":"E","655":"S","656":":","657":" ","658":"C","659":"O","66":"y","660":"c","661":"1","662":"c","663":"c","664":"(","665":"C","666":"C","667":"(","668":"C","669":")","67":"p","670":"N","671":")","672":"c","673":"(","674":"O","675":"C","676":")","677":"c","678":"c","679":"1","68":"e","680":"O","681":"C","682":"C","683":"(","684":"F","685":")","686":"(","687":"F","688":")","689":"F","69":"\"","690":"]","691":"\"","692":"\n","693":" ","694":" ","695":" ","696":" ","697":" ","698":" ","699":"}","7":" ","70":":","700":"\n","701":" ","702":" ","703":" ","704":" ","705":"]","706":"\n","707":" ","708":" ","709":"}","71":" ","710":",","711":"\n","712":" ","713":" ","714":"{","715":"\n","716":" ","717":" ","718":" ","719":" ","72":"\"","720":"\"","721":"r","722":"o","723":"l","724":"e","725":"\"","726":":","727":" ","728":"\"","729":"u","73":"t","730":"s","731":"e","732":"r","733":"\"","734":",","735":"\n","736":" ","737":" ","738":" ","739":" ","74":"e","740":"\"","741":"c","742":"o","743":"n","744":"t","745":"e","746":"n","747":"t","748":"\"","749":":","75":"x","750":" ","751":"[","752":"\n","753":" ","754":" ","755":" ","756":" ","757":" ","758":" ","759":"{","76":"t","760":"\n","761":" ","762":" ","763":" ","764":" ","765":" ","766":" ","767":" ","768":" ","769":"\"","77":"\"","770":"t","771":"y","772":"p","773":"e","774":"\"","775":":","776":" ","777":"\"","778":"t","779":"e","78":",","780":"x","781":"t","782":"\"","783":",","784":"\n","785":" ","786":" ","787":" ","788":" ","789":" ","79":"\n","790":" ","791":" ","792":" ","793":"\"","794":"t","795":"e","796":"x","797":"t","798":"\"","799":":","8":" ","80":" ","800":" ","801":"\"","802":"H","803":"e","804":"l","805":"l","806":"o","807":"\"","808":"\n","809":" ","81":" ","810":" ","811":" ","812":" ","813":" ","814":" ","815":"}","816":"\n","817":" ","818":" ","819":" ","82":" ","820":" ","821":"]","822":"\n","823":" ","824":" ","825":"}","826":"\n","827":"]","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-24 09:24:11"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-24 09:24:11"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-24 09:24:16"}
