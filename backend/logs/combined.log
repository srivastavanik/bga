{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-15 00:00:50"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"info","message":"Using fallback test response since API call failed","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Extracted 8029 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)C(=O)NC)N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)C(CS(=O)C(=O)NC)N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Validating SMILES: COc1ccc(CCN2CCN(c3ncnc4[nH]ccc34)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(CCN2CCN(c3ncnc4[nH]ccc34)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:47"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(CCNC(=O)C2CCN(CC3=Cc4ccccc4C3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:47"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(CCNC(=O)C2CCN(CC3=Cc4ccccc4C3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:48"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:36:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Extracted 8364 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Validating SMILES: CC(C(=O)OC)C1CCN(C)CC1c1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Successfully validated SMILES: CC(C(=O)OC)C1CCN(C)CC1c1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(C(=O)CS(=O)c2ccccc2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(C(=O)CS(=O)c2ccccc2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 00:38:32"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc(F)cc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:38:32"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc(F)cc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Validating SMILES: N-substituted-2-amino-3-(4-ethoxy-phenyl)propane","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Successfully validated SMILES: N-substituted-2-amino-3-(4-ethoxy-phenyl)propane","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Extracted 9582 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Validating SMILES: CC(C)C(=O)OCCCN1C(=O)C2=C(C1=O)C(=O)N(C(=O)N2)CCCOC(=O)C(C)C","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Successfully validated SMILES: CC(C)C(=O)OCCCN1C(=O)C2=C(C1=O)C(=O)N(C(=O)N2)CCCOC(=O)C(C)C","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc4c(c3)OCO4)CC2)cc(OC)c1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc4c(c3)OCO4)CC2)cc(OC)c1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:50:56"}
{"level":"info","message":"Validating SMILES: 3,4,5-trimethoxy-N-[1-(3-(1,3-benzodioxol-5-yloxy)propyl)piperidin-4-yl]benzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:56"}
{"level":"info","message":"Successfully validated SMILES: 3,4,5-trimethoxy-N-[1-(3-(1,3-benzodioxol-5-yloxy)propyl)piperidin-4-yl]benzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Validating SMILES: COc1ccc(OC)c(CC(=O)NCCCNc2ncnc3[nH]cnc23)c1","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(OC)c(CC(=O)NCCCNc2ncnc3[nH]cnc23)c1","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Validating SMILES: N-(3-(9H-purin-6-ylamino)propyl)-2-(2,5-dimethoxyphenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Successfully validated SMILES: N-(3-(9H-purin-6-ylamino)propyl)-2-(2,5-dimethoxyphenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:58"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:50:58"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Extracted 6670 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Validating SMILES: O=C(O)C1C(=O)N(CC2=CC=C(F)C=C2)C(=O)N1CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Successfully validated SMILES: O=C(O)C1C(=O)N(CC2=CC=C(F)C=C2)C(=O)N1CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CC(=O)N2CCN(C3CCN(C(=O)C4=CC=C(F)C=C4)CC3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CC(=O)N2CCN(C3CCN(C(=O)C4=CC=C(F)C=C4)CC3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Validating SMILES: N-(4-(4-(2-methoxyphenyl)piperazin-1-yl)butyl)-4-fluorobenzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Successfully validated SMILES: N-(4-(4-(2-methoxyphenyl)piperazin-1-yl)butyl)-4-fluorobenzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Validating SMILES: CC(C)NC(=O)C1(C2=CC(Cl)=C(OC)C=C2)CCN(CC3=CC=C(F)C=C3)CC1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Successfully validated SMILES: CC(C)NC(=O)C1(C2=CC(Cl)=C(OC)C=C2)CCN(CC3=CC=C(F)C=C3)CC1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Validating SMILES: N-Isopropyl-1-(3-chloro-4-methoxyphenyl)-4-(4-fluorobenzyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Successfully validated SMILES: N-Isopropyl-1-(3-chloro-4-methoxyphenyl)-4-(4-fluorobenzyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:21"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:52:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Extracted 9597 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)NC)NC(=O)OC1CCCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)C(CS(=O)NC)NC(=O)OC1CCCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-methyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-methyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:00:44"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N1CCN(C2=CC=CC=C2F)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:44"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(C1CCCC1)N1CCN(C2=CC=CC=C2F)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Validating SMILES: 2-(1-piperidyl)-2-(cyclopentyl)acetate-N-(2-fluorophenyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Successfully validated SMILES: 2-(1-piperidyl)-2-(cyclopentyl)acetate-N-(2-fluorophenyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Validating SMILES: C1CN(CC(C1)OC(=O)N1CCCCC1)C(=O)C1=CC=C(C=C1)C#CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Successfully validated SMILES: C1CN(CC(C1)OC(=O)N1CCCCC1)C(=O)C1=CC=C(C=C1)C#CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:46"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:00:46"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Extracted 8003 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Validating SMILES: C[C@H](OS(=O)(=O)c1ccccc1)C(=O)NCCCC(c1ccccc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Successfully validated SMILES: C[C@H](OS(=O)(=O)c1ccccc1)C(=O)NCCCC(c1ccccc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(cc1OC)C(=O)N1CCN(CC1)C(C)Cc1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(cc1OC)C(=O)N1CCN(CC1)C(C)Cc1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(cc1)OCCCOc1cccc(c1)C#N","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(cc1)OCCCOc1cccc(c1)C#N","service":"breaking-good-api","timestamp":"2025-04-15 01:06:48"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:06:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Extracted 5870 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Validating SMILES: N-methyl-4-phenyl-3-(pyrrolidin-1-yl)butan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-4-phenyl-3-(pyrrolidin-1-yl)butan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Validating SMILES: CC(CCCN(C)C)C1=CC=CC=C1N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Successfully validated SMILES: CC(CCCN(C)C)C1=CC=CC=C1N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Validating SMILES: CN(C)C(CC1=CC=CC=C1)C1=NC(N)=CO1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Successfully validated SMILES: CN(C)C(CC1=CC=CC=C1)C1=NC(N)=CO1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:36"}
{"level":"info","message":"Validating SMILES: 3-(benzofuran-4-yl)-N,N-dimethyl-3-(methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:36"}
{"level":"info","message":"Successfully validated SMILES: 3-(benzofuran-4-yl)-N,N-dimethyl-3-(methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Validating SMILES: CN(C)CCCC(NC)C1=CC2=CC=CC=C2O1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Successfully validated SMILES: CN(C)CCCC(NC)C1=CC2=CC=CC=C2O1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Extracted 7530 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1=CC(=C(C=C1)S(=O)(=O)N)OC2CCOCC2)C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Successfully validated SMILES: CC(NC(=O)C1=CC(=C(C=C1)S(=O)(=O)N)OC2CCOCC2)C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Validating SMILES: CCCC(C(=O)N1CCN(CC1)C2=CC=C(C=C2)OC)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Successfully validated SMILES: CCCC(C(=O)N1CCN(CC1)C2=CC=C(C=C2)OC)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1OC)C(=O)NC2CCN(CC2)CC3=CC=CC=C3CN4C=NC=N4","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC(=CC=C1OC)C(=O)NC2CCN(CC2)CC3=CC=CC=C3CN4C=NC=N4","service":"breaking-good-api","timestamp":"2025-04-15 01:17:19"}
{"level":"info","message":"Validating SMILES: N-(1-(benzylimidazol-1-yl)piperidin-4-yl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:17:19"}
{"level":"info","message":"Successfully validated SMILES: N-(1-(benzylimidazol-1-yl)piperidin-4-yl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:17:20"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:17:20"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Extracted 7165 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Validating SMILES: COC(=O)C(CS(=O)C(C)(C)NC(=O)OC)NC(=O)OCH3","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(CS(=O)C(C)(C)NC(=O)OC)NC(=O)OCH3","service":"breaking-good-api","timestamp":"2025-04-15 01:18:24"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CCCC1)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:24"}
{"level":"info","message":"Successfully validated SMILES: CC(NC(=O)C1CCCC1)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1OC)CCN1CC(CC2=CC=C(Cl)C=C2)N(C)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC(=CC=C1OC)CCN1CC(CC2=CC=C(Cl)C=C2)N(C)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Extracted 5776 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Found 6 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)CNC(=O)OS(=O)(=O)c1ccc(N)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)CNC(=O)OS(=O)(=O)c1ccc(N)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Validating SMILES: N-(2,2-dimethylpropanoyl)-2-[(4-aminophenyl)sulfonyloxy]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Successfully validated SMILES: N-(2,2-dimethylpropanoyl)-2-[(4-aminophenyl)sulfonyloxy]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:23:59"}
{"level":"info","message":"Validating SMILES: C1CN2CCC1CC2C(c1ccccc1)OC(=O)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:23:59"}
{"level":"info","message":"Successfully validated SMILES: C1CN2CCC1CC2C(c1ccccc1)OC(=O)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Validating SMILES: N-methyl-N-(3","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-N-(3","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Validating SMILES: COc1ccc(CC(NC)C(=O)NCC2=CC(=O)OC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(CC(NC)C(=O)NCC2=CC(=O)OC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Validating SMILES: N-methyl-2-(4-methoxyphenyl)-3-oxo-3-((2-oxo-2H-pyran-4-yl)methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-2-(4-methoxyphenyl)-3-oxo-3-((2-oxo-2H-pyran-4-yl)methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Validated 6 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Extracted 7089 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Validating SMILES: CNC(=O)C(C1=CC=CC=C1)C2CCN(C)CC2","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)C(C1=CC=CC=C1)C2CCN(C)CC2","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)NCCCC1=CC=C(OS(=O)(=O)C)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)NCCCC1=CC=C(OS(=O)(=O)C)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CCNC(=O)C2CCN(CC3=CC=C(F)C=C3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CCNC(=O)C2CCN(CC3=CC=C(F)C=C3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:07"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:25:07"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Extracted 8237 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Validating SMILES: CC(C(=O)OC)C(C1=CC=CC=C1)N2CCN(CC2)C3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Successfully validated SMILES: CC(C(=O)OC)C(C1=CC=CC=C1)N2CCN(CC2)C3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:29:46"}
{"level":"info","message":"Validating SMILES: CNC(=O)C1=CC(=C(C=C1)NS(=O)(=O)C2=CC=C(C=C2)OC)OC3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-15 01:29:46"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)C1=CC(=C(C=C1)NS(=O)(=O)C2=CC=C(C=C2)OC)OC3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Validating SMILES: N-methyl-3-methoxy-4-(3-piperidinyloxy)-N-(4-methoxyphenylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-3-methoxy-4-(3-piperidinyloxy)-N-(4-methoxyphenylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Validating SMILES: CC1C2CCC(C1(C)C(=O)C(C)(C)S(=O)C3=CC=C(C=C3)OC)N2C","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Successfully validated SMILES: CC1C2CCC(C1(C)C(=O)C(C)(C)S(=O)C3=CC=C(C=C3)OC)N2C","service":"breaking-good-api","timestamp":"2025-04-15 01:29:48"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:29:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Extracted 7796 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(OC(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:05"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(S(=O)C(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:05"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(S(=O)C(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Validating SMILES: COc1ccc(C(=O)NCCc2ccc(F)cc2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(C(=O)NCCc2ccc(F)cc2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Validating SMILES: N-(4-fluorophenethyl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Successfully validated SMILES: N-(4-fluorophenethyl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:31:07"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:31:07"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Extracted 8676 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NC(=O)C[C@@H](C(=O)NC(C)(C)C)S(=O)C1=CC=C(C=C1)OC","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NC(=O)C[C@@H](C(=O)NC(C)(C)C)S(=O)C1=CC=C(C=C1)OC","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methoxyphenyl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methoxyphenyl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:40:42"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C(C1CCCCN1)C1=CC=C(C=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-15 01:40:42"}
{"level":"info","message":"Successfully validated SMILES: CCOC(=O)C(C1CCCCN1)C1=CC=C(C=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CC(N)CC2=CC(OC)=C(OC)C=C2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CC(N)CC2=CC(OC)=C(OC)C=C2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"info","message":"Created request ID: 4188bbd8-e522-42c8-a711-03547da661ec","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Error in molecule generation: Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"info","message":"Received molecule generation request with requirements: Design a non-stimulant ADHD medication that targets dopamine transporters with minimal side effects.","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"info","message":"Created request ID: f85b9484-cd97-4a98-bc83-33f104f2686f","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Error in molecule generation: Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"info","message":"Created request ID: e8c2a69e-ac76-4b5f-9150-2debb94408c5","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Generating fallback molecules due to Claude API error","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Successfully created fallback response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CN1C=NC2=C1C(=O)N(C(=O)N2C)C: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CC(CS)C(=O)N1CCCC1C(=O)O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Created request ID: 3553c4d5-d592-4032-bf56-0d9ea1600903","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Received Claude response with ID: msg_01GaAHpBm1e26niU6V2irMrS","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Extracted 7593 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N(C)Cc1cccc(c1)C(=O)NC(C)(C)CS(=O)(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES COC(=O)C(C1CCCC1)N(C)Cc1cccc(c1)C(=O)NC(C)(C)CS(=O)(=O)c1ccccc1: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N(C)Cc1ccc(F)c(c1)C(O)C#N","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES COC(=O)C(C1CCCC1)N(C)Cc1ccc(F)c(c1)C(O)C#N: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)OC(C)(C)C)C(=O)NCCc1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES CC(NC(=O)OC(C)(C)C)C(=O)NCCc1ccc(OC)c(OC)c1: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Created request ID: 6ae9bbb0-99e6-4fd9-a965-420ed10695e8","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Received Claude response with ID: msg_012vm6UqPzEf21xbfZNCNW1M","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Extracted 8547 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Validating SMILES: COC(=O)c1cc2ccccc2cc1N1CCC(c2ccc(F)cc2)(C)C(C)C1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)c1cc2ccccc2cc1N1CCC(c2ccc(F)cc2)(C)C(C)C1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Validating SMILES: CC1(C)OCC(CN(C)C(=O)c2ccc(C)cc2)C(c2ccc(Cl)c(Cl)cc2)N1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Successfully validated SMILES: CC1(C)OCC(CN(C)C(=O)c2ccc(C)cc2)C(c2ccc(Cl)c(Cl)cc2)N1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Validating SMILES: CCN(CC)CCOc1ccc(N2CCN(c3ccc4oc(c5c(F)cccc5F)nc4c3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Successfully validated SMILES: CCN(CC)CCOc1ccc(N2CCN(c3ccc4oc(c5c(F)cccc5F)nc4c3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Successfully extracted 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Saving results to file for request 6ae9bbb0-99e6-4fd9-a965-420ed10695e8","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Created request ID: b69bdc80-fbeb-4c3e-a27b-5e2981a12263","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Received Claude response with ID: msg_01YUdrsGwycmeLTAhKXSR9mN","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Extracted 7439 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)c1ccc(cc1)OC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CC(NC)C(=O)c1ccc(cc1)OC(F)(F)F: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(c(c1)OC)NS(=O)(=O)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CC(N)Cc1ccc(c(c1)OC)NS(=O)(=O)C(F)(F)F: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CCCN1CCN(CC1)C(=O)c1ccc(cc1)C(C)NC","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CCCN1CCN(CC1)C(=O)c1ccc(cc1)C(C)NC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Created request ID: 3668773d-b529-490c-88dd-efef149d4a47","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Received Claude response with ID: msg_01N1r6wdXkUEq3FtCMKEJCJ6","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Extracted 9618 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C2C(C2)C3=CC=C(C=C3)OC4=CC=C(N)C=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C2C(C2)C3=CC=C(C=C3)OC4=CC=C(N)C=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1)C2CCCN2CC(=O)C3=CC=C(F)C=C3NC4=CC=CC=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES COC1=CC(=CC=C1)C2CCCN2CC(=O)C3=CC=C(F)C=C3NC4=CC=CC=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: CC1=C(C(=O)N(C)C2=CC=CC=C12)CC3CCNCC3C4=CC=C(OC)C=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES CC1=C(C(=O)N(C)C2=CC=CC=C12)CC3CCNCC3C4=CC=C(OC)C=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Created request ID: fc360418-703a-42a1-ba9e-ad04c4002201","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Received Claude response with ID: msg_012uSaZfvoG8mnj1oWAoZ12r","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Extracted 8020 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: FC(F)(F)c1ccc(cc1)C(=O)NC2CCN(CC2)CCCOc3ccc(F)cc3","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES FC(F)(F)c1ccc(cc1)C(=O)NC2CCN(CC2)CCCOc3ccc(F)cc3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: N-(4-(trifluoromethyl)phenyl)-1-(3-(4-fluorophenoxy)propyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES N-(4-(trifluoromethyl)phenyl)-1-(3-(4-fluorophenoxy)propyl)piperidine-4-carboxamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: N-{1-[3-(3-fluoro-phenyl)-propyl]-piperidin-4-yl}-N-phenyl-propionamide","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES N-{1-[3-(3-fluoro-phenyl)-propyl]-piperidin-4-yl}-N-phenyl-propionamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: COc1ccc2c(c1)C(=O)N(C2)CCCN3CCN(CC3)c4cccc(Cl)c4","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES COc1ccc2c(c1)C(=O)N(C2)CCCN3CCN(CC3)c4cccc(Cl)c4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: Cc1nc(sc1C(=O)NCCN2CCN(CC2)c3ccc(F)cc3F)N4CCN(CC4)CC(=O)O","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES Cc1nc(sc1C(=O)NCCN2CCN(CC2)c3ccc(F)cc3F)N4CCN(CC4)CC(=O)O: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Created request ID: 3554d0ee-534e-48b8-b602-352f19735c70","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Received Claude response with ID: msg_01LCnyk5nWn3PHQkfamaSM9e","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Extracted 7170 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Validating SMILES: CC(N)C(=O)NC1CCCC(C1)C(C)NC(=O)C2=CC=CC=C2OC","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error during validation/property call for SMILES CC(N)C(=O)NC1CCCC(C1)C(C)NC(=O)C2=CC=CC=C2OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Validating SMILES: S)-2-amino-N-((R)-1-cyclohexyl-2-(methylamino)-2-oxoethyl)-3-(4-methoxyphenyl)propanamide","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES S)-2-amino-N-((R)-1-cyclohexyl-2-(methylamino)-2-oxoethyl)-3-(4-methoxyphenyl)propanamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: CNCC1=CC(OC)=C(OC)C=C1CC(=O)NC2CCCCC2N","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES CNCC1=CC(OC)=C(OC)C=C1CC(=O)NC2CCCCC2N: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: 3-(3,4-dimethoxyphenyl)-N-(2-aminocyclohexyl)-N-methylpropanamide","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES 3-(3,4-dimethoxyphenyl)-N-(2-aminocyclohexyl)-N-methylpropanamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: FC(F)(F)C1=CC=C(C=C1)C2CCCN2CC3=CC=C(O)C=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES FC(F)(F)C1=CC=C(C=C1)C2CCCN2CC3=CC=C(O)C=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-19 19:26:12"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-19 19:26:12"}
{"level":"info","message":"Received molecule generation request with requirements: Generate","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Created request ID: 2dbcf70c-dcfd-4a4b-85e5-53a9b2ec19a8","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Received Claude response with ID: msg_01P2FZUTGnX5siweKDvz4aDH","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Extracted 7240 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: CC(NC)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES CC(NC)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: 2-(4-(4-methylpiperazine-1-carbonyloxy)phenyl)-N-methylethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES 2-(4-(4-methylpiperazine-1-carbonyloxy)phenyl)-N-methylethan-1-amine: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCc3ccccc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES COc1cc(CC(=O)N2CCN(CCCc3ccccc3)CC2)ccc1OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: CNC(=O)c1ccc(N2CCN(CC(O)c3ccc(F)cc3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES CNC(=O)c1ccc(N2CCN(CC(O)c3ccc(F)cc3)CC2)cc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: 4-(4-(1-hydroxy-2-(4-fluorophenyl)ethyl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES 4-(4-(1-hydroxy-2-(4-fluorophenyl)ethyl)piperazin-1-yl)-N-methylbenzamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Created request ID: 4ed02fe6-df96-4c53-8b6f-0891a6a134f5","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Received Claude response with ID: msg_013dTVi7zucwmW6kYbYyyW21","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Extracted 6959 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CCCCC1)C(=O)NCCC2=CNC3=C2C=C(OC)C=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error during validation/property call for SMILES CC(NC(=O)C1CCCCC1)C(=O)NCCC2=CNC3=C2C=C(OC)C=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Validating SMILES: N-(1-(1H-indol-4-yloxy)propan-2-yl)-cyclohexanecarboxamide","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES N-(1-(1H-indol-4-yloxy)propan-2-yl)-cyclohexanecarboxamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: CC(C)NC(=O)C1=CC(=C(C=C1)OC)OCC2CCCN2CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES CC(C)NC(=O)C1=CC(=C(C=C1)OC)OCC2CCCN2CC3=CC=CC=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: N-isopropyl-4-methoxy-3-((1-phenethylpyrrolidin-3-yl)methoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES N-isopropyl-4-methoxy-3-((1-phenethylpyrrolidin-3-yl)methoxy)benzamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: CCCN1CCN(CC1)C(=O)C2=CN=C(N)S2.Cl","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES CCCN1CCN(CC1)C(=O)C2=CN=C(N)S2.Cl: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Created request ID: 76c6829f-e83f-44bd-bb28-42b56f6865ee","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Received Claude response with ID: msg_012i67F1HcGgCT6CWTYxwuJr","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Extracted 7231 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Validating SMILES: 2-[(4-fluorophenyl)(1-methylpiperidin-4-yl)methoxy]-N-methyl-N-(2-phenylethyl)ethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Successfully validated SMILES: 2-[(4-fluorophenyl)(1-methylpiperidin-4-yl)methoxy]-N-methyl-N-(2-phenylethyl)ethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-20 13:28:13"}
{"level":"info","message":"Validating SMILES: FC1=CC=C(C(OCCN(C)CCC2=CC=CC=C2)C2CCN(C)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-20 13:28:13"}
{"level":"error","message":"Error comparing molecules: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: the following arguments are required: --operation\r\n","service":"breaking-good-api","timestamp":"2025-04-20 17:05:14"}
{"level":"info","message":"Searching PubMed for: adhd AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:05:40"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:05:41"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:05:41"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:45"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:46"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:47"}
{"level":"info","message":"Searching PubMed for: Adderall AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:14"}
{"level":"info","message":"Found 10 IDs (total 44853)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:15"}
{"level":"error","message":"Literature search error: pubmedData?.ArticleIdList?.ArticleId?.find is not a function","service":"breaking-good-api","stack":"TypeError: pubmedData?.ArticleIdList?.ArticleId?.find is not a function\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:87:59\n    at Array.map (<anonymous>)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:62:40\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","timestamp":"2025-04-20 17:06:16"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:19"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:19"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:20"}
{"level":"info","message":"Searching PubMed for: Aderall AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:26"}
{"level":"info","message":"Found 0 IDs (total 0)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:26"}
{"level":"info","message":"Searching PubMed for: Neuro AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:35"}
{"level":"info","message":"Found 10 IDs (total 56201)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:35"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:36"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:43"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:44"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:44"}
{"level":"info","message":"Fetching details for ID: 29428394","service":"breaking-good-api","timestamp":"2025-04-20 17:06:46"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Created request ID: c9b61eb2-3679-4fc0-b7aa-56ce285360c7","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Received Claude response with ID: msg_01XLXUNvmwUNkeKR9xMm1B5R","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Extracted 6700 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: CC(C)(OCC(=O)N(C)CS(=O)(=O)c1ccc(cc1)C(=O)NC2C(=O)N(CC(c3ccccc3)C2)C","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(OCC(=O)N(C)CS(=O)(=O)c1ccc(cc1)C(=O)NC2C(=O)N(CC(c3ccccc3)C2)C","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: 2-[(Diphenylmethyl)sulfinyl]-N-[2-(1-oxo-4-phenyl-2-pyrrolidinyl)acetamide]methylacetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Successfully validated SMILES: 2-[(Diphenylmethyl)sulfinyl]-N-[2-(1-oxo-4-phenyl-2-pyrrolidinyl)acetamide]methylacetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: C1CC(CNC(=O)C2CCN(CC2)c3nc4c(cnn4)c(n3)C(F)(F)F)C(=O)N1CCc5ccccc5OC","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Created request ID: a82d4b9c-4c4f-4b0d-8a32-4969f7af9fac","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Received Claude response with ID: msg_01RJH8r4DhAKVYi5Tbd3iYr3","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Extracted 8554 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(cc1)Oc1ccc(cc1)C(=O)NC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(cc1)Oc1ccc(cc1)C(=O)NC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-20 17:28:08"}
{"level":"info","message":"Validating SMILES: 2-(4-(4-(2-aminopropyl)phenoxy)phenyl)-N-tert-butyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:28:08"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Created request ID: 7cd5360a-ac3e-4314-b341-9ffca932ff97","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Received Claude response with ID: msg_01TxuvMqtuhgTNRGyWMCNLEU","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Extracted 7240 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Validating SMILES: 2-[(R)-1-amino-2-methylpropyl]-N-methyl-benzhydrylsulfinamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Successfully validated SMILES: 2-[(R)-1-amino-2-methylpropyl]-N-methyl-benzhydrylsulfinamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Validating SMILES: CC(C)[C@H](N)C1=CC=CC=C1C(C2=CC=CC=C2)S(=O)NCH3","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Successfully validated SMILES: CC(C)[C@H](N)C1=CC=CC=C1C(C2=CC=CC=C2)S(=O)NCH3","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Validating SMILES: S)-N-(4-fluorophenethyl)-3-(1H-imidazol-5-yl)-2-methyl-propanamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Created request ID: 8f7c476b-07f4-46a0-940d-2eeccce0db79","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Saving results to file for request 8f7c476b-07f4-46a0-940d-2eeccce0db79","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:23"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"info","message":"Created request ID: 94660d83-dd94-4b2c-80e2-673cc7797043","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Saving results to file for request 94660d83-dd94-4b2c-80e2-673cc7797043","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"info","message":"Created request ID: 41eb4027-95a7-417d-94bb-8aae4f0d3401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Saving results to file for request 41eb4027-95a7-417d-94bb-8aae4f0d3401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Created request ID: f58250ad-3ac6-4d73-8a52-1a45de6bfb9a","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 22:37:04"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:05"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:06"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Saving results to file for request f58250ad-3ac6-4d73-8a52-1a45de6bfb9a","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 22:37:07"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 22:37:08"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:05"}
{"level":"info","message":"Created request ID: f63128db-e949-4f7a-aa05-9c8daf9855fd","service":"breaking-good-api","timestamp":"2025-04-22 23:02:05"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 23:02:05"}
{"level":"info","message":"Received Claude response with ID: msg_01HxFtZq516NgpqXyffcFnZq","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Extracted 7393 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)NCC(C)c1ccc(S(=O)C(C)(C)C)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:43"}
{"level":"info","message":"Successfully validated SMILES: CC(NC)C(=O)NCC(C)c1ccc(S(=O)C(C)(C)C)cc1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Validating SMILES: N-(2-(4-(tert-butylsulfinyl)phenyl)propyl)-2-(methylamino)propanamide","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Successfully validated SMILES: N-(2-(4-(tert-butylsulfinyl)phenyl)propyl)-2-(methylamino)propanamide","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Validating SMILES: COc1cc(CCN(C)C)cc(OC)c1OCC1CN(CCF)CCO1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:44"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CCN(C)C)cc(OC)c1OCC1CN(CCF)CCO1","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Validated 4 molecules out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Saving results to file for request f63128db-e949-4f7a-aa05-9c8daf9855fd","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 23:02:45"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 11:16:12"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 11:16:12"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 11:50:43"}
{"level":"info","message":"Created request ID: 94fb17c9-2e9f-49c3-98dd-045410ce7099","service":"breaking-good-api","timestamp":"2025-04-23 11:50:43"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 11:50:43"}
{"level":"info","message":"Received Claude response with ID: msg_014tokmXeCPpKd4PF4jkEQLE","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Extracted 7791 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C)NC(=O)OC1CCN(C(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(C)NC(=O)OC1CCN(C(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C1=C(C)NC(C)=C1C(=O)OC2CC3CCC(C2)N3C","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully validated SMILES: CCOC(=O)C1=C(C)NC(C)=C1C(=O)OC2CC3CCC(C2)N3C","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validating SMILES: CN1C(=O)N(CC2=CC=CC=C2)C(=O)C1CCN3CCN(C(=O)C4=CC(F)=C(F)C=C4)CC3","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully validated SMILES: CN1C(=O)N(CC2=CC=CC=C2)C(=O)C1CCN3CCN(C(=O)C4=CC(F)=C(F)C=C4)CC3","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Validated 3 molecules out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Saving results to file for request 94fb17c9-2e9f-49c3-98dd-045410ce7099","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 11:51:21"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:03"}
{"level":"info","message":"Created request ID: f1a98ee1-773f-474b-a8eb-6b38d7690299","service":"breaking-good-api","timestamp":"2025-04-23 12:38:03"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 12:38:03"}
{"level":"info","message":"Received Claude response with ID: msg_01AoRaXFG851THW2otPd9p8h","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Extracted 8686 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(pyrrolidin-1-yl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-23 12:38:45"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(pyrrolidin-1-yl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Validating SMILES: CC(=O)N(C)CC(C)(C)C(=O)NC1CCN(CC1)Cc1ccc(cc1)S(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Successfully validated SMILES: CC(=O)N(C)CC(C)(C)C(=O)NC1CCN(CC1)Cc1ccc(cc1)S(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Validating SMILES: OC(=O)C1(NCCCOP(=O)(O)O)CCN(CC1)c1cccc(Cl)c1Cl","service":"breaking-good-api","timestamp":"2025-04-23 12:38:46"}
{"level":"info","message":"Successfully validated SMILES: OC(=O)C1(NCCCOP(=O)(O)O)CCN(CC1)c1cccc(Cl)c1Cl","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Validating SMILES: CN1CC(OC(=O)c2ccc(F)cc2)CC1CCc1ccc(O)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Successfully validated SMILES: CN1CC(OC(=O)c2ccc(F)cc2)CC1CCc1ccc(O)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Validated 4 molecules out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Saving results to file for request f1a98ee1-773f-474b-a8eb-6b38d7690299","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 12:38:47"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 12:38:48"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 16:45:30"}
{"level":"info","message":"Created request ID: 72dc3f95-d940-4400-a9f3-5722fe835ba9","service":"breaking-good-api","timestamp":"2025-04-23 16:45:30"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 16:45:30"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 17:09:53"}
{"level":"info","message":"Created request ID: f1de2b6a-45bf-42bd-a86f-45e2625339c1","service":"breaking-good-api","timestamp":"2025-04-23 17:09:53"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 17:09:53"}
{"level":"info","message":"Received Claude response with ID: msg_015E2kD7wKQwM5HbDiYozprt","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Extracted 8790 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Validating SMILES: OC1=CC(CCNCCc2cc(F)c(O)c(F)c2)=C(O)C=C1","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Successfully validated SMILES: OC1=CC(CCNCCc2cc(F)c(O)c(F)c2)=C(O)C=C1","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Validating SMILES: NC[C@H](c1ccccc1)c2ccc3OCCNc3c2","service":"breaking-good-api","timestamp":"2025-04-23 17:10:34"}
{"level":"info","message":"Successfully validated SMILES: NC[C@H](c1ccccc1)c2ccc3OCCNc3c2","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Validating SMILES: Cc1cc2c(c(C)c1)N=C(CN3CCC(c4ccc(Cl)cc4)CC3)N(Cc1ccccc1SC)C2=O","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Successfully validated SMILES: Cc1cc2c(c(C)c1)N=C(CN3CCC(c4ccc(Cl)cc4)CC3)N(Cc1ccccc1SC)C2=O","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Validated 3 molecules out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Saving results to file for request f1de2b6a-45bf-42bd-a86f-45e2625339c1","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 17:10:35"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 17:12:43"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 17:12:43"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:17"}
{"level":"info","message":"Created request ID: 8c54b1f2-3cee-4c8f-802e-640a1b94edb7","service":"breaking-good-api","timestamp":"2025-04-23 17:33:17"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 17:33:17"}
{"level":"info","message":"Received Claude response with ID: msg_01GgLXRPfegMsyp4Q7rS1sm5","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Extracted 6611 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: R)-3-(3,4-difluorophenyl)-N-ethyl-N-(pyridin-3-yl)methyl-2-methylpropan-1-amine","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: R)-3-(3,4-difluorophenyl)-N-ethyl-N-(pyridin-3-yl)methyl-2-methylpropan-1-amine","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: CC(C(CN(CC)Cc1cccnc1)c2ccc(F)c(F)c2)C","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: CC(C(CN(CC)Cc1cccnc1)c2ccc(F)c(F)c2)C","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: S)-4-(2-amino-4-chlorophenoxy)-N-(2-(pyrrolidin-1-yl)ethyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: S)-4-(2-amino-4-chlorophenoxy)-N-(2-(pyrrolidin-1-yl)ethyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: Nc1cc(Cl)ccc1OC2CCN(C(=O)NCCN3CCCC3)CC2","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: Nc1cc(Cl)ccc1OC2CCN(C(=O)NCCN3CCCC3)CC2","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)c1ccc(C(F)(F)F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:33:50"}
{"level":"info","message":"Successfully validated SMILES: CC(NC)C(=O)c1ccc(C(F)(F)F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Saving results to file for request 8c54b1f2-3cee-4c8f-802e-640a1b94edb7","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Enhancing molecules with ADMET predictions and Molblocks...","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"warn","message":"Molblock generation failed for R)-3-(3,4-difluorophenyl)-N-ethyl-N-(pyridin-3-yl)methyl-2-methylpropan-1-amine: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"warn","message":"Molblock generation failed for S)-4-(2-amino-4-chlorophenoxy)-N-(2-(pyrrolidin-1-yl)ethyl)piperidine-1-carboxamide: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully obtained molblock for CC(NC)C(=O)c1ccc(C(F)(F)F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully obtained molblock for CC(C(CN(CC)Cc1cccnc1)c2ccc(F)c(F)c2)C","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Successfully obtained molblock for Nc1cc(Cl)ccc1OC2CCN(C(=O)NCCN3CCCC3)CC2","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 17:33:51"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:08"}
{"level":"info","message":"Created request ID: 99099315-59e7-4104-a90a-727535a7ff77","service":"breaking-good-api","timestamp":"2025-04-23 17:42:08"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 17:42:08"}
{"level":"info","message":"Received Claude response with ID: msg_01FqeXhY1kaoMhHW28gy7f5u","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Extracted 6685 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Validating SMILES: CCC(=O)Nc1ccc(C(=O)NC2CCN(CCCc3ccccc3F)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Successfully validated SMILES: CCC(=O)Nc1ccc(C(=O)NC2CCN(CCCc3ccccc3F)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Validating SMILES: N-(4-(2-(3-(3-fluorophenethyl)piperazin-1-yl)acetamido)phenyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:43"}
{"level":"info","message":"Successfully validated SMILES: N-(4-(2-(3-(3-fluorophenethyl)piperazin-1-yl)acetamido)phenyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validating SMILES: CNC(=O)c1ccc(N2CCN(C3CCCc4ccc(F)cc43)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)c1ccc(N2CCN(C3CCCc4ccc(F)cc43)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validating SMILES: 4-(4-(7-fluoro-1,2,3,4-tetrahydronaphthalen-1-yl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully validated SMILES: 4-(4-(7-fluoro-1,2,3,4-tetrahydronaphthalen-1-yl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Saving results to file for request 99099315-59e7-4104-a90a-727535a7ff77","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"info","message":"Enhancing molecules with ADMET predictions and Molblocks...","service":"breaking-good-api","timestamp":"2025-04-23 17:42:44"}
{"level":"warn","message":"Molblock generation failed for N-(4-(2-(3-(3-fluorophenethyl)piperazin-1-yl)acetamido)phenyl)propionamide: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"warn","message":"Molblock generation failed for 4-(4-(7-fluoro-1,2,3,4-tetrahydronaphthalen-1-yl)piperazin-1-yl)-N-methylbenzamide: No molblock returned","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Successfully obtained molblock for CCC(=O)Nc1ccc(C(=O)NC2CCN(CCCc3ccccc3F)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Successfully obtained molblock for CNC(=O)c1ccc(N2CCN(C3CCCc4ccc(F)cc43)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Successfully obtained molblock for COc1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 17:42:45"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:04"}
{"level":"info","message":"Created request ID: 08772a44-fb37-4a79-879f-8823433b9556","service":"breaking-good-api","timestamp":"2025-04-23 18:06:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 18:06:04"}
{"level":"info","message":"Received Claude response with ID: msg_01MEQixZr3RPP3EDjnfiRE87","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Extracted 5874 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C(C2=CC=C(SC3CC3)C=C2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C(C2=CC=C(SC3CC3)C=C2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: R)-2-(diphenylmethyl)-N-methyl-1-phenylethylamine-2-sulfonamide","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: R)-2-(diphenylmethyl)-N-methyl-1-phenylethylamine-2-sulfonamide","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: O=C(NC1CCN(CC1)C2=CC=CC=C2)C3=CC=C(C=C3)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: O=C(NC1CCN(CC1)C2=CC=CC=C2)C3=CC=C(C=C3)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validating SMILES: CN1C2CCC1CC(C2)OC(C3=CC=CC=C3)C4=CC=C(Cl)C=C4","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully validated SMILES: CN1C2CCC1CC(C2)OC(C3=CC=CC=C3)C4=CC=C(Cl)C=C4","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Validated 4 molecules out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Saving results to file for request 08772a44-fb37-4a79-879f-8823433b9556","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 18:06:35"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 18:06:36"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 18:14:11"}
{"level":"info","message":"Created request ID: f52719b4-f8a7-4df0-be14-453bb657c061","service":"breaking-good-api","timestamp":"2025-04-23 18:14:11"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 18:14:11"}
{"level":"info","message":"Received Claude response with ID: msg_01NN9VXE6wyRJeCgZt1x2YTt","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Extracted 8733 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Validating SMILES: FC1=CC(=C(F)C=C1)C2=CCN(C)C(C2)C(=O)N","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Attempting 3D structure generation for: FC1=CC(=C(F)C=C1)C2=CCN(C)C(C2)C(=O)N","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): FC1=CC(=C(F)C=C1)C2=CCN(C)C(C2)C(=O)N","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Validating SMILES: R)-2-(benzhydryloxy)-N-methyl-3-(1H-imidazol-4-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"info","message":"Attempting 3D structure generation for: R)-2-(benzhydryloxy)-N-methyl-3-(1H-imidazol-4-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 18:15:00"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: R)-2-(benzhydryloxy)-N-methyl-3-(1H-imidazol-4-yl)propanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Validating SMILES: O=C(NC)C(OC(C1=CC=CC=C1)C2=CC=CC=C2)[C@H]3CN=CN3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Attempting 3D structure generation for: O=C(NC)C(OC(C1=CC=CC=C1)C2=CC=CC=C2)[C@H]3CN=CN3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): O=C(NC)C(OC(C1=CC=CC=C1)C2=CC=CC=C2)[C@H]3CN=CN3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Validating SMILES: CN1C(=O)N(C)C2=C1C(=O)N(CCO)C(C(=O)N)=C2C3=CC=C(Cl)C=C3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Attempting 3D structure generation for: CN1C(=O)N(C)C2=C1C(=O)N(CCO)C(C(=O)N)=C2C3=CC=C(Cl)C=C3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CN1C(=O)N(C)C2=C1C(=O)N(CCO)C(C(=O)N)=C2C3=CC=C(Cl)C=C3","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Saving results to file for request f52719b4-f8a7-4df0-be14-453bb657c061","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 18:15:01"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 18:15:02"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 18:15:26"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 18:15:26"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 18:21:23"}
{"level":"info","message":"Created request ID: 11307025-bd20-41a8-b17c-7db97527e197","service":"breaking-good-api","timestamp":"2025-04-23 18:21:23"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 18:21:23"}
{"level":"info","message":"Received Claude response with ID: msg_01SDK1Cbt7kGSktdzi8oBcG5","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Extracted 8076 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Validating SMILES: CCC(=O)NCCC1=CC(OC)=C(OC)C=C1NC(=O)C1CC1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:05"}
{"level":"info","message":"Attempting 3D structure generation for: CCC(=O)NCCC1=CC(OC)=C(OC)C=C1NC(=O)C1CC1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCC(=O)NCCC1=CC(OC)=C(OC)C=C1NC(=O)C1CC1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Validating SMILES: N-(3-(3,4-dimethoxyphenyl)propyl)-N-(cyclopropanecarbonyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Attempting 3D structure generation for: N-(3-(3,4-dimethoxyphenyl)propyl)-N-(cyclopropanecarbonyl)propionamide","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(3-(3,4-dimethoxyphenyl)propyl)-N-(cyclopropanecarbonyl)propionamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Validating SMILES: FC(F)(F)c1ccc(C(=O)N2CC3(CCN(C)CC3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Attempting 3D structure generation for: FC(F)(F)c1ccc(C(=O)N2CC3(CCN(C)CC3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:06"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): FC(F)(F)c1ccc(C(=O)N2CC3(CCN(C)CC3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Validating SMILES: CN1CCC(C(=O)Nc2ccc(OC)c(OC)c2)CC1OC(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Attempting 3D structure generation for: CN1CCC(C(=O)Nc2ccc(OC)c(OC)c2)CC1OC(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CN1CCC(C(=O)Nc2ccc(OC)c(OC)c2)CC1OC(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Saving results to file for request 11307025-bd20-41a8-b17c-7db97527e197","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 18:22:07"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 18:24:16"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-23 18:24:16"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 21:30:34"}
{"level":"info","message":"Created request ID: a366ac6b-6e00-4e15-b958-b63e24b9f363","service":"breaking-good-api","timestamp":"2025-04-23 21:30:34"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 21:30:34"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 21:30:35"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic-version: header is required\"}}","service":"breaking-good-api","timestamp":"2025-04-23 21:30:35"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-23 21:30:35"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 400\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:76:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:274:24","timestamp":"2025-04-23 21:30:35"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 21:39:52"}
{"level":"info","message":"Created request ID: 4cffdee4-5007-4e5f-87c0-2475406c9071","service":"breaking-good-api","timestamp":"2025-04-23 21:39:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 21:39:52"}
{"level":"info","message":"Received Claude response with ID: msg_01Fcuz3epwrRoB1e56yBNsKy","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Extracted 7017 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Validating SMILES: O=C(OC)[C@](Cc1ccc(F)cc1)(c2cccnc2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Attempting 3D structure generation for: O=C(OC)[C@](Cc1ccc(F)cc1)(c2cccnc2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): O=C(OC)[C@](Cc1ccc(F)cc1)(c2cccnc2)CNC","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Validating SMILES: 2S)-N,N-diethyl-2-(6,7-dihydro-4H-benzo[e][1,3]oxazin-3(5H)-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 21:40:29"}
{"level":"info","message":"Attempting 3D structure generation for: 2S)-N,N-diethyl-2-(6,7-dihydro-4H-benzo[e][1,3]oxazin-3(5H)-yl)propanamide","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2S)-N,N-diethyl-2-(6,7-dihydro-4H-benzo[e][1,3]oxazin-3(5H)-yl)propanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Validating SMILES: CCN(CC)C(=O)[C@H](C)N1CCc2ccccc2OC1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Attempting 3D structure generation for: CCN(CC)C(=O)[C@H](C)N1CCc2ccccc2OC1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCN(CC)C(=O)[C@H](C)N1CCc2ccccc2OC1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Validating SMILES: CC(C)[C@H](N)Cc1ccnc(N2CCN(c3cccc(Cl)c3Cl)C(=O)C2)n1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)[C@H](N)Cc1ccnc(N2CCN(c3cccc(Cl)c3Cl)C(=O)C2)n1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:30"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)[C@H](N)Cc1ccnc(N2CCN(c3cccc(Cl)c3Cl)C(=O)C2)n1","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Saving results to file for request 4cffdee4-5007-4e5f-87c0-2475406c9071","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 21:40:31"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 22:24:13"}
{"level":"info","message":"Created request ID: 77d4b80b-f275-4570-9213-9de9f5a147d5","service":"breaking-good-api","timestamp":"2025-04-23 22:24:13"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 22:24:13"}
{"level":"info","message":"Received Claude response with ID: msg_01EeFBE8jxqC1oRDfB6gnLZB","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Extracted 8713 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Validating SMILES: CC(N)CC(=O)N1CCN(C(=O)C2(c3ccccc3)CC2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)CC(=O)N1CCN(C(=O)C2(c3ccccc3)CC2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 22:25:05"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)CC(=O)N1CCN(C(=O)C2(c3ccccc3)CC2)CC1","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Validating SMILES: 2-amino-3-methyl-N-(4-(2-(cyclopropyl(phenyl)methanoyl)piperazin-1-yl)butanamide","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Attempting 3D structure generation for: 2-amino-3-methyl-N-(4-(2-(cyclopropyl(phenyl)methanoyl)piperazin-1-yl)butanamide","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-amino-3-methyl-N-(4-(2-(cyclopropyl(phenyl)methanoyl)piperazin-1-yl)butanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Validating SMILES: COc1cc(CCN2CCN(C(=O)C3CCC(F)(F)CC3)CC2)c(OC)c2c1OCO2","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(CCN2CCN(C(=O)C3CCC(F)(F)CC3)CC2)c(OC)c2c1OCO2","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(CCN2CCN(C(=O)C3CCC(F)(F)CC3)CC2)c(OC)c2c1OCO2","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C1=C(C)NC(C)=C(C1c1ccccc1N(C)S(=O)(=O)c1ccc(N)cc1)C(=O)OCC","service":"breaking-good-api","timestamp":"2025-04-23 22:25:06"}
{"level":"info","message":"Attempting 3D structure generation for: CCOC(=O)C1=C(C)NC(C)=C(C1c1ccccc1N(C)S(=O)(=O)c1ccc(N)cc1)C(=O)OCC","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCOC(=O)C1=C(C)NC(C)=C(C1c1ccccc1N(C)S(=O)(=O)c1ccc(N)cc1)C(=O)OCC","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Validating SMILES: 2,6-dimethyl-4-(2-(N-methyl-N-(4-aminophenylsulfonyl)amino)phenyl)-1,4-dihydropyridine-3,5-dicarboxylate","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Attempting 3D structure generation for: 2,6-dimethyl-4-(2-(N-methyl-N-(4-aminophenylsulfonyl)amino)phenyl)-1,4-dihydropyridine-3,5-dicarboxylate","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2,6-dimethyl-4-(2-(N-methyl-N-(4-aminophenylsulfonyl)amino)phenyl)-1,4-dihydropyridine-3,5-dicarboxylate - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Saving results to file for request 77d4b80b-f275-4570-9213-9de9f5a147d5","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-23 22:25:07"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 23:34:54"}
{"level":"info","message":"Created request ID: 1b83b1e9-bdc7-42c5-8acf-e66076a02b85","service":"breaking-good-api","timestamp":"2025-04-23 23:34:54"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-23 23:34:54"}
{"level":"info","message":"Received Claude response with ID: msg_01C7Z1soqLK7yDurZ1TtNVhV","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Extracted 7434 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: C[S](=O)C(=O)NC(c1ccccc1)c1ccc(cc1)C(=O)N1CC(=O)N(CC1)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES C[S](=O)C(=O)NC(c1ccccc1)c1ccc(cc1)C(=O)N1CC(=O)N(CC1)c1ccccc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylacetyl)amino]-N-methyl-N-(2-oxo-1-phenylpyrrolidin-3-yl)acetamide","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES 2-[(diphenylacetyl)amino]-N-methyl-N-(2-oxo-1-phenylpyrrolidin-3-yl)acetamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: CN1CCN(CC1)c1ccc(cc1)C(=O)CCCn1c(=O)[nH]c2cc(ccc21)N(C)C","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES CN1CCN(CC1)c1ccc(cc1)C(=O)CCCn1c(=O)[nH]c2cc(ccc21)N(C)C: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: 7-(4-(4-methylpiperazin-1-yl)phenethyl)-N,N-dimethyl-3,4-dihydro-1H-benzo[e][1,4]diazepin-2-one","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES 7-(4-(4-methylpiperazin-1-yl)phenethyl)-N,N-dimethyl-3,4-dihydro-1H-benzo[e][1,4]diazepin-2-one: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validating SMILES: CNCC(O)c1ccc(cc1)OCCCOc1ccc(C#N)cc1OC","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error during validation/property call for SMILES CNCC(O)c1ccc(cc1)OCCCOc1ccc(C#N)cc1OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Validated 0 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-23 23:35:38"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-23 23:37:09"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-23 23:39:43"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-23 23:40:47"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-23 23:41:30"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"Created request ID: 66f29ee0-c10a-4754-ad1e-c2353c965e1b","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-sonnet-20240229","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"error","message":"Claude API error: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"not_found_error\",\"message\":\"model: claude-3-sonnet-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:19:42"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 404\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:122:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:329:24","timestamp":"2025-04-24 00:19:42"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:20:55"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:22:51"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"Created request ID: 87d6124b-2547-4123-b5f3-ecd942579e23","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-sonnet-20240229","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:25:20"}
{"level":"error","message":"Claude API error: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:25:21"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"not_found_error\",\"message\":\"model: claude-3-sonnet-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 00:25:21"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:25:21"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 404\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:122:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:329:24","timestamp":"2025-04-24 00:25:21"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"Created request ID: 923209eb-6806-4729-aab7-ec09cd3a4fe8","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-sonnet-20240229","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"error","message":"Claude API error: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"not_found_error\",\"message\":\"model: claude-3-sonnet-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 00:25:22"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 404","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 404\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:122:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:329:24","timestamp":"2025-04-24 00:25:22"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:26:44"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:29:11"}
{"level":"info","message":"Anthropic API Key status: Loaded from environment","service":"breaking-good-api","timestamp":"2025-04-24 00:30:29"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"Created request ID: 324c2ab5-6135-45b0-b28a-e71a235c237b","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-opus-20240229","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"max_tokens: 20000 > 4096, which is the maximum allowed number of output tokens for claude-3-opus-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 00:32:30"}
{"level":"error","message":"Error in molecule generation endpoint: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","stack":"Error: Error calling Claude API: Request failed with status code 400\n    at askClaude (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:122:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:373:24","timestamp":"2025-04-24 00:32:30"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 01:17:53"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:29:42"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:29:55"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:30:31"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:31:23"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"Created request ID: 90033d4f-69bd-4655-b0ac-0be8ab1ceb65","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-opus-20240229","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:33:16"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 01:33:17"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"max_tokens: 20000 > 4096, which is the maximum allowed number of output tokens for claude-3-opus-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 01:33:17"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 01:33:17"}
{"level":"error","message":"Error details: {}","service":"breaking-good-api","timestamp":"2025-04-24 01:33:17"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:45:53"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"Created request ID: ca87e4ca-5ad7-41b6-bb6f-87e643c16366","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-opus-20240229","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:46:22"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 01:46:23"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"max_tokens: 20000 > 4096, which is the maximum allowed number of output tokens for claude-3-opus-20240229\"}}","service":"breaking-good-api","timestamp":"2025-04-24 01:46:23"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 01:46:23"}
{"level":"error","message":"Error details: {}","service":"breaking-good-api","timestamp":"2025-04-24 01:46:23"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:49:18"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:49:31"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:49:43"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"Created request ID: 9fd37984-74f1-4794-83c4-48e3dc98ab57","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 01:53:03"}
{"level":"info","message":"Claude API response received: msg_01KrQCruNwsRM4UTAVktaTTA","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Received Claude response with ID: msg_01KrQCruNwsRM4UTAVktaTTA","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Using string content directly, length: 8014","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Extracted 8014 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)NCCOC(=O)C1CC1N(C)C2=CC=CC=C2)NC(=O)OC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)(C)C(=O)C(CS(=O)NCCOC(=O)C1CC1N(C)C2=CC=CC=C2)NC(=O)OC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-24 01:53:43"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)(C)C(=O)C(CS(=O)NCCOC(=O)C1CC1N(C)C2=CC=CC=C2)NC(=O)OC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methylphenyl)ethyl]acetamide-methylphenidate","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Attempting 3D structure generation for: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methylphenyl)ethyl]acetamide-methylphenidate","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methylphenyl)ethyl]acetamide-methylphenidate - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methylphenyl)ethyl]acetamide-methylphenidate","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Validating SMILES: CC(C)NCC(O)C1=CC(=C(C=C1)O)NC(=O)C2CC3CC2CN3C(=O)C4=CC=C(C=C4)F","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)NCC(O)C1=CC(=C(C=C1)O)NC(=O)C2CC3CC2CN3C(=O)C4=CC=C(C=C4)F","service":"breaking-good-api","timestamp":"2025-04-24 01:53:44"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)NCC(O)C1=CC(=C(C=C1)O)NC(=O)C2CC3CC2CN3C(=O)C4=CC=C(C=C4)F","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Validating SMILES: R)-2-amino-1-(3,4-dihydroxyphenyl)-N-(7-fluorobenzyl)-8-azabicyclo[3.2.1]octane-2-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Attempting 3D structure generation for: R)-2-amino-1-(3,4-dihydroxyphenyl)-N-(7-fluorobenzyl)-8-azabicyclo[3.2.1]octane-2-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: R)-2-amino-1-(3,4-dihydroxyphenyl)-N-(7-fluorobenzyl)-8-azabicyclo[3.2.1]octane-2-carboxamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Added molecule with properties but without 3D structure: R)-2-amino-1-(3,4-dihydroxyphenyl)-N-(7-fluorobenzyl)-8-azabicyclo[3.2.1]octane-2-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(C=C1)C(C2CCN(CC2)CCN3C=NC4=CC=CC=C43)O","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Attempting 3D structure generation for: COC1=CC=C(C=C1)C(C2CCN(CC2)CCN3C=NC4=CC=CC=C43)O","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COC1=CC=C(C=C1)C(C2CCN(CC2)CCN3C=NC4=CC=CC=C43)O","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Saving results to file for request 9fd37984-74f1-4794-83c4-48e3dc98ab57","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 01:53:45"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 01:53:46"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 01:53:48"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:30:41"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"Created request ID: 60092018-e31b-4fb5-ad80-fbc7654a932b","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:31:11"}
{"level":"info","message":"Claude API response received: msg_01Q5TSqnLWuDGoknJeV9JVvv","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Received Claude response with ID: msg_01Q5TSqnLWuDGoknJeV9JVvv","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Using string content directly, length: 7657","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Extracted 7657 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1cc(F)c(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:50"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1cc(F)c(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:51"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1cc(F)c(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:51"}
{"level":"info","message":"Validating SMILES: CNCC1CCC(c2ccc(F)cc2)C(COC(=O)C)C1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:51"}
{"level":"info","message":"Attempting 3D structure generation for: CNCC1CCC(c2ccc(F)cc2)C(COC(=O)C)C1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:52"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CNCC1CCC(c2ccc(F)cc2)C(COC(=O)C)C1","service":"breaking-good-api","timestamp":"2025-04-24 08:31:52"}
{"level":"info","message":"Validating SMILES: 2-(((3-(4-fluorophenyl)-2-(acetoxymethyl)cyclopentyl)methyl)amino)-N-methylacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:52"}
{"level":"info","message":"Attempting 3D structure generation for: 2-(((3-(4-fluorophenyl)-2-(acetoxymethyl)cyclopentyl)methyl)amino)-N-methylacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-(((3-(4-fluorophenyl)-2-(acetoxymethyl)cyclopentyl)methyl)amino)-N-methylacetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-(((3-(4-fluorophenyl)-2-(acetoxymethyl)cyclopentyl)methyl)amino)-N-methylacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"info","message":"Validating SMILES: COc1ccc(CC2CCNC2CNC(=O)CF)cc1OC","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"info","message":"Attempting 3D structure generation for: COc1ccc(CC2CCNC2CNC(=O)CF)cc1OC","service":"breaking-good-api","timestamp":"2025-04-24 08:31:53"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1ccc(CC2CCNC2CNC(=O)CF)cc1OC","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Validating SMILES: N-((3-(3,4-dimethoxyphenethyl)pyrrolidin-2-yl)methyl)-2-fluoroacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Attempting 3D structure generation for: N-((3-(3,4-dimethoxyphenethyl)pyrrolidin-2-yl)methyl)-2-fluoroacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-((3-(3,4-dimethoxyphenethyl)pyrrolidin-2-yl)methyl)-2-fluoroacetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-((3-(3,4-dimethoxyphenethyl)pyrrolidin-2-yl)methyl)-2-fluoroacetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Saving results to file for request 60092018-e31b-4fb5-ad80-fbc7654a932b","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:31:54"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:31:55"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:31:59"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:33:15"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"Created request ID: 2167b920-cb2b-4454-9774-0bbaca6d70f3","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:36:01"}
{"level":"info","message":"Claude API response received: msg_0128U3j5PU1fYfNENBPCHDTe","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Received Claude response with ID: msg_0128U3j5PU1fYfNENBPCHDTe","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Using string content directly, length: 6502","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Extracted 6502 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Validating SMILES: CC(=O)C(CS(=O)C(c1ccccc1)N1CCN(c2ccc(F)cc2)CC1)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Attempting 3D structure generation for: CC(=O)C(CS(=O)C(c1ccccc1)N1CCN(c2ccc(F)cc2)CC1)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:34"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(=O)C(CS(=O)C(c1ccccc1)N1CCN(c2ccc(F)cc2)CC1)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:35"}
{"level":"info","message":"Validating SMILES: R)-2-[(Diphenylmethyl)sulfinyl]-N-(4-fluorophenyl)piperazine-acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:36:35"}
{"level":"info","message":"Attempting 3D structure generation for: R)-2-[(Diphenylmethyl)sulfinyl]-N-(4-fluorophenyl)piperazine-acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:36:35"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: R)-2-[(Diphenylmethyl)sulfinyl]-N-(4-fluorophenyl)piperazine-acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:36:36"}
{"level":"info","message":"Added molecule with properties but without 3D structure: R)-2-[(Diphenylmethyl)sulfinyl]-N-(4-fluorophenyl)piperazine-acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:36:36"}
{"level":"info","message":"Validating SMILES: CNCC(=O)c1ccc(cc1)Oc1ccc(cc1)OC(C)C(=O)OC","service":"breaking-good-api","timestamp":"2025-04-24 08:36:36"}
{"level":"info","message":"Attempting 3D structure generation for: CNCC(=O)c1ccc(cc1)Oc1ccc(cc1)OC(C)C(=O)OC","service":"breaking-good-api","timestamp":"2025-04-24 08:36:36"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CNCC(=O)c1ccc(cc1)Oc1ccc(cc1)OC(C)C(=O)OC","service":"breaking-good-api","timestamp":"2025-04-24 08:36:37"}
{"level":"info","message":"Validating SMILES: CCN(CC)CC(O)COc1ccc(CC(=O)c2ccc(OC)c(OC)c2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:37"}
{"level":"info","message":"Attempting 3D structure generation for: CCN(CC)CC(O)COc1ccc(CC(=O)c2ccc(OC)c(OC)c2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:37"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCN(CC)CC(O)COc1ccc(CC(=O)c2ccc(OC)c(OC)c2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Validated 4 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Saving results to file for request 2167b920-cb2b-4454-9774-0bbaca6d70f3","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:36:38"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:36:42"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:43:59"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"Created request ID: 3c432b2a-3bfa-4e15-a1c1-834d93694a25","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:44:40"}
{"level":"info","message":"Claude API response received: msg_01WmHNC3WvRVEC7XmrEwEnj8","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Received Claude response with ID: msg_01WmHNC3WvRVEC7XmrEwEnj8","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Using string content directly, length: 6595","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Extracted 6595 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)N2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1ccc(OC(=O)N2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:12"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1ccc(OC(=O)N2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:13"}
{"level":"info","message":"Validating SMILES: 1-phenyl-2-(N-methylamino)propane-4-(N-piperidinylcarbonyloxy","service":"breaking-good-api","timestamp":"2025-04-24 08:45:13"}
{"level":"info","message":"Attempting 3D structure generation for: 1-phenyl-2-(N-methylamino)propane-4-(N-piperidinylcarbonyloxy","service":"breaking-good-api","timestamp":"2025-04-24 08:45:13"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 1-phenyl-2-(N-methylamino)propane-4-(N-piperidinylcarbonyloxy - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:45:14"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 1-phenyl-2-(N-methylamino)propane-4-(N-piperidinylcarbonyloxy","service":"breaking-good-api","timestamp":"2025-04-24 08:45:14"}
{"level":"info","message":"Validating SMILES: C1CN(C(=O)C(CS(=O)(=O)c2ccccc2)(C)C(=O)N)CCN1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:14"}
{"level":"info","message":"Attempting 3D structure generation for: C1CN(C(=O)C(CS(=O)(=O)c2ccccc2)(C)C(=O)N)CCN1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:14"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): C1CN(C(=O)C(CS(=O)(=O)c2ccccc2)(C)C(=O)N)CCN1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:15"}
{"level":"info","message":"Validating SMILES: 2-(piperazin-1-yl)-2-oxo-N-methyl-N-(phenylsulfonylmethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:15"}
{"level":"info","message":"Attempting 3D structure generation for: 2-(piperazin-1-yl)-2-oxo-N-methyl-N-(phenylsulfonylmethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:15"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-(piperazin-1-yl)-2-oxo-N-methyl-N-(phenylsulfonylmethyl)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:45:16"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-(piperazin-1-yl)-2-oxo-N-methyl-N-(phenylsulfonylmethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:16"}
{"level":"info","message":"Validating SMILES: CCNC(=O)C1CCN(CCCc2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:16"}
{"level":"info","message":"Attempting 3D structure generation for: CCNC(=O)C1CCN(CCCc2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:16"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCNC(=O)C1CCN(CCCc2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:45:17"}
{"level":"info","message":"Validating SMILES: 4-(3-(4-fluorophenyl)propyl)-N-ethylpiperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:17"}
{"level":"info","message":"Attempting 3D structure generation for: 4-(3-(4-fluorophenyl)propyl)-N-ethylpiperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:17"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 4-(3-(4-fluorophenyl)propyl)-N-ethylpiperidine-1-carboxamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 4-(3-(4-fluorophenyl)propyl)-N-ethylpiperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Validated 6 molecules (Props & 3D) out of 6 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Successfully extracted and validated 6 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Saving results to file for request 3c432b2a-3bfa-4e15-a1c1-834d93694a25","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:45:18"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:45:21"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"Created request ID: 0c137892-f2c0-47d6-88c3-1f97c0e5424c","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:48:18"}
{"level":"info","message":"Claude API response received: msg_01Qno5JP5y4i2ja2yQgAKVkp","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Received Claude response with ID: msg_01Qno5JP5y4i2ja2yQgAKVkp","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Using string content directly, length: 7533","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Extracted 7533 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Validating SMILES: C(=O)(NC(=O)CS)C1=C(C=CC(=C1)OC)S(=O)CC(=O)N1CCN(CC1)CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Attempting 3D structure generation for: C(=O)(NC(=O)CS)C1=C(C=CC(=C1)OC)S(=O)CC(=O)N1CCN(CC1)CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:48:56"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): C(=O)(NC(=O)CS)C1=C(C=CC(=C1)OC)S(=O)CC(=O)N1CCN(CC1)CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:48:57"}
{"level":"info","message":"Validating SMILES: 2-[(4-methoxyphenyl)sulfinyl]-N-(2-oxo-2-sulfanylethyl)-N","service":"breaking-good-api","timestamp":"2025-04-24 08:48:57"}
{"level":"info","message":"Attempting 3D structure generation for: 2-[(4-methoxyphenyl)sulfinyl]-N-(2-oxo-2-sulfanylethyl)-N","service":"breaking-good-api","timestamp":"2025-04-24 08:48:57"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-[(4-methoxyphenyl)sulfinyl]-N-(2-oxo-2-sulfanylethyl)-N - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:48:58"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-[(4-methoxyphenyl)sulfinyl]-N-(2-oxo-2-sulfanylethyl)-N","service":"breaking-good-api","timestamp":"2025-04-24 08:48:58"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(O)COc1ccc(cc1)C(=O)NCCCN1CCN(CC1)C1=CC=C(C=C1)F","service":"breaking-good-api","timestamp":"2025-04-24 08:48:58"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)(C)NCC(O)COc1ccc(cc1)C(=O)NCCCN1CCN(CC1)C1=CC=C(C=C1)F","service":"breaking-good-api","timestamp":"2025-04-24 08:48:58"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)(C)NCC(O)COc1ccc(cc1)C(=O)NCCCN1CCN(CC1)C1=CC=C(C=C1)F","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Validating SMILES: N-(3-(4-(4-fluorophenyl)piperazin-1-yl)propyl)-4-(2-hydroxy-3-(tert-butylamino)propoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Attempting 3D structure generation for: N-(3-(4-(4-fluorophenyl)piperazin-1-yl)propyl)-4-(2-hydroxy-3-(tert-butylamino)propoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(3-(4-(4-fluorophenyl)piperazin-1-yl)propyl)-4-(2-hydroxy-3-(tert-butylamino)propoxy)benzamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(3-(4-(4-fluorophenyl)piperazin-1-yl)propyl)-4-(2-hydroxy-3-(tert-butylamino)propoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Validating SMILES: COc1ccc(cc1)C(C)NC(=O)C1CCN(CC1)CCCOc1ccc(cc1)NS(=O)(=O)c1ccc(cc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-24 08:48:59"}
{"level":"info","message":"Attempting 3D structure generation for: COc1ccc(cc1)C(C)NC(=O)C1CCN(CC1)CCCOc1ccc(cc1)NS(=O)(=O)c1ccc(cc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-24 08:49:00"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1ccc(cc1)C(C)NC(=O)C1CCN(CC1)CCCOc1ccc(cc1)NS(=O)(=O)c1ccc(cc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Validating SMILES: N-(1-(4-methoxyphenyl)ethyl)-4-(3-(4-(N-(4-(dimethylamino)phenylsulfonamido)phenoxy)propyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Attempting 3D structure generation for: N-(1-(4-methoxyphenyl)ethyl)-4-(3-(4-(N-(4-(dimethylamino)phenylsulfonamido)phenoxy)propyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(1-(4-methoxyphenyl)ethyl)-4-(3-(4-(N-(4-(dimethylamino)phenylsulfonamido)phenoxy)propyl)piperidine-1-carboxamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(1-(4-methoxyphenyl)ethyl)-4-(3-(4-(N-(4-(dimethylamino)phenylsulfonamido)phenoxy)propyl)piperidine-1-carboxamide","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Validated 6 molecules (Props & 3D) out of 6 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Successfully extracted and validated 6 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Saving results to file for request 0c137892-f2c0-47d6-88c3-1f97c0e5424c","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:49:01"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:49:02"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:49:04"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:49:06"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:49:37"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:49:42"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:53:39"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"Created request ID: 28ef6724-407d-4752-adc0-01b71f780316","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 08:57:24"}
{"level":"info","message":"Claude API response received: msg_01VfC1aF46WVHtCuUUSaCush","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Received Claude response with ID: msg_01VfC1aF46WVHtCuUUSaCush","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Using string content directly, length: 6757","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Extracted 6757 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Validating SMILES: CC(=O)NC(CS(=O)C(C)(C)C)C(=O)NCCCCN1CCN(C(=O)c2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:57:59"}
{"level":"info","message":"Attempting 3D structure generation for: CC(=O)NC(CS(=O)C(C)(C)C)C(=O)NCCCCN1CCN(C(=O)c2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:00"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(=O)NC(CS(=O)C(C)(C)C)C(=O)NCCCCN1CCN(C(=O)c2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:01"}
{"level":"info","message":"Validating SMILES: N-(2-(methylsulfinyl)-1-(4-(4-(4-fluorobenzoyl)piperazin-1-yl)butylcarbamoyl)ethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:58:01"}
{"level":"info","message":"Attempting 3D structure generation for: N-(2-(methylsulfinyl)-1-(4-(4-(4-fluorobenzoyl)piperazin-1-yl)butylcarbamoyl)ethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:58:01"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(2-(methylsulfinyl)-1-(4-(4-(4-fluorobenzoyl)piperazin-1-yl)butylcarbamoyl)ethyl)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 08:58:02"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(2-(methylsulfinyl)-1-(4-(4-(4-fluorobenzoyl)piperazin-1-yl)butylcarbamoyl)ethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 08:58:02"}
{"level":"info","message":"Validating SMILES: COC(=O)C1C(OC(=O)C)C2CCC(C2)N1CC1=CC=C(O)C(O)=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:02"}
{"level":"info","message":"Attempting 3D structure generation for: COC(=O)C1C(OC(=O)C)C2CCC(C2)N1CC1=CC=C(O)C(O)=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:02"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COC(=O)C1C(OC(=O)C)C2CCC(C2)N1CC1=CC=C(O)C(O)=C1","service":"breaking-good-api","timestamp":"2025-04-24 08:58:03"}
{"level":"info","message":"Validating SMILES: CCCN1CCC(NC(=O)OC)CC1C1=CC(OC)=C(OC)C=C1N1CCCCC1=O","service":"breaking-good-api","timestamp":"2025-04-24 08:58:03"}
{"level":"info","message":"Attempting 3D structure generation for: CCCN1CCC(NC(=O)OC)CC1C1=CC(OC)=C(OC)C=C1N1CCCCC1=O","service":"breaking-good-api","timestamp":"2025-04-24 08:58:03"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCCN1CCC(NC(=O)OC)CC1C1=CC(OC)=C(OC)C=C1N1CCCCC1=O","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Validated 4 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Saving results to file for request 28ef6724-407d-4752-adc0-01b71f780316","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 08:58:04"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 08:58:05"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:58:08"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:58:09"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:59:41"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 08:59:53"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:00:02"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:00:11"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:06:52"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"Created request ID: b7b64b9a-f8a6-4594-a95e-2b5282b9ed08","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:07:22"}
{"level":"info","message":"Claude API response received: msg_01LCwtwsAXB4Fw4zrcgSCcZN","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Received Claude response with ID: msg_01LCwtwsAXB4Fw4zrcgSCcZN","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Using string content directly, length: 7252","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Extracted 7252 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)c1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:55"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC)C(=O)c1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:56"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC)C(=O)c1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:56"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(F)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:56"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1ccc(F)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:57"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1ccc(F)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:07:57"}
{"level":"info","message":"Validating SMILES: CC(CS(=O)C(c1ccccc1)c1ccccc1)N","service":"breaking-good-api","timestamp":"2025-04-24 09:07:57"}
{"level":"info","message":"Attempting 3D structure generation for: CC(CS(=O)C(c1ccccc1)c1ccccc1)N","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(CS(=O)C(c1ccccc1)c1ccccc1)N","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Saving results to file for request b7b64b9a-f8a6-4594-a95e-2b5282b9ed08","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 09:07:58"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 09:07:59"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:08:03"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:08:22"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:16:19"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"Created request ID: 03b2d02c-6e0e-461c-92e8-73e2f435bad5","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:16:54"}
{"level":"info","message":"Claude API response received: msg_01GvBiE99Sxqhfwh3bd1pHwx","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Received Claude response with ID: msg_01GvBiE99Sxqhfwh3bd1pHwx","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Using string content directly, length: 7044","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Extracted 7044 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Validating SMILES: COC1=C(OC)C=C2C(=C1)C(=O)C(C(=O)N3CCCC3)=C(N)C2=O","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Attempting 3D structure generation for: COC1=C(OC)C=C2C(=C1)C(=O)C(C(=O)N3CCCC3)=C(N)C2=O","service":"breaking-good-api","timestamp":"2025-04-24 09:17:31"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COC1=C(OC)C=C2C(=C1)C(=O)C(C(=O)N3CCCC3)=C(N)C2=O","service":"breaking-good-api","timestamp":"2025-04-24 09:17:32"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C1=C(C)NC(=C1C2=CC(OC)=C(OC)C=C2)C(=O)OCC3CC3","service":"breaking-good-api","timestamp":"2025-04-24 09:17:32"}
{"level":"info","message":"Attempting 3D structure generation for: CCOC(=O)C1=C(C)NC(=C1C2=CC(OC)=C(OC)C=C2)C(=O)OCC3CC3","service":"breaking-good-api","timestamp":"2025-04-24 09:17:32"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CCOC(=O)C1=C(C)NC(=C1C2=CC(OC)=C(OC)C=C2)C(=O)OCC3CC3","service":"breaking-good-api","timestamp":"2025-04-24 09:17:33"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CC1)C2=CC(=CC=C2)Oc3cncnc3C#N","service":"breaking-good-api","timestamp":"2025-04-24 09:17:33"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC(=O)C1CC1)C2=CC(=CC=C2)Oc3cncnc3C#N","service":"breaking-good-api","timestamp":"2025-04-24 09:17:33"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC(=O)C1CC1)C2=CC(=CC=C2)Oc3cncnc3C#N","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Saving results to file for request 03b2d02c-6e0e-461c-92e8-73e2f435bad5","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 09:17:34"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 09:17:35"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:17:39"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-24 09:17:48"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"I","105":"'","106":"m","107":" ","108":"h","109":"e","11":"r","110":"r","111":"e","112":" ","113":"t","114":"o","115":" ","116":"h","117":"e","118":"l","119":"p","12":"o","120":" ","121":"w","122":"i","123":"t","124":"h","125":" ","126":"d","127":"r","128":"u","129":"g","13":"l","130":" ","131":"d","132":"e","133":"s","134":"i","135":"g","136":"n","137":".","138":" ","139":"C","14":"e","140":"o","141":"n","142":"t","143":"e","144":"x","145":"t","146":":","147":" ","148":"D","149":"i","15":"\"","150":"s","151":"c","152":"u","153":"s","154":"s","155":"i","156":"n","157":"g","158":" ","159":"M","16":":","160":"o","161":"l","162":"e","163":"c","164":"u","165":"l","166":"e","167":" ","168":"C","169":"a","17":" ","170":"n","171":"d","172":"i","173":"d","174":"a","175":"t","176":"e","177":" ","178":"1","179":" ","18":"\"","180":"(","181":"S","182":"M","183":"I","184":"L","185":"E","186":"S","187":":","188":" ","189":"C","19":"a","190":"O","191":"C","192":"1","193":"=","194":"C","195":"(","196":"O","197":"C","198":")","199":"C","2":" ","20":"s","200":"=","201":"C","202":"2","203":"C","204":"(","205":"=","206":"C","207":"1","208":")","209":"C","21":"s","210":"(","211":"=","212":"O","213":")","214":"C","215":"(","216":"C","217":"(","218":"=","219":"O","22":"i","220":")","221":"N","222":"3","223":"C","224":"C","225":"C","226":"C","227":"3","228":")","229":"=","23":"s","230":"C","231":"(","232":"N","233":")","234":"C","235":"2","236":"=","237":"O","238":")","239":"\"","24":"t","240":"\n","241":" ","242":" ","243":" ","244":" ","245":" ","246":" ","247":"}","248":"\n","249":" ","25":"a","250":" ","251":" ","252":" ","253":"]","254":"\n","255":" ","256":" ","257":"}","258":",","259":"\n","26":"n","260":" ","261":" ","262":"{","263":"\n","264":" ","265":" ","266":" ","267":" ","268":"\"","269":"r","27":"t","270":"o","271":"l","272":"e","273":"\"","274":":","275":" ","276":"\"","277":"u","278":"s","279":"e","28":"\"","280":"r","281":"\"","282":",","283":"\n","284":" ","285":" ","286":" ","287":" ","288":"\"","289":"c","29":",","290":"o","291":"n","292":"t","293":"e","294":"n","295":"t","296":"\"","297":":","298":" ","299":"[","3":" ","30":"\n","300":"\n","301":" ","302":" ","303":" ","304":" ","305":" ","306":" ","307":"{","308":"\n","309":" ","31":" ","310":" ","311":" ","312":" ","313":" ","314":" ","315":" ","316":" ","317":"\"","318":"t","319":"y","32":" ","320":"p","321":"e","322":"\"","323":":","324":" ","325":"\"","326":"t","327":"e","328":"x","329":"t","33":" ","330":"\"","331":",","332":"\n","333":" ","334":" ","335":" ","336":" ","337":" ","338":" ","339":" ","34":" ","340":" ","341":"\"","342":"t","343":"e","344":"x","345":"t","346":"\"","347":":","348":" ","349":"\"","35":"\"","350":"[","351":"C","352":"u","353":"r","354":"r","355":"e","356":"n","357":"t","358":" ","359":"F","36":"c","360":"o","361":"c","362":"u","363":"s","364":":","365":" ","366":"M","367":"o","368":"l","369":"e","37":"o","370":"c","371":"u","372":"l","373":"e","374":" ","375":"C","376":"a","377":"n","378":"d","379":"i","38":"n","380":"d","381":"a","382":"t","383":"e","384":" ","385":"1","386":",","387":" ","388":"S","389":"M","39":"t","390":"I","391":"L","392":"E","393":"S","394":":","395":" ","396":"C","397":"O","398":"C","399":"1","4":"{","40":"e","400":"=","401":"C","402":"(","403":"O","404":"C","405":")","406":"C","407":"=","408":"C","409":"2","41":"n","410":"C","411":"(","412":"=","413":"C","414":"1","415":")","416":"C","417":"(","418":"=","419":"O","42":"t","420":")","421":"C","422":"(","423":"C","424":"(","425":"=","426":"O","427":")","428":"N","429":"3","43":"\"","430":"C","431":"C","432":"C","433":"C","434":"3","435":")","436":"=","437":"C","438":"(","439":"N","44":":","440":")","441":"C","442":"2","443":"=","444":"O","445":"]","446":"\"","447":"\n","448":" ","449":" ","45":" ","450":" ","451":" ","452":" ","453":" ","454":"}","455":"\n","456":" ","457":" ","458":" ","459":" ","46":"[","460":"]","461":"\n","462":" ","463":" ","464":"}","465":",","466":"\n","467":" ","468":" ","469":"{","47":"\n","470":"\n","471":" ","472":" ","473":" ","474":" ","475":"\"","476":"r","477":"o","478":"l","479":"e","48":" ","480":"\"","481":":","482":" ","483":"\"","484":"u","485":"s","486":"e","487":"r","488":"\"","489":",","49":" ","490":"\n","491":" ","492":" ","493":" ","494":" ","495":"\"","496":"c","497":"o","498":"n","499":"t","5":"\n","50":" ","500":"e","501":"n","502":"t","503":"\"","504":":","505":" ","506":"[","507":"\n","508":" ","509":" ","51":" ","510":" ","511":" ","512":" ","513":" ","514":"{","515":"\n","516":" ","517":" ","518":" ","519":" ","52":" ","520":" ","521":" ","522":" ","523":" ","524":"\"","525":"t","526":"y","527":"p","528":"e","529":"\"","53":" ","530":":","531":" ","532":"\"","533":"t","534":"e","535":"x","536":"t","537":"\"","538":",","539":"\n","54":"{","540":" ","541":" ","542":" ","543":" ","544":" ","545":" ","546":" ","547":" ","548":"\"","549":"t","55":"\n","550":"e","551":"x","552":"t","553":"\"","554":":","555":" ","556":"\"","557":"T","558":"e","559":"l","56":" ","560":"l","561":" ","562":"m","563":"e","564":" ","565":"m","566":"o","567":"r","568":"e","569":"\"","57":" ","570":"\n","571":" ","572":" ","573":" ","574":" ","575":" ","576":" ","577":"}","578":"\n","579":" ","58":" ","580":" ","581":" ","582":" ","583":"]","584":"\n","585":" ","586":" ","587":"}","588":"\n","589":"]","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-24 09:17:48"}
{"level":"info","message":"Sending messages to Anthropic API...","service":"breaking-good-api","timestamp":"2025-04-24 09:17:48"}
{"level":"error","message":"Cannot read properties of undefined (reading 'create')","service":"breaking-good-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:863:46\n    at Layer.handle [as handle_request] (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at requireApiKey (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\ai.js:44:12)\n    at Layer.handle [as handle_request] (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)","timestamp":"2025-04-24 09:17:48"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:19:10"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:21:41"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"Created request ID: 22e7a9f6-a31f-4155-8970-f227dcc72df9","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 09:22:06"}
{"level":"info","message":"Claude API response received: msg_01AdPDfJEpqRCXWjzfbRYSEX","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Received Claude response with ID: msg_01AdPDfJEpqRCXWjzfbRYSEX","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Using string content directly, length: 8658","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Extracted 8658 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(F)(F)F)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:49"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1ccc(OC(F)(F)F)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:50"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1ccc(OC(F)(F)F)c(O)c1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:50"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(C)N)c(OC)cc1OCC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 09:22:50"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(CC(C)N)c(OC)cc1OCC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 09:22:51"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(CC(C)N)c(OC)cc1OCC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 09:22:51"}
{"level":"info","message":"Validating SMILES: COc1ccc(C2=NCCN2CCN3CCN(Cc4ccccc4F)CC3)cc1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:51"}
{"level":"info","message":"Attempting 3D structure generation for: COc1ccc(C2=NCCN2CCN3CCN(Cc4ccccc4F)CC3)cc1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1ccc(C2=NCCN2CCN3CCN(Cc4ccccc4F)CC3)cc1","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Saving results to file for request 22e7a9f6-a31f-4155-8970-f227dcc72df9","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 09:22:52"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 09:22:53"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:22:56"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 09:23:12"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-24 09:23:41"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"I","105":"'","106":"m","107":" ","108":"h","109":"e","11":"r","110":"r","111":"e","112":" ","113":"t","114":"o","115":" ","116":"h","117":"e","118":"l","119":"p","12":"o","120":" ","121":"w","122":"i","123":"t","124":"h","125":" ","126":"d","127":"r","128":"u","129":"g","13":"l","130":" ","131":"d","132":"e","133":"s","134":"i","135":"g","136":"n","137":".","138":" ","139":"C","14":"e","140":"o","141":"n","142":"t","143":"e","144":"x","145":"t","146":":","147":" ","148":"D","149":"i","15":"\"","150":"s","151":"c","152":"u","153":"s","154":"s","155":"i","156":"n","157":"g","158":" ","159":"M","16":":","160":"o","161":"l","162":"e","163":"c","164":"u","165":"l","166":"e","167":" ","168":"C","169":"a","17":" ","170":"n","171":"d","172":"i","173":"d","174":"a","175":"t","176":"e","177":" ","178":"2","179":" ","18":"\"","180":"(","181":"S","182":"M","183":"I","184":"L","185":"E","186":"S","187":":","188":" ","189":"C","19":"a","190":"O","191":"c","192":"1","193":"c","194":"c","195":"(","196":"C","197":"C","198":"(","199":"C","2":" ","20":"s","200":")","201":"N","202":")","203":"c","204":"(","205":"O","206":"C","207":")","208":"c","209":"c","21":"s","210":"1","211":"O","212":"C","213":"C","214":"(","215":"F","216":")","217":"(","218":"F","219":")","22":"i","220":"F","221":")","222":"\"","223":"\n","224":" ","225":" ","226":" ","227":" ","228":" ","229":" ","23":"s","230":"}","231":"\n","232":" ","233":" ","234":" ","235":" ","236":"]","237":"\n","238":" ","239":" ","24":"t","240":"}","241":",","242":"\n","243":" ","244":" ","245":"{","246":"\n","247":" ","248":" ","249":" ","25":"a","250":" ","251":"\"","252":"r","253":"o","254":"l","255":"e","256":"\"","257":":","258":" ","259":"\"","26":"n","260":"u","261":"s","262":"e","263":"r","264":"\"","265":",","266":"\n","267":" ","268":" ","269":" ","27":"t","270":" ","271":"\"","272":"c","273":"o","274":"n","275":"t","276":"e","277":"n","278":"t","279":"\"","28":"\"","280":":","281":" ","282":"[","283":"\n","284":" ","285":" ","286":" ","287":" ","288":" ","289":" ","29":",","290":"{","291":"\n","292":" ","293":" ","294":" ","295":" ","296":" ","297":" ","298":" ","299":" ","3":" ","30":"\n","300":"\"","301":"t","302":"y","303":"p","304":"e","305":"\"","306":":","307":" ","308":"\"","309":"t","31":" ","310":"e","311":"x","312":"t","313":"\"","314":",","315":"\n","316":" ","317":" ","318":" ","319":" ","32":" ","320":" ","321":" ","322":" ","323":" ","324":"\"","325":"t","326":"e","327":"x","328":"t","329":"\"","33":" ","330":":","331":" ","332":"\"","333":"[","334":"C","335":"u","336":"r","337":"r","338":"e","339":"n","34":" ","340":"t","341":" ","342":"F","343":"o","344":"c","345":"u","346":"s","347":":","348":" ","349":"M","35":"\"","350":"o","351":"l","352":"e","353":"c","354":"u","355":"l","356":"e","357":" ","358":"C","359":"a","36":"c","360":"n","361":"d","362":"i","363":"d","364":"a","365":"t","366":"e","367":" ","368":"2","369":",","37":"o","370":" ","371":"S","372":"M","373":"I","374":"L","375":"E","376":"S","377":":","378":" ","379":"C","38":"n","380":"O","381":"c","382":"1","383":"c","384":"c","385":"(","386":"C","387":"C","388":"(","389":"C","39":"t","390":")","391":"N","392":")","393":"c","394":"(","395":"O","396":"C","397":")","398":"c","399":"c","4":"{","40":"e","400":"1","401":"O","402":"C","403":"C","404":"(","405":"F","406":")","407":"(","408":"F","409":")","41":"n","410":"F","411":"]","412":"\"","413":"\n","414":" ","415":" ","416":" ","417":" ","418":" ","419":" ","42":"t","420":"}","421":"\n","422":" ","423":" ","424":" ","425":" ","426":"]","427":"\n","428":" ","429":" ","43":"\"","430":"}","431":",","432":"\n","433":" ","434":" ","435":"{","436":"\n","437":" ","438":" ","439":" ","44":":","440":" ","441":"\"","442":"r","443":"o","444":"l","445":"e","446":"\"","447":":","448":" ","449":"\"","45":" ","450":"u","451":"s","452":"e","453":"r","454":"\"","455":",","456":"\n","457":" ","458":" ","459":" ","46":"[","460":" ","461":"\"","462":"c","463":"o","464":"n","465":"t","466":"e","467":"n","468":"t","469":"\"","47":"\n","470":":","471":" ","472":"[","473":"\n","474":" ","475":" ","476":" ","477":" ","478":" ","479":" ","48":" ","480":"{","481":"\n","482":" ","483":" ","484":" ","485":" ","486":" ","487":" ","488":" ","489":" ","49":" ","490":"\"","491":"t","492":"y","493":"p","494":"e","495":"\"","496":":","497":" ","498":"\"","499":"t","5":"\n","50":" ","500":"e","501":"x","502":"t","503":"\"","504":",","505":"\n","506":" ","507":" ","508":" ","509":" ","51":" ","510":" ","511":" ","512":" ","513":" ","514":"\"","515":"t","516":"e","517":"x","518":"t","519":"\"","52":" ","520":":","521":" ","522":"\"","523":"T","524":"e","525":"l","526":"l","527":" ","528":"m","529":"e","53":" ","530":" ","531":"m","532":"o","533":"r","534":"e","535":".","536":"\"","537":"\n","538":" ","539":" ","54":"{","540":" ","541":" ","542":" ","543":" ","544":"}","545":"\n","546":" ","547":" ","548":" ","549":" ","55":"\n","550":"]","551":"\n","552":" ","553":" ","554":"}","555":"\n","556":"]","56":" ","57":" ","58":" ","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-24 09:23:41"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-24 09:23:41"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-24 09:23:47"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-24 09:24:11"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"I","105":"'","106":"m","107":" ","108":"h","109":"e","11":"r","110":"r","111":"e","112":" ","113":"t","114":"o","115":" ","116":"h","117":"e","118":"l","119":"p","12":"o","120":" ","121":"w","122":"i","123":"t","124":"h","125":" ","126":"d","127":"r","128":"u","129":"g","13":"l","130":" ","131":"d","132":"e","133":"s","134":"i","135":"g","136":"n","137":".","138":" ","139":"C","14":"e","140":"o","141":"n","142":"t","143":"e","144":"x","145":"t","146":":","147":" ","148":"D","149":"i","15":"\"","150":"s","151":"c","152":"u","153":"s","154":"s","155":"i","156":"n","157":"g","158":" ","159":"M","16":":","160":"o","161":"l","162":"e","163":"c","164":"u","165":"l","166":"e","167":" ","168":"C","169":"a","17":" ","170":"n","171":"d","172":"i","173":"d","174":"a","175":"t","176":"e","177":" ","178":"2","179":" ","18":"\"","180":"(","181":"S","182":"M","183":"I","184":"L","185":"E","186":"S","187":":","188":" ","189":"C","19":"a","190":"O","191":"c","192":"1","193":"c","194":"c","195":"(","196":"C","197":"C","198":"(","199":"C","2":" ","20":"s","200":")","201":"N","202":")","203":"c","204":"(","205":"O","206":"C","207":")","208":"c","209":"c","21":"s","210":"1","211":"O","212":"C","213":"C","214":"(","215":"F","216":")","217":"(","218":"F","219":")","22":"i","220":"F","221":")","222":"\"","223":"\n","224":" ","225":" ","226":" ","227":" ","228":" ","229":" ","23":"s","230":"}","231":"\n","232":" ","233":" ","234":" ","235":" ","236":"]","237":"\n","238":" ","239":" ","24":"t","240":"}","241":",","242":"\n","243":" ","244":" ","245":"{","246":"\n","247":" ","248":" ","249":" ","25":"a","250":" ","251":"\"","252":"r","253":"o","254":"l","255":"e","256":"\"","257":":","258":" ","259":"\"","26":"n","260":"u","261":"s","262":"e","263":"r","264":"\"","265":",","266":"\n","267":" ","268":" ","269":" ","27":"t","270":" ","271":"\"","272":"c","273":"o","274":"n","275":"t","276":"e","277":"n","278":"t","279":"\"","28":"\"","280":":","281":" ","282":"[","283":"\n","284":" ","285":" ","286":" ","287":" ","288":" ","289":" ","29":",","290":"{","291":"\n","292":" ","293":" ","294":" ","295":" ","296":" ","297":" ","298":" ","299":" ","3":" ","30":"\n","300":"\"","301":"t","302":"y","303":"p","304":"e","305":"\"","306":":","307":" ","308":"\"","309":"t","31":" ","310":"e","311":"x","312":"t","313":"\"","314":",","315":"\n","316":" ","317":" ","318":" ","319":" ","32":" ","320":" ","321":" ","322":" ","323":" ","324":"\"","325":"t","326":"e","327":"x","328":"t","329":"\"","33":" ","330":":","331":" ","332":"\"","333":"T","334":"e","335":"l","336":"l","337":" ","338":"m","339":"e","34":" ","340":" ","341":"m","342":"o","343":"r","344":"e","345":".","346":"\"","347":"\n","348":" ","349":" ","35":"\"","350":" ","351":" ","352":" ","353":" ","354":"}","355":"\n","356":" ","357":" ","358":" ","359":" ","36":"c","360":"]","361":"\n","362":" ","363":" ","364":"}","365":",","366":"\n","367":" ","368":" ","369":"{","37":"o","370":"\n","371":" ","372":" ","373":" ","374":" ","375":"\"","376":"r","377":"o","378":"l","379":"e","38":"n","380":"\"","381":":","382":" ","383":"\"","384":"a","385":"s","386":"s","387":"i","388":"s","389":"t","39":"t","390":"a","391":"n","392":"t","393":"\"","394":",","395":"\n","396":" ","397":" ","398":" ","399":" ","4":"{","40":"e","400":"\"","401":"c","402":"o","403":"n","404":"t","405":"e","406":"n","407":"t","408":"\"","409":":","41":"n","410":" ","411":"[","412":"\n","413":" ","414":" ","415":" ","416":" ","417":" ","418":" ","419":"{","42":"t","420":"\n","421":" ","422":" ","423":" ","424":" ","425":" ","426":" ","427":" ","428":" ","429":"\"","43":"\"","430":"t","431":"y","432":"p","433":"e","434":"\"","435":":","436":" ","437":"\"","438":"t","439":"e","44":":","440":"x","441":"t","442":"\"","443":",","444":"\n","445":" ","446":" ","447":" ","448":" ","449":" ","45":" ","450":" ","451":" ","452":" ","453":"\"","454":"t","455":"e","456":"x","457":"t","458":"\"","459":":","46":"[","460":" ","461":"\"","462":"E","463":"r","464":"r","465":"o","466":"r","467":":","468":" ","469":"I","47":"\n","470":"n","471":"v","472":"a","473":"l","474":"i","475":"d","476":" ","477":"r","478":"e","479":"s","48":" ","480":"p","481":"o","482":"n","483":"s","484":"e","485":" ","486":"f","487":"o","488":"r","489":"m","49":" ","490":"a","491":"t","492":" ","493":"f","494":"r","495":"o","496":"m","497":" ","498":"A","499":"P","5":"\n","50":" ","500":"I","501":"\"","502":"\n","503":" ","504":" ","505":" ","506":" ","507":" ","508":" ","509":"}","51":" ","510":"\n","511":" ","512":" ","513":" ","514":" ","515":"]","516":"\n","517":" ","518":" ","519":"}","52":" ","520":",","521":"\n","522":" ","523":" ","524":"{","525":"\n","526":" ","527":" ","528":" ","529":" ","53":" ","530":"\"","531":"r","532":"o","533":"l","534":"e","535":"\"","536":":","537":" ","538":"\"","539":"u","54":"{","540":"s","541":"e","542":"r","543":"\"","544":",","545":"\n","546":" ","547":" ","548":" ","549":" ","55":"\n","550":"\"","551":"c","552":"o","553":"n","554":"t","555":"e","556":"n","557":"t","558":"\"","559":":","56":" ","560":" ","561":"[","562":"\n","563":" ","564":" ","565":" ","566":" ","567":" ","568":" ","569":"{","57":" ","570":"\n","571":" ","572":" ","573":" ","574":" ","575":" ","576":" ","577":" ","578":" ","579":"\"","58":" ","580":"t","581":"y","582":"p","583":"e","584":"\"","585":":","586":" ","587":"\"","588":"t","589":"e","59":" ","590":"x","591":"t","592":"\"","593":",","594":"\n","595":" ","596":" ","597":" ","598":" ","599":" ","6":" ","60":" ","600":" ","601":" ","602":" ","603":"\"","604":"t","605":"e","606":"x","607":"t","608":"\"","609":":","61":" ","610":" ","611":"\"","612":"[","613":"C","614":"u","615":"r","616":"r","617":"e","618":"n","619":"t","62":" ","620":" ","621":"F","622":"o","623":"c","624":"u","625":"s","626":":","627":" ","628":"M","629":"o","63":" ","630":"l","631":"e","632":"c","633":"u","634":"l","635":"e","636":" ","637":"C","638":"a","639":"n","64":"\"","640":"d","641":"i","642":"d","643":"a","644":"t","645":"e","646":" ","647":"2","648":",","649":" ","65":"t","650":"S","651":"M","652":"I","653":"L","654":"E","655":"S","656":":","657":" ","658":"C","659":"O","66":"y","660":"c","661":"1","662":"c","663":"c","664":"(","665":"C","666":"C","667":"(","668":"C","669":")","67":"p","670":"N","671":")","672":"c","673":"(","674":"O","675":"C","676":")","677":"c","678":"c","679":"1","68":"e","680":"O","681":"C","682":"C","683":"(","684":"F","685":")","686":"(","687":"F","688":")","689":"F","69":"\"","690":"]","691":"\"","692":"\n","693":" ","694":" ","695":" ","696":" ","697":" ","698":" ","699":"}","7":" ","70":":","700":"\n","701":" ","702":" ","703":" ","704":" ","705":"]","706":"\n","707":" ","708":" ","709":"}","71":" ","710":",","711":"\n","712":" ","713":" ","714":"{","715":"\n","716":" ","717":" ","718":" ","719":" ","72":"\"","720":"\"","721":"r","722":"o","723":"l","724":"e","725":"\"","726":":","727":" ","728":"\"","729":"u","73":"t","730":"s","731":"e","732":"r","733":"\"","734":",","735":"\n","736":" ","737":" ","738":" ","739":" ","74":"e","740":"\"","741":"c","742":"o","743":"n","744":"t","745":"e","746":"n","747":"t","748":"\"","749":":","75":"x","750":" ","751":"[","752":"\n","753":" ","754":" ","755":" ","756":" ","757":" ","758":" ","759":"{","76":"t","760":"\n","761":" ","762":" ","763":" ","764":" ","765":" ","766":" ","767":" ","768":" ","769":"\"","77":"\"","770":"t","771":"y","772":"p","773":"e","774":"\"","775":":","776":" ","777":"\"","778":"t","779":"e","78":",","780":"x","781":"t","782":"\"","783":",","784":"\n","785":" ","786":" ","787":" ","788":" ","789":" ","79":"\n","790":" ","791":" ","792":" ","793":"\"","794":"t","795":"e","796":"x","797":"t","798":"\"","799":":","8":" ","80":" ","800":" ","801":"\"","802":"H","803":"e","804":"l","805":"l","806":"o","807":"\"","808":"\n","809":" ","81":" ","810":" ","811":" ","812":" ","813":" ","814":" ","815":"}","816":"\n","817":" ","818":" ","819":" ","82":" ","820":" ","821":"]","822":"\n","823":" ","824":" ","825":"}","826":"\n","827":"]","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-24 09:24:11"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-24 09:24:11"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-24 09:24:16"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-24 09:27:21"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"I","105":"'","106":"m","107":" ","108":"h","109":"e","11":"r","110":"r","111":"e","112":" ","113":"t","114":"o","115":" ","116":"h","117":"e","118":"l","119":"p","12":"o","120":" ","121":"w","122":"i","123":"t","124":"h","125":" ","126":"d","127":"r","128":"u","129":"g","13":"l","130":" ","131":"d","132":"e","133":"s","134":"i","135":"g","136":"n","137":".","138":" ","139":"C","14":"e","140":"o","141":"n","142":"t","143":"e","144":"x","145":"t","146":":","147":" ","148":"D","149":"i","15":"\"","150":"s","151":"c","152":"u","153":"s","154":"s","155":"i","156":"n","157":"g","158":" ","159":"M","16":":","160":"o","161":"l","162":"e","163":"c","164":"u","165":"l","166":"e","167":" ","168":"C","169":"a","17":" ","170":"n","171":"d","172":"i","173":"d","174":"a","175":"t","176":"e","177":" ","178":"2","179":" ","18":"\"","180":"(","181":"S","182":"M","183":"I","184":"L","185":"E","186":"S","187":":","188":" ","189":"C","19":"a","190":"O","191":"c","192":"1","193":"c","194":"c","195":"(","196":"C","197":"C","198":"(","199":"C","2":" ","20":"s","200":")","201":"N","202":")","203":"c","204":"(","205":"O","206":"C","207":")","208":"c","209":"c","21":"s","210":"1","211":"O","212":"C","213":"C","214":"(","215":"F","216":")","217":"(","218":"F","219":")","22":"i","220":"F","221":")","222":"\"","223":"\n","224":" ","225":" ","226":" ","227":" ","228":" ","229":" ","23":"s","230":"}","231":"\n","232":" ","233":" ","234":" ","235":" ","236":"]","237":"\n","238":" ","239":" ","24":"t","240":"}","241":",","242":"\n","243":" ","244":" ","245":"{","246":"\n","247":" ","248":" ","249":" ","25":"a","250":" ","251":"\"","252":"r","253":"o","254":"l","255":"e","256":"\"","257":":","258":" ","259":"\"","26":"n","260":"u","261":"s","262":"e","263":"r","264":"\"","265":",","266":"\n","267":" ","268":" ","269":" ","27":"t","270":" ","271":"\"","272":"c","273":"o","274":"n","275":"t","276":"e","277":"n","278":"t","279":"\"","28":"\"","280":":","281":" ","282":"[","283":"\n","284":" ","285":" ","286":" ","287":" ","288":" ","289":" ","29":",","290":"{","291":"\n","292":" ","293":" ","294":" ","295":" ","296":" ","297":" ","298":" ","299":" ","3":" ","30":"\n","300":"\"","301":"t","302":"y","303":"p","304":"e","305":"\"","306":":","307":" ","308":"\"","309":"t","31":" ","310":"e","311":"x","312":"t","313":"\"","314":",","315":"\n","316":" ","317":" ","318":" ","319":" ","32":" ","320":" ","321":" ","322":" ","323":" ","324":"\"","325":"t","326":"e","327":"x","328":"t","329":"\"","33":" ","330":":","331":" ","332":"\"","333":"[","334":"C","335":"u","336":"r","337":"r","338":"e","339":"n","34":" ","340":"t","341":" ","342":"F","343":"o","344":"c","345":"u","346":"s","347":":","348":" ","349":"M","35":"\"","350":"o","351":"l","352":"e","353":"c","354":"u","355":"l","356":"e","357":" ","358":"C","359":"a","36":"c","360":"n","361":"d","362":"i","363":"d","364":"a","365":"t","366":"e","367":" ","368":"2","369":",","37":"o","370":" ","371":"S","372":"M","373":"I","374":"L","375":"E","376":"S","377":":","378":" ","379":"C","38":"n","380":"O","381":"c","382":"1","383":"c","384":"c","385":"(","386":"C","387":"C","388":"(","389":"C","39":"t","390":")","391":"N","392":")","393":"c","394":"(","395":"O","396":"C","397":")","398":"c","399":"c","4":"{","40":"e","400":"1","401":"O","402":"C","403":"C","404":"(","405":"F","406":")","407":"(","408":"F","409":")","41":"n","410":"F","411":"]","412":"\"","413":"\n","414":" ","415":" ","416":" ","417":" ","418":" ","419":" ","42":"t","420":"}","421":"\n","422":" ","423":" ","424":" ","425":" ","426":"]","427":"\n","428":" ","429":" ","43":"\"","430":"}","431":",","432":"\n","433":" ","434":" ","435":"{","436":"\n","437":" ","438":" ","439":" ","44":":","440":" ","441":"\"","442":"r","443":"o","444":"l","445":"e","446":"\"","447":":","448":" ","449":"\"","45":" ","450":"u","451":"s","452":"e","453":"r","454":"\"","455":",","456":"\n","457":" ","458":" ","459":" ","46":"[","460":" ","461":"\"","462":"c","463":"o","464":"n","465":"t","466":"e","467":"n","468":"t","469":"\"","47":"\n","470":":","471":" ","472":"[","473":"\n","474":" ","475":" ","476":" ","477":" ","478":" ","479":" ","48":" ","480":"{","481":"\n","482":" ","483":" ","484":" ","485":" ","486":" ","487":" ","488":" ","489":" ","49":" ","490":"\"","491":"t","492":"y","493":"p","494":"e","495":"\"","496":":","497":" ","498":"\"","499":"t","5":"\n","50":" ","500":"e","501":"x","502":"t","503":"\"","504":",","505":"\n","506":" ","507":" ","508":" ","509":" ","51":" ","510":" ","511":" ","512":" ","513":" ","514":"\"","515":"t","516":"e","517":"x","518":"t","519":"\"","52":" ","520":":","521":" ","522":"\"","523":"H","524":"e","525":"l","526":"l","527":"o","528":" ","529":"C","53":" ","530":"l","531":"a","532":"u","533":"d","534":"e","535":"\"","536":"\n","537":" ","538":" ","539":" ","54":"{","540":" ","541":" ","542":" ","543":"}","544":"\n","545":" ","546":" ","547":" ","548":" ","549":"]","55":"\n","550":"\n","551":" ","552":" ","553":"}","554":"\n","555":"]","56":" ","57":" ","58":" ","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-24 09:27:21"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-24 09:27:21"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-24 09:27:25"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-24 09:27:44"}
{"0":"[","1":"\n","10":"\"","100":"l","1000":"o","1001":"n","1002":"s","1003":"h","1004":"i","1005":"p","1006":"s","1007":"\\","1008":"n","1009":"5","101":"o","1010":".","1011":" ","1012":"S","1013":"o","1014":"m","1015":"e","1016":"t","1017":"h","1018":"i","1019":"n","102":"!","1020":"g","1021":" ","1022":"e","1023":"l","1024":"s","1025":"e","1026":" ","1027":"r","1028":"e","1029":"l","103":" ","1030":"a","1031":"t","1032":"e","1033":"d","1034":" ","1035":"t","1036":"o","1037":" ","1038":"t","1039":"h","104":"I","1040":"i","1041":"s","1042":" ","1043":"m","1044":"o","1045":"l","1046":"e","1047":"c","1048":"u","1049":"l","105":"'","1050":"e","1051":"?","1052":"\\","1053":"n","1054":"\\","1055":"n","1056":"P","1057":"l","1058":"e","1059":"a","106":"m","1060":"s","1061":"e","1062":" ","1063":"l","1064":"e","1065":"t","1066":" ","1067":"m","1068":"e","1069":" ","107":" ","1070":"k","1071":"n","1072":"o","1073":"w","1074":" ","1075":"h","1076":"o","1077":"w","1078":" ","1079":"I","108":"h","1080":" ","1081":"c","1082":"a","1083":"n","1084":" ","1085":"b","1086":"e","1087":"s","1088":"t","1089":" ","109":"e","1090":"a","1091":"s","1092":"s","1093":"i","1094":"s","1095":"t","1096":" ","1097":"w","1098":"i","1099":"t","11":"r","110":"r","1100":"h","1101":" ","1102":"y","1103":"o","1104":"u","1105":"r","1106":" ","1107":"d","1108":"r","1109":"u","111":"e","1110":"g","1111":" ","1112":"d","1113":"e","1114":"s","1115":"i","1116":"g","1117":"n","1118":" ","1119":"w","112":" ","1120":"o","1121":"r","1122":"k","1123":".","1124":"\"","1125":"\n","1126":" ","1127":" ","1128":" ","1129":" ","113":"t","1130":" ","1131":" ","1132":"}","1133":"\n","1134":" ","1135":" ","1136":" ","1137":" ","1138":"]","1139":"\n","114":"o","1140":" ","1141":" ","1142":"}","1143":",","1144":"\n","1145":" ","1146":" ","1147":"{","1148":"\n","1149":" ","115":" ","1150":" ","1151":" ","1152":" ","1153":"\"","1154":"r","1155":"o","1156":"l","1157":"e","1158":"\"","1159":":","116":"h","1160":" ","1161":"\"","1162":"u","1163":"s","1164":"e","1165":"r","1166":"\"","1167":",","1168":"\n","1169":" ","117":"e","1170":" ","1171":" ","1172":" ","1173":"\"","1174":"c","1175":"o","1176":"n","1177":"t","1178":"e","1179":"n","118":"l","1180":"t","1181":"\"","1182":":","1183":" ","1184":"[","1185":"\n","1186":" ","1187":" ","1188":" ","1189":" ","119":"p","1190":" ","1191":" ","1192":"{","1193":"\n","1194":" ","1195":" ","1196":" ","1197":" ","1198":" ","1199":" ","12":"o","120":" ","1200":" ","1201":" ","1202":"\"","1203":"t","1204":"y","1205":"p","1206":"e","1207":"\"","1208":":","1209":" ","121":"w","1210":"\"","1211":"t","1212":"e","1213":"x","1214":"t","1215":"\"","1216":",","1217":"\n","1218":" ","1219":" ","122":"i","1220":" ","1221":" ","1222":" ","1223":" ","1224":" ","1225":" ","1226":"\"","1227":"t","1228":"e","1229":"x","123":"t","1230":"t","1231":"\"","1232":":","1233":" ","1234":"\"","1235":"[","1236":"C","1237":"u","1238":"r","1239":"r","124":"h","1240":"e","1241":"n","1242":"t","1243":" ","1244":"F","1245":"o","1246":"c","1247":"u","1248":"s","1249":":","125":" ","1250":" ","1251":"M","1252":"o","1253":"l","1254":"e","1255":"c","1256":"u","1257":"l","1258":"e","1259":" ","126":"d","1260":"C","1261":"a","1262":"n","1263":"d","1264":"i","1265":"d","1266":"a","1267":"t","1268":"e","1269":" ","127":"r","1270":"2","1271":",","1272":" ","1273":"S","1274":"M","1275":"I","1276":"L","1277":"E","1278":"S","1279":":","128":"u","1280":" ","1281":"C","1282":"O","1283":"c","1284":"1","1285":"c","1286":"c","1287":"(","1288":"C","1289":"C","129":"g","1290":"(","1291":"C","1292":")","1293":"N","1294":")","1295":"c","1296":"(","1297":"O","1298":"C","1299":")","13":"l","130":" ","1300":"c","1301":"c","1302":"1","1303":"O","1304":"C","1305":"C","1306":"(","1307":"F","1308":")","1309":"(","131":"d","1310":"F","1311":")","1312":"F","1313":"]","1314":"\"","1315":"\n","1316":" ","1317":" ","1318":" ","1319":" ","132":"e","1320":" ","1321":" ","1322":"}","1323":"\n","1324":" ","1325":" ","1326":" ","1327":" ","1328":"]","1329":"\n","133":"s","1330":" ","1331":" ","1332":"}","1333":",","1334":"\n","1335":" ","1336":" ","1337":"{","1338":"\n","1339":" ","134":"i","1340":" ","1341":" ","1342":" ","1343":"\"","1344":"r","1345":"o","1346":"l","1347":"e","1348":"\"","1349":":","135":"g","1350":" ","1351":"\"","1352":"u","1353":"s","1354":"e","1355":"r","1356":"\"","1357":",","1358":"\n","1359":" ","136":"n","1360":" ","1361":" ","1362":" ","1363":"\"","1364":"c","1365":"o","1366":"n","1367":"t","1368":"e","1369":"n","137":".","1370":"t","1371":"\"","1372":":","1373":" ","1374":"[","1375":"\n","1376":" ","1377":" ","1378":" ","1379":" ","138":" ","1380":" ","1381":" ","1382":"{","1383":"\n","1384":" ","1385":" ","1386":" ","1387":" ","1388":" ","1389":" ","139":"C","1390":" ","1391":" ","1392":"\"","1393":"t","1394":"y","1395":"p","1396":"e","1397":"\"","1398":":","1399":" ","14":"e","140":"o","1400":"\"","1401":"t","1402":"e","1403":"x","1404":"t","1405":"\"","1406":",","1407":"\n","1408":" ","1409":" ","141":"n","1410":" ","1411":" ","1412":" ","1413":" ","1414":" ","1415":" ","1416":"\"","1417":"t","1418":"e","1419":"x","142":"t","1420":"t","1421":"\"","1422":":","1423":" ","1424":"\"","1425":"1","1426":".","1427":"\"","1428":"\n","1429":" ","143":"e","1430":" ","1431":" ","1432":" ","1433":" ","1434":" ","1435":"}","1436":"\n","1437":" ","1438":" ","1439":" ","144":"x","1440":" ","1441":"]","1442":"\n","1443":" ","1444":" ","1445":"}","1446":"\n","1447":"]","145":"t","146":":","147":" ","148":"D","149":"i","15":"\"","150":"s","151":"c","152":"u","153":"s","154":"s","155":"i","156":"n","157":"g","158":" ","159":"M","16":":","160":"o","161":"l","162":"e","163":"c","164":"u","165":"l","166":"e","167":" ","168":"C","169":"a","17":" ","170":"n","171":"d","172":"i","173":"d","174":"a","175":"t","176":"e","177":" ","178":"2","179":" ","18":"\"","180":"(","181":"S","182":"M","183":"I","184":"L","185":"E","186":"S","187":":","188":" ","189":"C","19":"a","190":"O","191":"c","192":"1","193":"c","194":"c","195":"(","196":"C","197":"C","198":"(","199":"C","2":" ","20":"s","200":")","201":"N","202":")","203":"c","204":"(","205":"O","206":"C","207":")","208":"c","209":"c","21":"s","210":"1","211":"O","212":"C","213":"C","214":"(","215":"F","216":")","217":"(","218":"F","219":")","22":"i","220":"F","221":")","222":"\"","223":"\n","224":" ","225":" ","226":" ","227":" ","228":" ","229":" ","23":"s","230":"}","231":"\n","232":" ","233":" ","234":" ","235":" ","236":"]","237":"\n","238":" ","239":" ","24":"t","240":"}","241":",","242":"\n","243":" ","244":" ","245":"{","246":"\n","247":" ","248":" ","249":" ","25":"a","250":" ","251":"\"","252":"r","253":"o","254":"l","255":"e","256":"\"","257":":","258":" ","259":"\"","26":"n","260":"u","261":"s","262":"e","263":"r","264":"\"","265":",","266":"\n","267":" ","268":" ","269":" ","27":"t","270":" ","271":"\"","272":"c","273":"o","274":"n","275":"t","276":"e","277":"n","278":"t","279":"\"","28":"\"","280":":","281":" ","282":"[","283":"\n","284":" ","285":" ","286":" ","287":" ","288":" ","289":" ","29":",","290":"{","291":"\n","292":" ","293":" ","294":" ","295":" ","296":" ","297":" ","298":" ","299":" ","3":" ","30":"\n","300":"\"","301":"t","302":"y","303":"p","304":"e","305":"\"","306":":","307":" ","308":"\"","309":"t","31":" ","310":"e","311":"x","312":"t","313":"\"","314":",","315":"\n","316":" ","317":" ","318":" ","319":" ","32":" ","320":" ","321":" ","322":" ","323":" ","324":"\"","325":"t","326":"e","327":"x","328":"t","329":"\"","33":" ","330":":","331":" ","332":"\"","333":"H","334":"e","335":"l","336":"l","337":"o","338":" ","339":"C","34":" ","340":"l","341":"a","342":"u","343":"d","344":"e","345":"\"","346":"\n","347":" ","348":" ","349":" ","35":"\"","350":" ","351":" ","352":" ","353":"}","354":"\n","355":" ","356":" ","357":" ","358":" ","359":"]","36":"c","360":"\n","361":" ","362":" ","363":"}","364":",","365":"\n","366":" ","367":" ","368":"{","369":"\n","37":"o","370":" ","371":" ","372":" ","373":" ","374":"\"","375":"r","376":"o","377":"l","378":"e","379":"\"","38":"n","380":":","381":" ","382":"\"","383":"a","384":"s","385":"s","386":"i","387":"s","388":"t","389":"a","39":"t","390":"n","391":"t","392":"\"","393":",","394":"\n","395":" ","396":" ","397":" ","398":" ","399":"\"","4":"{","40":"e","400":"c","401":"o","402":"n","403":"t","404":"e","405":"n","406":"t","407":"\"","408":":","409":" ","41":"n","410":"[","411":"\n","412":" ","413":" ","414":" ","415":" ","416":" ","417":" ","418":"{","419":"\n","42":"t","420":" ","421":" ","422":" ","423":" ","424":" ","425":" ","426":" ","427":" ","428":"\"","429":"t","43":"\"","430":"y","431":"p","432":"e","433":"\"","434":":","435":" ","436":"\"","437":"t","438":"e","439":"x","44":":","440":"t","441":"\"","442":",","443":"\n","444":" ","445":" ","446":" ","447":" ","448":" ","449":" ","45":" ","450":" ","451":" ","452":"\"","453":"t","454":"e","455":"x","456":"t","457":"\"","458":":","459":" ","46":"[","460":"\"","461":"H","462":"e","463":"l","464":"l","465":"o","466":"!","467":" ","468":"I","469":"'","47":"\n","470":"m","471":" ","472":"h","473":"a","474":"p","475":"p","476":"y","477":" ","478":"t","479":"o","48":" ","480":" ","481":"h","482":"e","483":"l","484":"p","485":" ","486":"w","487":"i","488":"t","489":"h","49":" ","490":" ","491":"y","492":"o","493":"u","494":"r","495":" ","496":"m","497":"o","498":"l","499":"e","5":"\n","50":" ","500":"c","501":"u","502":"l","503":"e","504":" ","505":"c","506":"a","507":"n","508":"d","509":"i","51":" ","510":"d","511":"a","512":"t","513":"e","514":" ","515":"a","516":"n","517":"a","518":"l","519":"y","52":" ","520":"s","521":"i","522":"s","523":".","524":" ","525":"I","526":" ","527":"s","528":"e","529":"e","53":" ","530":" ","531":"w","532":"e","533":"'","534":"r","535":"e","536":" ","537":"f","538":"o","539":"c","54":"{","540":"u","541":"s","542":"i","543":"n","544":"g","545":" ","546":"o","547":"n","548":" ","549":"M","55":"\n","550":"o","551":"l","552":"e","553":"c","554":"u","555":"l","556":"e","557":" ","558":"C","559":"a","56":" ","560":"n","561":"d","562":"i","563":"d","564":"a","565":"t","566":"e","567":" ","568":"2","569":" ","57":" ","570":"w","571":"i","572":"t","573":"h","574":" ","575":"t","576":"h","577":"e","578":" ","579":"S","58":" ","580":"M","581":"I","582":"L","583":"E","584":"S","585":" ","586":"n","587":"o","588":"t","589":"a","59":" ","590":"t","591":"i","592":"o","593":"n","594":":","595":" ","596":"C","597":"O","598":"c","599":"1","6":" ","60":" ","600":"c","601":"c","602":"(","603":"C","604":"C","605":"(","606":"C","607":")","608":"N","609":")","61":" ","610":"c","611":"(","612":"O","613":"C","614":")","615":"c","616":"c","617":"1","618":"O","619":"C","62":" ","620":"C","621":"(","622":"F","623":")","624":"(","625":"F","626":")","627":"F","628":"\\","629":"n","63":" ","630":"\\","631":"n","632":"T","633":"h","634":"i","635":"s","636":" ","637":"s","638":"t","639":"r","64":"\"","640":"u","641":"c","642":"t","643":"u","644":"r","645":"e","646":" ","647":"a","648":"p","649":"p","65":"t","650":"e","651":"a","652":"r","653":"s","654":" ","655":"t","656":"o","657":" ","658":"b","659":"e","66":"y","660":" ","661":"a","662":" ","663":"s","664":"u","665":"b","666":"s","667":"t","668":"i","669":"t","67":"p","670":"u","671":"t","672":"e","673":"d","674":" ","675":"b","676":"e","677":"n","678":"z","679":"e","68":"e","680":"n","681":"e","682":" ","683":"d","684":"e","685":"r","686":"i","687":"v","688":"a","689":"t","69":"\"","690":"i","691":"v","692":"e","693":" ","694":"w","695":"i","696":"t","697":"h","698":":","699":"\\","7":" ","70":":","700":"n","701":"-","702":" ","703":"T","704":"h","705":"r","706":"e","707":"e","708":" ","709":"m","71":" ","710":"e","711":"t","712":"h","713":"o","714":"x","715":"y","716":" ","717":"g","718":"r","719":"o","72":"\"","720":"u","721":"p","722":"s","723":" ","724":"(","725":"C","726":"O","727":"c","728":")","729":"\\","73":"t","730":"n","731":"-","732":" ","733":"A","734":" ","735":"t","736":"r","737":"i","738":"f","739":"l","74":"e","740":"u","741":"o","742":"r","743":"o","744":"m","745":"e","746":"t","747":"h","748":"o","749":"x","75":"x","750":"y","751":" ","752":"g","753":"r","754":"o","755":"u","756":"p","757":" ","758":"(","759":"O","76":"t","760":"C","761":"C","762":"(","763":"F","764":")","765":"(","766":"F","767":")","768":"F","769":")","77":"\"","770":"\\","771":"n","772":"-","773":" ","774":"A","775":" ","776":"s","777":"i","778":"d","779":"e","78":",","780":" ","781":"c","782":"h","783":"a","784":"i","785":"n","786":" ","787":"c","788":"o","789":"n","79":"\n","790":"t","791":"a","792":"i","793":"n","794":"i","795":"n","796":"g","797":" ","798":"a","799":"n","8":" ","80":" ","800":" ","801":"a","802":"m","803":"i","804":"n","805":"e","806":" ","807":"g","808":"r","809":"o","81":" ","810":"u","811":"p","812":" ","813":"(","814":"C","815":"C","816":"(","817":"C","818":")","819":"N","82":" ","820":")","821":"\\","822":"n","823":"\\","824":"n","825":"W","826":"o","827":"u","828":"l","829":"d","83":" ","830":" ","831":"y","832":"o","833":"u","834":" ","835":"l","836":"i","837":"k","838":"e","839":" ","84":" ","840":"m","841":"e","842":" ","843":"t","844":"o","845":":","846":"\\","847":"n","848":"1","849":".","85":" ","850":" ","851":"A","852":"n","853":"a","854":"l","855":"y","856":"z","857":"e","858":" ","859":"i","86":" ","860":"t","861":"s","862":" ","863":"d","864":"r","865":"u","866":"g","867":"-","868":"l","869":"i","87":" ","870":"k","871":"e","872":" ","873":"p","874":"r","875":"o","876":"p","877":"e","878":"r","879":"t","88":"\"","880":"i","881":"e","882":"s","883":"\\","884":"n","885":"2","886":".","887":" ","888":"D","889":"i","89":"t","890":"s","891":"c","892":"u","893":"s","894":"s","895":" ","896":"p","897":"o","898":"t","899":"e","9":" ","90":"e","900":"n","901":"t","902":"i","903":"a","904":"l","905":" ","906":"p","907":"h","908":"a","909":"r","91":"x","910":"m","911":"a","912":"c","913":"o","914":"l","915":"o","916":"g","917":"i","918":"c","919":"a","92":"t","920":"l","921":" ","922":"a","923":"c","924":"t","925":"i","926":"v","927":"i","928":"t","929":"i","93":"\"","930":"e","931":"s","932":"\\","933":"n","934":"3","935":".","936":" ","937":"E","938":"v","939":"a","94":":","940":"l","941":"u","942":"a","943":"t","944":"e","945":" ","946":"s","947":"y","948":"n","949":"t","95":" ","950":"h","951":"e","952":"s","953":"i","954":"s","955":" ","956":"r","957":"o","958":"u","959":"t","96":"\"","960":"e","961":"s","962":"\\","963":"n","964":"4","965":".","966":" ","967":"E","968":"x","969":"a","97":"H","970":"m","971":"i","972":"n","973":"e","974":" ","975":"s","976":"t","977":"r","978":"u","979":"c","98":"e","980":"t","981":"u","982":"r","983":"e","984":"-","985":"a","986":"c","987":"t","988":"i","989":"v","99":"l","990":"i","991":"t","992":"y","993":" ","994":"r","995":"e","996":"l","997":"a","998":"t","999":"i","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-24 09:27:44"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-24 09:27:44"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-24 09:27:53"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:45:43"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 12:46:31"}
{"level":"info","message":"Created request ID: dd0a24a0-a8d9-495b-86ae-7a3fc33fe7b7","service":"breaking-good-api","timestamp":"2025-04-24 12:46:31"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 12:46:31"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 12:46:31"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 12:46:31"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 12:46:31"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 12:46:31"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 12:46:31"}
{"level":"info","message":"Claude API response received: msg_01ACEjYzcGMzL2Qm8tME7Yvg","service":"breaking-good-api","timestamp":"2025-04-24 12:47:09"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 12:47:09"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 12:47:09"}
{"level":"info","message":"Received Claude response with ID: msg_01ACEjYzcGMzL2Qm8tME7Yvg","service":"breaking-good-api","timestamp":"2025-04-24 12:47:09"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 12:47:09"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 12:47:09"}
{"level":"info","message":"Using string content directly, length: 7168","service":"breaking-good-api","timestamp":"2025-04-24 12:47:09"}
{"level":"info","message":"Extracted 7168 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 12:47:09"}
{"level":"info","message":"Found 9 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 12:47:09"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NC(=O)C(CS(=O)C1=CC=C(C=C1)OC)NC(=O)CN1CCN(CC1)C2=CC=CC=N2","service":"breaking-good-api","timestamp":"2025-04-24 12:47:10"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)(C)NC(=O)C(CS(=O)C1=CC=C(C=C1)OC)NC(=O)CN1CCN(CC1)C2=CC=CC=N2","service":"breaking-good-api","timestamp":"2025-04-24 12:47:10"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)(C)NC(=O)C(CS(=O)C1=CC=C(C=C1)OC)NC(=O)CN1CCN(CC1)C2=CC=CC=N2","service":"breaking-good-api","timestamp":"2025-04-24 12:47:11"}
{"level":"info","message":"Validating SMILES: 2-((2-(tert-butylamino)-2-oxo-1-(phenylmethylsulfinyl)ethyl)amino)-N-(4-(pyridin-2-yl)piperazin-1-yl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 12:47:11"}
{"level":"info","message":"Attempting 3D structure generation for: 2-((2-(tert-butylamino)-2-oxo-1-(phenylmethylsulfinyl)ethyl)amino)-N-(4-(pyridin-2-yl)piperazin-1-yl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 12:47:11"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-((2-(tert-butylamino)-2-oxo-1-(phenylmethylsulfinyl)ethyl)amino)-N-(4-(pyridin-2-yl)piperazin-1-yl)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 12:47:11"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-((2-(tert-butylamino)-2-oxo-1-(phenylmethylsulfinyl)ethyl)amino)-N-(4-(pyridin-2-yl)piperazin-1-yl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 12:47:11"}
{"level":"info","message":"Validating SMILES: Ki(NET","service":"breaking-good-api","timestamp":"2025-04-24 12:47:11"}
{"level":"info","message":"Attempting 3D structure generation for: Ki(NET","service":"breaking-good-api","timestamp":"2025-04-24 12:47:12"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: Ki(NET - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 12:47:12"}
{"level":"info","message":"Added molecule with properties but without 3D structure: Ki(NET","service":"breaking-good-api","timestamp":"2025-04-24 12:47:12"}
{"level":"info","message":"Validating SMILES: C1CN2C(CC1C(=O)OCCN3CCN(CC3)C4=CC=C(C=C4)F)CCC2C5=CC(=C(C=C5)O)Cl","service":"breaking-good-api","timestamp":"2025-04-24 12:47:12"}
{"level":"info","message":"Attempting 3D structure generation for: C1CN2C(CC1C(=O)OCCN3CCN(CC3)C4=CC=C(C=C4)F)CCC2C5=CC(=C(C=C5)O)Cl","service":"breaking-good-api","timestamp":"2025-04-24 12:47:13"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): C1CN2C(CC1C(=O)OCCN3CCN(CC3)C4=CC=C(C=C4)F)CCC2C5=CC(=C(C=C5)O)Cl","service":"breaking-good-api","timestamp":"2025-04-24 12:47:14"}
{"level":"info","message":"Validating SMILES: CC(C)N(C)C(=O)C1CCN(CC1)CC(C(=O)O)NC(=O)OC2=CC=C(C=C2)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 12:47:14"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)N(C)C(=O)C1CCN(CC1)CC(C(=O)O)NC(=O)OC2=CC=C(C=C2)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 12:47:14"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)N(C)C(=O)C1CCN(CC1)CC(C(=O)O)NC(=O)OC2=CC=C(C=C2)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 12:47:15"}
{"level":"info","message":"Validating SMILES: S)-1-((4-(N-isopropyl-N-methylcarbamoyl)piperidin-1-yl)methyl)-2-(((4-(trifluoromethyl)phenoxy)carbonyl)amino)propanoic","service":"breaking-good-api","timestamp":"2025-04-24 12:47:15"}
{"level":"info","message":"Attempting 3D structure generation for: S)-1-((4-(N-isopropyl-N-methylcarbamoyl)piperidin-1-yl)methyl)-2-(((4-(trifluoromethyl)phenoxy)carbonyl)amino)propanoic","service":"breaking-good-api","timestamp":"2025-04-24 12:47:15"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: S)-1-((4-(N-isopropyl-N-methylcarbamoyl)piperidin-1-yl)methyl)-2-(((4-(trifluoromethyl)phenoxy)carbonyl)amino)propanoic - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 12:47:15"}
{"level":"info","message":"Added molecule with properties but without 3D structure: S)-1-((4-(N-isopropyl-N-methylcarbamoyl)piperidin-1-yl)methyl)-2-(((4-(trifluoromethyl)phenoxy)carbonyl)amino)propanoic","service":"breaking-good-api","timestamp":"2025-04-24 12:47:15"}
{"level":"info","message":"Validating SMILES: EC50(TAAR1","service":"breaking-good-api","timestamp":"2025-04-24 12:47:15"}
{"level":"info","message":"Attempting 3D structure generation for: EC50(TAAR1","service":"breaking-good-api","timestamp":"2025-04-24 12:47:16"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: EC50(TAAR1 - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 12:47:16"}
{"level":"info","message":"Added molecule with properties but without 3D structure: EC50(TAAR1","service":"breaking-good-api","timestamp":"2025-04-24 12:47:16"}
{"level":"info","message":"Validating SMILES: EC50(M1","service":"breaking-good-api","timestamp":"2025-04-24 12:47:16"}
{"level":"info","message":"Attempting 3D structure generation for: EC50(M1","service":"breaking-good-api","timestamp":"2025-04-24 12:47:16"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: EC50(M1 - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 12:47:17"}
{"level":"info","message":"Added molecule with properties but without 3D structure: EC50(M1","service":"breaking-good-api","timestamp":"2025-04-24 12:47:17"}
{"level":"info","message":"Validated 8 molecules (Props & 3D) out of 9 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 12:47:17"}
{"level":"info","message":"Successfully extracted and validated 8 molecules","service":"breaking-good-api","timestamp":"2025-04-24 12:47:17"}
{"level":"info","message":"Saving results to file for request dd0a24a0-a8d9-495b-86ae-7a3fc33fe7b7","service":"breaking-good-api","timestamp":"2025-04-24 12:47:17"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 12:47:17"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 12:47:18"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:47:21"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:49:41"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:49:50"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:49:57"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:50:05"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-24 12:53:08"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"H","105":"o","106":"w","107":" ","108":"c","109":"a","11":"r","110":"n","111":" ","112":"I","113":" ","114":"h","115":"e","116":"l","117":"p","118":" ","119":"w","12":"o","120":"i","121":"t","122":"h","123":" ","124":"d","125":"r","126":"u","127":"g","128":" ","129":"d","13":"l","130":"e","131":"s","132":"i","133":"g","134":"n","135":" ","136":"t","137":"o","138":"d","139":"a","14":"e","140":"y","141":"?","142":"\"","143":"\n","144":" ","145":" ","146":" ","147":" ","148":" ","149":" ","15":"\"","150":"}","151":"\n","152":" ","153":" ","154":" ","155":" ","156":"]","157":"\n","158":" ","159":" ","16":":","160":"}","161":",","162":"\n","163":" ","164":" ","165":"{","166":"\n","167":" ","168":" ","169":" ","17":" ","170":" ","171":"\"","172":"r","173":"o","174":"l","175":"e","176":"\"","177":":","178":" ","179":"\"","18":"\"","180":"u","181":"s","182":"e","183":"r","184":"\"","185":",","186":"\n","187":" ","188":" ","189":" ","19":"a","190":" ","191":"\"","192":"c","193":"o","194":"n","195":"t","196":"e","197":"n","198":"t","199":"\"","2":" ","20":"s","200":":","201":" ","202":"[","203":"\n","204":" ","205":" ","206":" ","207":" ","208":" ","209":" ","21":"s","210":"{","211":"\n","212":" ","213":" ","214":" ","215":" ","216":" ","217":" ","218":" ","219":" ","22":"i","220":"\"","221":"t","222":"y","223":"p","224":"e","225":"\"","226":":","227":" ","228":"\"","229":"t","23":"s","230":"e","231":"x","232":"t","233":"\"","234":",","235":"\n","236":" ","237":" ","238":" ","239":" ","24":"t","240":" ","241":" ","242":" ","243":" ","244":"\"","245":"t","246":"e","247":"x","248":"t","249":"\"","25":"a","250":":","251":" ","252":"\"","253":"[","254":"F","255":"o","256":"c","257":"u","258":"s","259":" ","26":"n","260":"o","261":"n","262":" ","263":"M","264":"o","265":"l","266":"e","267":"c","268":"u","269":"l","27":"t","270":"e","271":":","272":" ","273":"M","274":"o","275":"l","276":"e","277":"c","278":"u","279":"l","28":"\"","280":"e","281":" ","282":"C","283":"a","284":"n","285":"d","286":"i","287":"d","288":"a","289":"t","29":",","290":"e","291":" ","292":"4","293":",","294":" ","295":"S","296":"M","297":"I","298":"L","299":"E","3":" ","30":"\n","300":"S","301":":","302":" ","303":"C","304":"1","305":"C","306":"N","307":"2","308":"C","309":"(","31":" ","310":"C","311":"C","312":"1","313":"C","314":"(","315":"=","316":"O","317":")","318":"O","319":"C","32":" ","320":"C","321":"N","322":"3","323":"C","324":"C","325":"N","326":"(","327":"C","328":"C","329":"3","33":" ","330":")","331":"C","332":"4","333":"=","334":"C","335":"C","336":"=","337":"C","338":"(","339":"C","34":" ","340":"=","341":"C","342":"4","343":")","344":"F","345":")","346":"C","347":"C","348":"C","349":"2","35":"\"","350":"C","351":"5","352":"=","353":"C","354":"C","355":"(","356":"=","357":"C","358":"(","359":"C","36":"c","360":"=","361":"C","362":"5","363":")","364":"O","365":")","366":"C","367":"l","368":"]","369":"\"","37":"o","370":"\n","371":" ","372":" ","373":" ","374":" ","375":" ","376":" ","377":"}","378":"\n","379":" ","38":"n","380":" ","381":" ","382":" ","383":"]","384":"\n","385":" ","386":" ","387":"}","388":",","389":"\n","39":"t","390":" ","391":" ","392":"{","393":"\n","394":" ","395":" ","396":" ","397":" ","398":"\"","399":"r","4":"{","40":"e","400":"o","401":"l","402":"e","403":"\"","404":":","405":" ","406":"\"","407":"u","408":"s","409":"e","41":"n","410":"r","411":"\"","412":",","413":"\n","414":" ","415":" ","416":" ","417":" ","418":"\"","419":"c","42":"t","420":"o","421":"n","422":"t","423":"e","424":"n","425":"t","426":"\"","427":":","428":" ","429":"[","43":"\"","430":"\n","431":" ","432":" ","433":" ","434":" ","435":" ","436":" ","437":"{","438":"\n","439":" ","44":":","440":" ","441":" ","442":" ","443":" ","444":" ","445":" ","446":" ","447":"\"","448":"t","449":"y","45":" ","450":"p","451":"e","452":"\"","453":":","454":" ","455":"\"","456":"t","457":"e","458":"x","459":"t","46":"[","460":"\"","461":",","462":"\n","463":" ","464":" ","465":" ","466":" ","467":" ","468":" ","469":" ","47":"\n","470":" ","471":"\"","472":"t","473":"e","474":"x","475":"t","476":"\"","477":":","478":" ","479":"\"","48":" ","480":"T","481":"e","482":"l","483":"l","484":" ","485":"m","486":"e","487":" ","488":"a","489":"b","49":" ","490":"o","491":"u","492":"t","493":" ","494":"t","495":"h","496":"e","497":" ","498":"p","499":"r","5":"\n","50":" ","500":"o","501":"p","502":"e","503":"r","504":"t","505":"i","506":"e","507":"s","508":" ","509":"o","51":" ","510":"f","511":" ","512":"t","513":"h","514":"i","515":"s","516":" ","517":"c","518":"a","519":"n","52":" ","520":"d","521":"i","522":"d","523":"a","524":"t","525":"e","526":".","527":"\"","528":"\n","529":" ","53":" ","530":" ","531":" ","532":" ","533":" ","534":" ","535":"}","536":"\n","537":" ","538":" ","539":" ","54":"{","540":" ","541":"]","542":"\n","543":" ","544":" ","545":"}","546":"\n","547":"]","55":"\n","56":" ","57":" ","58":" ","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-24 12:53:08"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-24 12:53:08"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-24 12:53:15"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:53:49"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:53:59"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:54:07"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:54:15"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:54:43"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 12:55:10"}
{"level":"info","message":"Found 10 IDs (total 53987)","service":"breaking-good-api","timestamp":"2025-04-24 12:55:11"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-24 12:55:11"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-24 12:55:13"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-24 12:55:13"}
{"level":"error","message":"Error parsing related articles for 26386541: Request failed with status code 429","service":"breaking-good-api","timestamp":"2025-04-24 12:55:14"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-24 12:55:16"}
{"level":"error","message":"Error comparing molecules: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: the following arguments are required: --operation\r\n","service":"breaking-good-api","timestamp":"2025-04-24 12:56:15"}
{"level":"info","message":"Generating regulatory report for SMILES: CC(CC1=CC=C(C=C1)O)NC","service":"breaking-good-api","timestamp":"2025-04-24 12:56:28"}
{"level":"info","message":"Successfully fetched molecular properties.","service":"breaking-good-api","timestamp":"2025-04-24 12:56:28"}
{"level":"info","message":"Successfully fetched ADMET predictions.","service":"breaking-good-api","timestamp":"2025-04-24 12:56:28"}
{"level":"error","message":"Error fetching similar drugs: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 12:56:28"}
{"level":"error","message":"Error calling Claude for regulatory analysis: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 12:56:28"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 12:56:30"}
{"level":"info","message":"Searching PubMed for: neuroscience AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 12:56:50"}
{"level":"info","message":"Found 10 IDs (total 92257)","service":"breaking-good-api","timestamp":"2025-04-24 12:56:51"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-24 12:56:51"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:14:07"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 13:14:58"}
{"level":"info","message":"Created request ID: 0c92ca1d-f78a-4575-a7a7-e92ccf72ac6f","service":"breaking-good-api","timestamp":"2025-04-24 13:14:58"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 13:14:58"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 13:14:58"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 13:14:58"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 13:14:58"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 13:14:58"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 13:14:58"}
{"level":"info","message":"Claude API response received: msg_019bky1c8gP4xvT7fFCCKRDj","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Received Claude response with ID: msg_019bky1c8gP4xvT7fFCCKRDj","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Using string content directly, length: 7551","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Extracted 7551 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CC1)C1=CC(=CC=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC(=O)C1CC1)C1=CC(=CC=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 13:15:33"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC(=O)C1CC1)C1=CC(=CC=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 13:15:34"}
{"level":"info","message":"Validating SMILES: CC(N)CC1=CC=C(C=C1)OC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 13:15:34"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)CC1=CC=C(C=C1)OC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 13:15:34"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)CC1=CC=C(C=C1)OC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 13:15:34"}
{"level":"info","message":"Validating SMILES: CNCC1CCC(CC1)C1=CC=CC=C1OC(F)F","service":"breaking-good-api","timestamp":"2025-04-24 13:15:34"}
{"level":"info","message":"Attempting 3D structure generation for: CNCC1CCC(CC1)C1=CC=CC=C1OC(F)F","service":"breaking-good-api","timestamp":"2025-04-24 13:15:34"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CNCC1CCC(CC1)C1=CC=CC=C1OC(F)F","service":"breaking-good-api","timestamp":"2025-04-24 13:15:35"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 13:15:35"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-24 13:15:35"}
{"level":"info","message":"Saving results to file for request 0c92ca1d-f78a-4575-a7a7-e92ccf72ac6f","service":"breaking-good-api","timestamp":"2025-04-24 13:15:35"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 13:15:35"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 13:15:35"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:15:37"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:16:15"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:16:29"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:17:46"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:17:52"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:17:55"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:18:17"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:18:38"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:29:22"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:29:43"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:29:46"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:29:48"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:29:51"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:30:55"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:33:05"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:33:08"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:33:14"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:33:22"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:33:31"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:33:37"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:33:46"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:33:53"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:34:02"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 13:34:25"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 20:23:39"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 20:32:58"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 20:43:17"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 21:17:16"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 21:17:55"}
{"level":"info","message":"Created request ID: 4609f017-70e8-4a99-9d17-fbc4ab4a5311","service":"breaking-good-api","timestamp":"2025-04-24 21:17:55"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 21:17:55"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 21:17:55"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 21:17:55"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 21:17:55"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 21:17:55"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 21:17:55"}
{"level":"info","message":"Claude API response received: msg_018hfKvhGn2B9ajqg1pbCe9X","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Received Claude response with ID: msg_018hfKvhGn2B9ajqg1pbCe9X","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Using string content directly, length: 8033","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Extracted 8033 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)OS(=O)(=O)C)C(C)(C)c1ccc(cc1)S(=O)C(C)NCC(C)C","service":"breaking-good-api","timestamp":"2025-04-24 21:18:33"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC(=O)OS(=O)(=O)C)C(C)(C)c1ccc(cc1)S(=O)C(C)NCC(C)C","service":"breaking-good-api","timestamp":"2025-04-24 21:18:34"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC(=O)OS(=O)(=O)C)C(C)(C)c1ccc(cc1)S(=O)C(C)NCC(C)C","service":"breaking-good-api","timestamp":"2025-04-24 21:18:34"}
{"level":"info","message":"Validating SMILES: R)-2-[(diphenylmethyl)sulfinyl]-N-methyl-1-phenylpropan-2-amine","service":"breaking-good-api","timestamp":"2025-04-24 21:18:34"}
{"level":"info","message":"Attempting 3D structure generation for: R)-2-[(diphenylmethyl)sulfinyl]-N-methyl-1-phenylpropan-2-amine","service":"breaking-good-api","timestamp":"2025-04-24 21:18:35"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: R)-2-[(diphenylmethyl)sulfinyl]-N-methyl-1-phenylpropan-2-amine - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 21:18:35"}
{"level":"info","message":"Added molecule with properties but without 3D structure: R)-2-[(diphenylmethyl)sulfinyl]-N-methyl-1-phenylpropan-2-amine","service":"breaking-good-api","timestamp":"2025-04-24 21:18:35"}
{"level":"info","message":"Validating SMILES: CNC(=O)c1ccc(cc1)Oc1ccccc1N1CCN(CC1)CCCOc1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-24 21:18:35"}
{"level":"info","message":"Attempting 3D structure generation for: CNC(=O)c1ccc(cc1)Oc1ccccc1N1CCN(CC1)CCCOc1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-24 21:18:36"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CNC(=O)c1ccc(cc1)Oc1ccccc1N1CCN(CC1)CCCOc1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-24 21:18:37"}
{"level":"info","message":"Validating SMILES: N-methyl-4-phenoxy-3-(4-(3-(4-fluorophenoxy)propyl)piperazin-1-yl)benzamide","service":"breaking-good-api","timestamp":"2025-04-24 21:18:37"}
{"level":"info","message":"Attempting 3D structure generation for: N-methyl-4-phenoxy-3-(4-(3-(4-fluorophenoxy)propyl)piperazin-1-yl)benzamide","service":"breaking-good-api","timestamp":"2025-04-24 21:18:37"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-methyl-4-phenoxy-3-(4-(3-(4-fluorophenoxy)propyl)piperazin-1-yl)benzamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 21:18:38"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-methyl-4-phenoxy-3-(4-(3-(4-fluorophenoxy)propyl)piperazin-1-yl)benzamide","service":"breaking-good-api","timestamp":"2025-04-24 21:18:38"}
{"level":"info","message":"Validating SMILES: CC(=O)OC1CC2CCC(C1N2)C(=O)NCCN1CCN(CC1)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-24 21:18:38"}
{"level":"info","message":"Attempting 3D structure generation for: CC(=O)OC1CC2CCC(C1N2)C(=O)NCCN1CCN(CC1)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-24 21:18:38"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(=O)OC1CC2CCC(C1N2)C(=O)NCCN1CCN(CC1)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-24 21:18:39"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 21:18:39"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-24 21:18:39"}
{"level":"info","message":"Saving results to file for request 4609f017-70e8-4a99-9d17-fbc4ab4a5311","service":"breaking-good-api","timestamp":"2025-04-24 21:18:39"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 21:18:39"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 21:18:40"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 21:18:44"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 21:40:00"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 21:47:43"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 21:56:39"}
{"level":"info","message":"Converting format: mol -> smiles","service":"breaking-good-api","timestamp":"2025-04-24 21:56:56"}
{"level":"error","message":"Error converting molecule format: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: the following arguments are required: --operation\r\n","service":"breaking-good-api","timestamp":"2025-04-24 21:56:57"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 21:58:16"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 21:58:31"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 21:58:47"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles","service":"breaking-good-api","timestamp":"2025-04-24 21:59:14"}
{"level":"debug","message":"Input data preview: \n  -INDIGO-04242521592D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-24 21:59:14"}
{"level":"info","message":"Converting format: mol -> smiles","service":"breaking-good-api","timestamp":"2025-04-24 21:59:14"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:01:10"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:02:06"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:02:37"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:04:49"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles","service":"breaking-good-api","timestamp":"2025-04-24 22:05:04"}
{"level":"debug","message":"Input data preview: \n  -INDIGO-04242522052D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-24 22:05:04"}
{"level":"info","message":"Converting format: mol -> smiles","service":"breaking-good-api","timestamp":"2025-04-24 22:05:04"}
{"0":"--operation","1":"convert","2":"--input_data","3":"\n  -INDIGO-04242522052D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","4":"--input_format","5":"mol","6":"--output_format","7":"smiles","level":"debug","message":"Running RDKit script with args:","service":"breaking-good-api","timestamp":"2025-04-24 22:05:04"}
{"errorMessage":"RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: argument --operation: invalid choice: 'convert' (choose from 'validate', 'descriptors', 'svg', 'optimize_3d', 'fingerprint')\r\n","inputPreview":"\n  -INDIGO-04242522052D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","level":"error","message":"Error converting molecule format (mol -> smiles):","service":"breaking-good-api","stack":"Error: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: argument --operation: invalid choice: 'convert' (choose from 'validate', 'descriptors', 'svg', 'optimize_3d', 'fingerprint')\r\n\n    at ChildProcess.<anonymous> (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\simulation.js:47:16)\n    at ChildProcess.emit (node:events:518:28)\n    at maybeClose (node:internal/child_process:1101:16)\n    at ChildProcess._handle.onexit (node:internal/child_process:304:5)","timestamp":"2025-04-24 22:05:04"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 22:06:40"}
{"level":"info","message":"Found 10 IDs (total 53987)","service":"breaking-good-api","timestamp":"2025-04-24 22:06:41"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-24 22:06:41"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-24 22:06:44"}
{"level":"info","message":"Searching PubMed for: pool AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 22:06:54"}
{"level":"info","message":"Found 10 IDs (total 6396)","service":"breaking-good-api","timestamp":"2025-04-24 22:06:55"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-24 22:06:56"}
{"level":"info","message":"Searching PubMed for: neuroscience AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 22:07:09"}
{"level":"info","message":"Found 10 IDs (total 92257)","service":"breaking-good-api","timestamp":"2025-04-24 22:07:10"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-24 22:07:11"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:07:19"}
{"level":"info","message":"Searching PubMed for: dog AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 22:07:25"}
{"level":"info","message":"Found 10 IDs (total 45146)","service":"breaking-good-api","timestamp":"2025-04-24 22:07:26"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-24 22:07:26"}
{"level":"info","message":"Searching PubMed for: hepatic AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 22:07:31"}
{"level":"info","message":"Found 10 IDs (total 19384)","service":"breaking-good-api","timestamp":"2025-04-24 22:07:32"}
{"level":"error","message":"Literature search error: pubmedData?.ArticleIdList?.ArticleId?.find is not a function","service":"breaking-good-api","stack":"TypeError: pubmedData?.ArticleIdList?.ArticleId?.find is not a function\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:87:59\n    at Array.map (<anonymous>)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:62:40\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","timestamp":"2025-04-24 22:07:32"}
{"level":"info","message":"Searching PubMed for: disease AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 22:07:34"}
{"level":"info","message":"Found 10 IDs (total 316581)","service":"breaking-good-api","timestamp":"2025-04-24 22:07:35"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-24 22:07:36"}
{"level":"info","message":"Searching PubMed for: autism AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 22:07:40"}
{"level":"info","message":"Found 10 IDs (total 11550)","service":"breaking-good-api","timestamp":"2025-04-24 22:07:41"}
{"level":"error","message":"Literature search error: pubmedData?.ArticleIdList?.ArticleId?.find is not a function","service":"breaking-good-api","stack":"TypeError: pubmedData?.ArticleIdList?.ArticleId?.find is not a function\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:87:59\n    at Array.map (<anonymous>)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:62:40\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","timestamp":"2025-04-24 22:07:41"}
{"level":"info","message":"Searching PubMed for: neuro AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 22:07:44"}
{"level":"info","message":"Found 10 IDs (total 56225)","service":"breaking-good-api","timestamp":"2025-04-24 22:07:45"}
{"level":"error","message":"Literature search error: Invalid character in entity name\nLine: 6\nColumn: 72\nChar: =","service":"breaking-good-api","stack":"Error: Invalid character in entity name\nLine: 6\nColumn: 72\nChar: =\n    at error (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\sax\\lib\\sax.js:658:10)\n    at strictFail (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\sax\\lib\\sax.js:684:7)\n    at SAXParser.write (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\sax\\lib\\sax.js:1522:13)\n    at exports.Parser.Parser.parseString (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\xml2js\\lib\\parser.js:337:31)\n    at Parser.parseString (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\xml2js\\lib\\parser.js:5:59)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\xml2js\\lib\\parser.js:352:24\n    at new Promise (<anonymous>)\n    at exports.Parser.Parser.parseStringPromise (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\xml2js\\lib\\parser.js:350:14)\n    at Parser.parseStringPromise (C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\node_modules\\xml2js\\lib\\parser.js:5:59)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:56:33","timestamp":"2025-04-24 22:07:45"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-24 22:07:48"}
{"level":"info","message":"Found 10 IDs (total 53987)","service":"breaking-good-api","timestamp":"2025-04-24 22:07:48"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-24 22:07:49"}
{"level":"info","message":"Generating regulatory report for SMILES: CC(CC1=CC=C(C=C1)O)NC","service":"breaking-good-api","timestamp":"2025-04-24 22:08:16"}
{"level":"info","message":"Successfully fetched molecular properties.","service":"breaking-good-api","timestamp":"2025-04-24 22:08:16"}
{"level":"info","message":"Successfully fetched ADMET predictions.","service":"breaking-good-api","timestamp":"2025-04-24 22:08:17"}
{"level":"error","message":"Error fetching similar drugs: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-24 22:08:17"}
{"level":"error","message":"Error calling Claude for regulatory analysis: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-24 22:08:17"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:08:18"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:08:33"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:08:37"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:08:39"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:08:46"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04242522092D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-24 22:09:05"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:09:05"}
{"0":"\n  -INDIGO-04242522092D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:09:05"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:09:07"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(C)CC1=CC=CC=C1O","service":"breaking-good-api","timestamp":"2025-04-24 22:09:18"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:09:18"}
{"0":"CC(C)CC1=CC=CC=C1O","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:09:18"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04242522092D\n\n 11 11  0  0  0  0  0  0  0  0999 V2000\n   12.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-24 22:09:19"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:09:19"}
{"0":"\n  -INDIGO-04242522092D\n\n 11 11  0  0  0  0  0  0  0  0999 V2000\n   12.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1637   -5.7211    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1637   -3.9890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1637   -3.9890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.1637   -3.9890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6637   -3.1230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.6637   -3.1230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1637   -2.2569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  2  0  0  0  0\n 10 11  1  0  0  0  0\n 10  5  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:09:19"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:09:21"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(C)Cc1ccccc1O","service":"breaking-good-api","timestamp":"2025-04-24 22:09:21"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:09:21"}
{"0":"CC(C)Cc1ccccc1O","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:09:21"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04242522092D\n\n 11 11  0  0  0  0  0  0  0  0999 V2000\n   12.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-24 22:09:22"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:09:22"}
{"0":"\n  -INDIGO-04242522092D\n\n 11 11  0  0  0  0  0  0  0  0999 V2000\n   12.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1637   -5.7211    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1637   -3.9890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1637   -3.9890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.1637   -3.9890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6637   -3.1230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.6637   -3.1230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1637   -2.2569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  2  0  0  0  0\n 10 11  1  0  0  0  0\n 10  5  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:09:22"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:09:24"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-24 22:11:26"}
{"level":"info","message":"Created request ID: dcde5de9-d9e8-4016-91ca-7f4db9aca272","service":"breaking-good-api","timestamp":"2025-04-24 22:11:26"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-24 22:11:26"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-24 22:11:26"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-24 22:11:26"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-24 22:11:26"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-24 22:11:26"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-24 22:11:26"}
{"level":"info","message":"Claude API response received: msg_01LDPfyZw3kDwqB4TJeSQ6Yv","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Received Claude response with ID: msg_01LDPfyZw3kDwqB4TJeSQ6Yv","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Using string content directly, length: 7468","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Extracted 7468 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Validating SMILES: CC(NC1(C(=O)N(C(=O)C1)CCc2ccccc2)C)C","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC1(C(=O)N(C(=O)C1)CCc2ccccc2)C)C","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC1(C(=O)N(C(=O)C1)CCc2ccccc2)C)C","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)NCCCC(C)NC)ccc1OCC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(CC(=O)NCCCC(C)NC)ccc1OCC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 22:12:03"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(CC(=O)NCCCC(C)NC)ccc1OCC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-24 22:12:04"}
{"level":"info","message":"Validating SMILES: N-(4-(methylamino)pentyl)-2-(4-methoxy-3-(2,2,2-trifluoroethoxy)phenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 22:12:04"}
{"level":"info","message":"Attempting 3D structure generation for: N-(4-(methylamino)pentyl)-2-(4-methoxy-3-(2,2,2-trifluoroethoxy)phenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 22:12:04"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(4-(methylamino)pentyl)-2-(4-methoxy-3-(2,2,2-trifluoroethoxy)phenyl)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-24 22:12:04"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(4-(methylamino)pentyl)-2-(4-methoxy-3-(2,2,2-trifluoroethoxy)phenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-24 22:12:04"}
{"level":"info","message":"Validating SMILES: O=C(C1CCCC1)N1CCN(CC1)c1cccc(CN(C)CCCCF)c1","service":"breaking-good-api","timestamp":"2025-04-24 22:12:04"}
{"level":"info","message":"Attempting 3D structure generation for: O=C(C1CCCC1)N1CCN(CC1)c1cccc(CN(C)CCCCF)c1","service":"breaking-good-api","timestamp":"2025-04-24 22:12:04"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): O=C(C1CCCC1)N1CCN(CC1)c1cccc(CN(C)CCCCF)c1","service":"breaking-good-api","timestamp":"2025-04-24 22:12:05"}
{"level":"info","message":"Validated 4 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-24 22:12:05"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-24 22:12:05"}
{"level":"info","message":"Saving results to file for request dcde5de9-d9e8-4016-91ca-7f4db9aca272","service":"breaking-good-api","timestamp":"2025-04-24 22:12:05"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:05"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-24 22:12:05"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:12:07"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(C)Cc1ccccc1O","service":"breaking-good-api","timestamp":"2025-04-24 22:12:38"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:38"}
{"0":"CC(C)Cc1ccccc1O","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:12:38"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04242522122D\n\n 11 11  0  0  0  0  0  0  0  0999 V2000\n   12.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:38"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:38"}
{"0":"\n  -INDIGO-04242522122D\n\n 11 11  0  0  0  0  0  0  0  0999 V2000\n   12.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1637   -5.7211    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1637   -3.9890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1637   -3.9890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6637   -4.8550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.1637   -3.9890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6637   -3.1230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.6637   -3.1230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1637   -2.2569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  2  0  0  0  0\n 10 11  1  0  0  0  0\n 10  5  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:12:38"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(NC1(C(=O)N(C(=O)C1)CCc2ccccc2)C)C","service":"breaking-good-api","timestamp":"2025-04-24 22:12:39"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:39"}
{"0":"CC(NC1(C(=O)N(C(=O)C1)CCc2ccccc2)C)C","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:12:39"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04242522122D\n\n 20 21  0  0  0  0  0  0  0  0999 V2000\n   11.7651   -7.9234    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.3584   -7.0099    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:39"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:39"}
{"0":"\n  -INDIGO-04242522122D\n\n 20 21  0  0  0  0  0  0  0  0999 V2000\n   11.7651   -7.9234    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.3584   -7.0099    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9462   -6.2009    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   11.5394   -5.2874    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.3315   -4.3092    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.0006   -3.5660    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3370   -4.2047    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9302   -5.1182    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9521   -5.3261    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   10.6734   -5.7874    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8370   -3.3386    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3370   -2.4726    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8370   -1.6066    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3370   -0.7406    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8370    0.1254    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.8370    0.1254    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.3370   -0.7406    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.8370   -1.6066    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.4904   -4.9783    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3638   -6.9054    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  5  7  1  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  2  0  0  0  0\n  8 10  1  0  0  0  0\n  7 11  1  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 13 14  2  0  0  0  0\n 14 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n  4 19  1  0  0  0  0\n  2 20  1  0  0  0  0\n 10  4  1  0  0  0  0\n 18 13  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:12:39"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:12:41"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(C)NC1(C)CC(=O)N(CCc2ccccc2)C1=O","service":"breaking-good-api","timestamp":"2025-04-24 22:12:42"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:42"}
{"0":"CC(C)NC1(C)CC(=O)N(CCc2ccccc2)C1=O","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:12:42"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04242522122D\n\n 20 21  0  0  0  0  0  0  0  0999 V2000\n    9.8380   -8.0136    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.5812   -7.3445    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:42"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-24 22:12:42"}
{"0":"\n  -INDIGO-04242522122D\n\n 20 21  0  0  0  0  0  0  0  0999 V2000\n    9.8380   -8.0136    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.5812   -7.3445    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.5322   -7.6535    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3732   -6.3663    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1164   -5.6972    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.7042   -6.5062    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9824   -5.1972    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.7745   -4.2190    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.4436   -3.4759    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7800   -4.1145    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   10.2800   -3.2485    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7800   -2.3825    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.2800   -1.5164    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7800   -0.6504    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.2800    0.2156    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.2800    0.2156    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.7800   -0.6504    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.2800   -1.5164    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3732   -5.0281    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.3951   -5.2359    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  1  0  0  0  0\n  5  7  1  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  2  0  0  0  0\n  8 10  1  0  0  0  0\n 10 11  1  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 13 14  2  0  0  0  0\n 14 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 10 19  1  0  0  0  0\n 19 20  2  0  0  0  0\n 19  5  1  0  0  0  0\n 18 13  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-24 22:12:42"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-24 22:12:44"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:27:31"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently with as few downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"info","message":"Created request ID: 7b25fe3e-59f3-44a7-89e0-b355fa62dac3","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"info","message":"User prompt length: 814 characters","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"error","message":"Claude API error: Hostname/IP does not match certificate's altnames: Host: api.anthropic.com. is not in the cert's altnames: DNS:captiveportal-login.berkeley.edu","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Hostname/IP does not match certificate's altnames: Host: api.anthropic.com. is not in the cert's altnames: DNS:captiveportal-login.berkeley.edu","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"error","message":"Error details: {}","service":"breaking-good-api","timestamp":"2025-04-25 01:29:40"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently with as few downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-25 01:30:16"}
{"level":"info","message":"Created request ID: 16b67820-7727-4688-8da9-c21ca4df3973","service":"breaking-good-api","timestamp":"2025-04-25 01:30:16"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-25 01:30:16"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-25 01:30:16"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-25 01:30:16"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-25 01:30:16"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-25 01:30:16"}
{"level":"info","message":"User prompt length: 814 characters","service":"breaking-good-api","timestamp":"2025-04-25 01:30:16"}
{"level":"info","message":"Claude API response received: msg_019jfWn9P5A5nEdaLDufv1oP","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Received Claude response with ID: msg_019jfWn9P5A5nEdaLDufv1oP","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Using string content directly, length: 6937","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Extracted 6937 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Validating SMILES: C1=CC(=CC=C1C(=O)OC)N2CCN(CC2)C3CCC(CC3)OC(=O)C","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Attempting 3D structure generation for: C1=CC(=CC=C1C(=O)OC)N2CCN(CC2)C3CCC(CC3)OC(=O)C","service":"breaking-good-api","timestamp":"2025-04-25 01:30:50"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): C1=CC(=CC=C1C(=O)OC)N2CCN(CC2)C3CCC(CC3)OC(=O)C","service":"breaking-good-api","timestamp":"2025-04-25 01:30:51"}
{"level":"info","message":"Validating SMILES: COC(=O)C1=CC=C(C=C1)C(CS(=O)C2=CC=CC=C2)N3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-25 01:30:51"}
{"level":"info","message":"Attempting 3D structure generation for: COC(=O)C1=CC=C(C=C1)C(CS(=O)C2=CC=CC=C2)N3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-25 01:30:51"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COC(=O)C1=CC=C(C=C1)C(CS(=O)C2=CC=CC=C2)N3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-25 01:30:52"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CCN2CCN(CC2)C3=CC(=CN=C3)C(F)(F)F)C=C1OC","service":"breaking-good-api","timestamp":"2025-04-25 01:30:52"}
{"level":"info","message":"Attempting 3D structure generation for: COC1=CC=C(CCN2CCN(CC2)C3=CC(=CN=C3)C(F)(F)F)C=C1OC","service":"breaking-good-api","timestamp":"2025-04-25 01:30:53"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COC1=CC=C(CCN2CCN(CC2)C3=CC(=CN=C3)C(F)(F)F)C=C1OC","service":"breaking-good-api","timestamp":"2025-04-25 01:30:53"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-25 01:30:53"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-25 01:30:53"}
{"level":"info","message":"Saving results to file for request 16b67820-7727-4688-8da9-c21ca4df3973","service":"breaking-good-api","timestamp":"2025-04-25 01:30:53"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-25 01:30:53"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-25 01:30:54"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:30:57"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:33:11"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:33:24"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-25 01:33:42"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"H","105":"o","106":"w","107":" ","108":"c","109":"a","11":"r","110":"n","111":" ","112":"I","113":" ","114":"h","115":"e","116":"l","117":"p","118":" ","119":"w","12":"o","120":"i","121":"t","122":"h","123":" ","124":"d","125":"r","126":"u","127":"g","128":" ","129":"d","13":"l","130":"e","131":"s","132":"i","133":"g","134":"n","135":" ","136":"t","137":"o","138":"d","139":"a","14":"e","140":"y","141":"?","142":"\"","143":"\n","144":" ","145":" ","146":" ","147":" ","148":" ","149":" ","15":"\"","150":"}","151":"\n","152":" ","153":" ","154":" ","155":" ","156":"]","157":"\n","158":" ","159":" ","16":":","160":"}","161":",","162":"\n","163":" ","164":" ","165":"{","166":"\n","167":" ","168":" ","169":" ","17":" ","170":" ","171":"\"","172":"r","173":"o","174":"l","175":"e","176":"\"","177":":","178":" ","179":"\"","18":"\"","180":"u","181":"s","182":"e","183":"r","184":"\"","185":",","186":"\n","187":" ","188":" ","189":" ","19":"a","190":" ","191":"\"","192":"c","193":"o","194":"n","195":"t","196":"e","197":"n","198":"t","199":"\"","2":" ","20":"s","200":":","201":" ","202":"[","203":"\n","204":" ","205":" ","206":" ","207":" ","208":" ","209":" ","21":"s","210":"{","211":"\n","212":" ","213":" ","214":" ","215":" ","216":" ","217":" ","218":" ","219":" ","22":"i","220":"\"","221":"t","222":"y","223":"p","224":"e","225":"\"","226":":","227":" ","228":"\"","229":"t","23":"s","230":"e","231":"x","232":"t","233":"\"","234":",","235":"\n","236":" ","237":" ","238":" ","239":" ","24":"t","240":" ","241":" ","242":" ","243":" ","244":"\"","245":"t","246":"e","247":"x","248":"t","249":"\"","25":"a","250":":","251":" ","252":"\"","253":"[","254":"F","255":"o","256":"c","257":"u","258":"s","259":" ","26":"n","260":"o","261":"n","262":" ","263":"M","264":"o","265":"l","266":"e","267":"c","268":"u","269":"l","27":"t","270":"e","271":":","272":" ","273":"M","274":"o","275":"l","276":"e","277":"c","278":"u","279":"l","28":"\"","280":"e","281":" ","282":"C","283":"a","284":"n","285":"d","286":"i","287":"d","288":"a","289":"t","29":",","290":"e","291":" ","292":"3","293":",","294":" ","295":"S","296":"M","297":"I","298":"L","299":"E","3":" ","30":"\n","300":"S","301":":","302":" ","303":"C","304":"O","305":"C","306":"1","307":"=","308":"C","309":"C","31":" ","310":"=","311":"C","312":"(","313":"C","314":"C","315":"N","316":"2","317":"C","318":"C","319":"N","32":" ","320":"(","321":"C","322":"C","323":"2","324":")","325":"C","326":"3","327":"=","328":"C","329":"C","33":" ","330":"(","331":"=","332":"C","333":"N","334":"=","335":"C","336":"3","337":")","338":"C","339":"(","34":" ","340":"F","341":")","342":"(","343":"F","344":")","345":"F","346":")","347":"C","348":"=","349":"C","35":"\"","350":"1","351":"O","352":"C","353":"]","354":"\"","355":"\n","356":" ","357":" ","358":" ","359":" ","36":"c","360":" ","361":" ","362":"}","363":"\n","364":" ","365":" ","366":" ","367":" ","368":"]","369":"\n","37":"o","370":" ","371":" ","372":"}","373":",","374":"\n","375":" ","376":" ","377":"{","378":"\n","379":" ","38":"n","380":" ","381":" ","382":" ","383":"\"","384":"r","385":"o","386":"l","387":"e","388":"\"","389":":","39":"t","390":" ","391":"\"","392":"u","393":"s","394":"e","395":"r","396":"\"","397":",","398":"\n","399":" ","4":"{","40":"e","400":" ","401":" ","402":" ","403":"\"","404":"c","405":"o","406":"n","407":"t","408":"e","409":"n","41":"n","410":"t","411":"\"","412":":","413":" ","414":"[","415":"\n","416":" ","417":" ","418":" ","419":" ","42":"t","420":" ","421":" ","422":"{","423":"\n","424":" ","425":" ","426":" ","427":" ","428":" ","429":" ","43":"\"","430":" ","431":" ","432":"\"","433":"t","434":"y","435":"p","436":"e","437":"\"","438":":","439":" ","44":":","440":"\"","441":"t","442":"e","443":"x","444":"t","445":"\"","446":",","447":"\n","448":" ","449":" ","45":" ","450":" ","451":" ","452":" ","453":" ","454":" ","455":" ","456":"\"","457":"t","458":"e","459":"x","46":"[","460":"t","461":"\"","462":":","463":" ","464":"\"","465":"T","466":"e","467":"l","468":"l","469":" ","47":"\n","470":"m","471":"e","472":" ","473":"m","474":"o","475":"r","476":"e","477":" ","478":"a","479":"b","48":" ","480":"o","481":"u","482":"t","483":" ","484":"c","485":"a","486":"n","487":"d","488":"i","489":"d","49":" ","490":"a","491":"t","492":"e","493":" ","494":"3","495":"'","496":"s","497":" ","498":"e","499":"x","5":"\n","50":" ","500":"p","501":"e","502":"c","503":"t","504":"e","505":"d","506":" ","507":"p","508":"r","509":"o","51":" ","510":"p","511":"e","512":"r","513":"t","514":"i","515":"e","516":"s","517":"\"","518":"\n","519":" ","52":" ","520":" ","521":" ","522":" ","523":" ","524":" ","525":"}","526":"\n","527":" ","528":" ","529":" ","53":" ","530":" ","531":"]","532":"\n","533":" ","534":" ","535":"}","536":"\n","537":"]","54":"{","55":"\n","56":" ","57":" ","58":" ","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-25 01:33:42"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-25 01:33:42"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-25 01:33:52"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:35:18"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:35:22"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:35:30"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252501352D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 01:35:34"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 01:35:34"}
{"0":"\n  -INDIGO-04252501352D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 01:35:34"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:35:37"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: COC1=CC=C(CCN2CCN(CC2)C3=CC(=CN=C3)C(F)(F)F)C=C1OC","service":"breaking-good-api","timestamp":"2025-04-25 01:36:59"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 01:36:59"}
{"0":"COC1=CC=C(CCN2CCN(CC2)C3=CC(=CN=C3)C(F)(F)F)C=C1OC","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 01:36:59"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252501372D\n\n 28 30  0  0  0  0  0  0  0  0999 V2000\n   16.3964   -6.1541    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   15.8964   -5.2881    0.0000 O   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 01:37:00"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 01:37:00"}
{"0":"\n  -INDIGO-04252501372D\n\n 28 30  0  0  0  0  0  0  0  0999 V2000\n   16.3964   -6.1541    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   15.8964   -5.2881    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   14.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.3964   -6.1541    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.3964   -6.1541    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3964   -4.4221    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8964   -3.5560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.8964   -3.5560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.3964   -4.4221    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.8964   -3.5560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.8964   -3.5560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.8964   -5.2881    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    6.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.3964   -2.6900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.8964   -1.8239    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n    6.2624   -2.1900    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n    4.5304   -3.1900    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n   13.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.8964   -3.5560    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   14.3964   -2.6900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  2  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  1  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 13 14  1  0  0  0  0\n 12 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  2  0  0  0  0\n 17 21  1  0  0  0  0\n 21 22  1  0  0  0  0\n 21 23  1  0  0  0  0\n 21 24  1  0  0  0  0\n  6 25  1  0  0  0  0\n 25 26  2  0  0  0  0\n 26 27  1  0  0  0  0\n 27 28  1  0  0  0  0\n 26  3  1  0  0  0  0\n 14  9  1  0  0  0  0\n 20 15  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 01:37:00"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:37:03"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: COC1=CC=C(CCN2CCN(CC2)C3=CC(=CN=C3)C(F)(F)F)C=C1OC","service":"breaking-good-api","timestamp":"2025-04-25 01:37:13"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 01:37:13"}
{"0":"COC1=CC=C(CCN2CCN(CC2)C3=CC(=CN=C3)C(F)(F)F)C=C1OC","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 01:37:13"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252501372D\n\n 28 30  0  0  0  0  0  0  0  0999 V2000\n   16.3964   -6.1541    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   15.8964   -5.2881    0.0000 O   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 01:37:14"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 01:37:14"}
{"0":"\n  -INDIGO-04252501372D\n\n 28 30  0  0  0  0  0  0  0  0999 V2000\n   16.3964   -6.1541    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   15.8964   -5.2881    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   14.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.3964   -6.1541    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.3964   -6.1541    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3964   -4.4221    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8964   -3.5560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.8964   -3.5560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.3964   -4.4221    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.8964   -3.5560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.8964   -3.5560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.8964   -5.2881    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    6.8964   -5.2881    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.3964   -2.6900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.8964   -1.8239    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n    6.2624   -2.1900    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n    4.5304   -3.1900    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n   13.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.3964   -4.4221    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.8964   -3.5560    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   14.3964   -2.6900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  2  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  1  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 13 14  1  0  0  0  0\n 12 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  2  0  0  0  0\n 17 21  1  0  0  0  0\n 21 22  1  0  0  0  0\n 21 23  1  0  0  0  0\n 21 24  1  0  0  0  0\n  6 25  1  0  0  0  0\n 25 26  2  0  0  0  0\n 26 27  1  0  0  0  0\n 27 28  1  0  0  0  0\n 26  3  1  0  0  0  0\n 14  9  1  0  0  0  0\n 20 15  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 01:37:14"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:37:17"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 01:38:06"}
{"level":"info","message":"Found 10 IDs (total 53992)","service":"breaking-good-api","timestamp":"2025-04-25 01:38:07"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 01:38:07"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-25 01:38:10"}
{"level":"info","message":"Searching PubMed for: poop AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 01:38:22"}
{"level":"info","message":"Found 10 IDs (total 2829)","service":"breaking-good-api","timestamp":"2025-04-25 01:38:23"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 01:38:23"}
{"level":"info","message":"Searching PubMed for: malaria AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 01:38:34"}
{"level":"info","message":"Found 10 IDs (total 1430)","service":"breaking-good-api","timestamp":"2025-04-25 01:38:35"}
{"level":"error","message":"Literature search error: pubmedData?.ArticleIdList?.ArticleId?.find is not a function","service":"breaking-good-api","stack":"TypeError: pubmedData?.ArticleIdList?.ArticleId?.find is not a function\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:87:59\n    at Array.map (<anonymous>)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:62:40\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","timestamp":"2025-04-25 01:38:35"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 01:38:38"}
{"level":"info","message":"Found 10 IDs (total 53992)","service":"breaking-good-api","timestamp":"2025-04-25 01:38:39"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 01:38:39"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-25 01:38:49"}
{"level":"error","message":"Error comparing molecules: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: the following arguments are required: --operation\r\n","service":"breaking-good-api","timestamp":"2025-04-25 01:40:16"}
{"level":"info","message":"Generating regulatory report for SMILES: CC(N)CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-25 01:40:22"}
{"level":"info","message":"Successfully fetched molecular properties.","service":"breaking-good-api","timestamp":"2025-04-25 01:40:23"}
{"level":"info","message":"Successfully fetched ADMET predictions.","service":"breaking-good-api","timestamp":"2025-04-25 01:40:23"}
{"level":"error","message":"Error fetching similar drugs: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-25 01:40:23"}
{"level":"error","message":"Error calling Claude for regulatory analysis: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-25 01:40:23"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:40:25"}
{"level":"info","message":"Generating regulatory report for SMILES: CC(N)CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-25 01:40:42"}
{"level":"info","message":"Successfully fetched molecular properties.","service":"breaking-good-api","timestamp":"2025-04-25 01:40:42"}
{"level":"info","message":"Successfully fetched ADMET predictions.","service":"breaking-good-api","timestamp":"2025-04-25 01:40:43"}
{"level":"error","message":"Error fetching similar drugs: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-25 01:40:43"}
{"level":"error","message":"Error calling Claude for regulatory analysis: Request failed with status code 404","service":"breaking-good-api","timestamp":"2025-04-25 01:40:43"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:40:45"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252501422D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 01:42:24"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 01:42:24"}
{"0":"\n  -INDIGO-04252501422D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 01:42:24"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:42:26"}
{"level":"error","message":"Error comparing molecules: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: the following arguments are required: --operation\r\n","service":"breaking-good-api","timestamp":"2025-04-25 01:42:36"}
{"level":"error","message":"Error comparing molecules: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: the following arguments are required: --operation\r\n","service":"breaking-good-api","timestamp":"2025-04-25 01:43:11"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:45:01"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252501452D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 01:45:25"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 01:45:25"}
{"0":"\n  -INDIGO-04252501452D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 01:45:25"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:45:27"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:45:50"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:45:56"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:46:07"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:46:12"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:46:20"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:46:27"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 01:46:50"}
{"level":"info","message":"Found 10 IDs (total 53992)","service":"breaking-good-api","timestamp":"2025-04-25 01:46:51"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 01:46:51"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-25 01:46:54"}
{"level":"info","message":"Fetching details for ID: 31982036","service":"breaking-good-api","timestamp":"2025-04-25 01:47:09"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:49:00"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252501492D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 01:49:20"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 01:49:20"}
{"0":"\n  -INDIGO-04252501492D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 01:49:20"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:49:23"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252501492D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 01:49:55"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 01:49:55"}
{"0":"\n  -INDIGO-04252501492D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 01:49:55"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 01:49:57"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252502142D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 02:14:24"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 02:14:24"}
{"0":"\n  -INDIGO-04252502142D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 02:14:24"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 02:14:26"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:24:47"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-25 16:26:02"}
{"level":"info","message":"Created request ID: 5ebf92b3-5e38-457e-aa8d-c7b858d4b64d","service":"breaking-good-api","timestamp":"2025-04-25 16:26:02"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-25 16:26:02"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-25 16:26:02"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-25 16:26:02"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-25 16:26:02"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-25 16:26:02"}
{"level":"info","message":"User prompt length: 814 characters","service":"breaking-good-api","timestamp":"2025-04-25 16:26:02"}
{"level":"info","message":"Claude API response received: msg_01AcjSxXg6XjFNcQuQjJxTEE","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Received Claude response with ID: msg_01AcjSxXg6XjFNcQuQjJxTEE","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Using string content directly, length: 7330","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Extracted 7330 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(cc1)C(=O)NC(C)(C)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1ccc(cc1)C(=O)NC(C)(C)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:26:41"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1ccc(cc1)C(=O)NC(C)(C)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:26:42"}
{"level":"info","message":"Validating SMILES: N-(1-(4-fluorophenyl)-1-methylethyl)-4-(2-aminopropyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 16:26:42"}
{"level":"info","message":"Attempting 3D structure generation for: N-(1-(4-fluorophenyl)-1-methylethyl)-4-(2-aminopropyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 16:26:42"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(1-(4-fluorophenyl)-1-methylethyl)-4-(2-aminopropyl)benzamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-25 16:26:42"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(1-(4-fluorophenyl)-1-methylethyl)-4-(2-aminopropyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 16:26:42"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(N)C)ccc1OCCCNc1ncnc2[nH]cnc12","service":"breaking-good-api","timestamp":"2025-04-25 16:26:42"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(CC(N)C)ccc1OCCCNc1ncnc2[nH]cnc12","service":"breaking-good-api","timestamp":"2025-04-25 16:26:42"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(CC(N)C)ccc1OCCCNc1ncnc2[nH]cnc12","service":"breaking-good-api","timestamp":"2025-04-25 16:26:42"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)OC(C)(C)C)Cc1ccc(OC(=O)C(C)C)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-25 16:26:42"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC(=O)OC(C)(C)C)Cc1ccc(OC(=O)C(C)C)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-25 16:26:43"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC(=O)OC(C)(C)C)Cc1ccc(OC(=O)C(C)C)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-25 16:26:43"}
{"level":"info","message":"Validated 4 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-25 16:26:43"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-25 16:26:43"}
{"level":"info","message":"Saving results to file for request 5ebf92b3-5e38-457e-aa8d-c7b858d4b64d","service":"breaking-good-api","timestamp":"2025-04-25 16:26:43"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-25 16:26:43"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-25 16:26:43"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:26:46"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:27:28"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:27:35"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:27:45"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-25 16:30:31"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"H","105":"o","106":"w","107":" ","108":"c","109":"a","11":"r","110":"n","111":" ","112":"I","113":" ","114":"h","115":"e","116":"l","117":"p","118":" ","119":"w","12":"o","120":"i","121":"t","122":"h","123":" ","124":"d","125":"r","126":"u","127":"g","128":" ","129":"d","13":"l","130":"e","131":"s","132":"i","133":"g","134":"n","135":" ","136":"t","137":"o","138":"d","139":"a","14":"e","140":"y","141":"?","142":"\"","143":"\n","144":" ","145":" ","146":" ","147":" ","148":" ","149":" ","15":"\"","150":"}","151":"\n","152":" ","153":" ","154":" ","155":" ","156":"]","157":"\n","158":" ","159":" ","16":":","160":"}","161":",","162":"\n","163":" ","164":" ","165":"{","166":"\n","167":" ","168":" ","169":" ","17":" ","170":" ","171":"\"","172":"r","173":"o","174":"l","175":"e","176":"\"","177":":","178":" ","179":"\"","18":"\"","180":"u","181":"s","182":"e","183":"r","184":"\"","185":",","186":"\n","187":" ","188":" ","189":" ","19":"a","190":" ","191":"\"","192":"c","193":"o","194":"n","195":"t","196":"e","197":"n","198":"t","199":"\"","2":" ","20":"s","200":":","201":" ","202":"[","203":"\n","204":" ","205":" ","206":" ","207":" ","208":" ","209":" ","21":"s","210":"{","211":"\n","212":" ","213":" ","214":" ","215":" ","216":" ","217":" ","218":" ","219":" ","22":"i","220":"\"","221":"t","222":"y","223":"p","224":"e","225":"\"","226":":","227":" ","228":"\"","229":"t","23":"s","230":"e","231":"x","232":"t","233":"\"","234":",","235":"\n","236":" ","237":" ","238":" ","239":" ","24":"t","240":" ","241":" ","242":" ","243":" ","244":"\"","245":"t","246":"e","247":"x","248":"t","249":"\"","25":"a","250":":","251":" ","252":"\"","253":"[","254":"F","255":"o","256":"c","257":"u","258":"s","259":" ","26":"n","260":"o","261":"n","262":" ","263":"M","264":"o","265":"l","266":"e","267":"c","268":"u","269":"l","27":"t","270":"e","271":":","272":" ","273":"M","274":"o","275":"l","276":"e","277":"c","278":"u","279":"l","28":"\"","280":"e","281":" ","282":"C","283":"a","284":"n","285":"d","286":"i","287":"d","288":"a","289":"t","29":",","290":"e","291":" ","292":"4","293":",","294":" ","295":"S","296":"M","297":"I","298":"L","299":"E","3":" ","30":"\n","300":"S","301":":","302":" ","303":"C","304":"C","305":"(","306":"N","307":"C","308":"(","309":"=","31":" ","310":"O","311":")","312":"O","313":"C","314":"(","315":"C","316":")","317":"(","318":"C","319":")","32":" ","320":"C","321":")","322":"C","323":"c","324":"1","325":"c","326":"c","327":"c","328":"(","329":"O","33":" ","330":"C","331":"(","332":"=","333":"O","334":")","335":"C","336":"(","337":"C","338":")","339":"C","34":" ","340":")","341":"c","342":"(","343":"O","344":"C","345":")","346":"c","347":"1","348":"]","349":"\"","35":"\"","350":"\n","351":" ","352":" ","353":" ","354":" ","355":" ","356":" ","357":"}","358":"\n","359":" ","36":"c","360":" ","361":" ","362":" ","363":"]","364":"\n","365":" ","366":" ","367":"}","368":",","369":"\n","37":"o","370":" ","371":" ","372":"{","373":"\n","374":" ","375":" ","376":" ","377":" ","378":"\"","379":"r","38":"n","380":"o","381":"l","382":"e","383":"\"","384":":","385":" ","386":"\"","387":"u","388":"s","389":"e","39":"t","390":"r","391":"\"","392":",","393":"\n","394":" ","395":" ","396":" ","397":" ","398":"\"","399":"c","4":"{","40":"e","400":"o","401":"n","402":"t","403":"e","404":"n","405":"t","406":"\"","407":":","408":" ","409":"[","41":"n","410":"\n","411":" ","412":" ","413":" ","414":" ","415":" ","416":" ","417":"{","418":"\n","419":" ","42":"t","420":" ","421":" ","422":" ","423":" ","424":" ","425":" ","426":" ","427":"\"","428":"t","429":"y","43":"\"","430":"p","431":"e","432":"\"","433":":","434":" ","435":"\"","436":"t","437":"e","438":"x","439":"t","44":":","440":"\"","441":",","442":"\n","443":" ","444":" ","445":" ","446":" ","447":" ","448":" ","449":" ","45":" ","450":" ","451":"\"","452":"t","453":"e","454":"x","455":"t","456":"\"","457":":","458":" ","459":"\"","46":"[","460":"T","461":"e","462":"l","463":"l","464":" ","465":"m","466":"e","467":" ","468":"m","469":"o","47":"\n","470":"r","471":"e","472":" ","473":"a","474":"b","475":"o","476":"u","477":"t","478":" ","479":"t","48":" ","480":"h","481":"e","482":" ","483":"p","484":"r","485":"o","486":"p","487":"e","488":"r","489":"t","49":" ","490":"i","491":"e","492":"s","493":"?","494":"\"","495":"\n","496":" ","497":" ","498":" ","499":" ","5":"\n","50":" ","500":" ","501":" ","502":"}","503":"\n","504":" ","505":" ","506":" ","507":" ","508":"]","509":"\n","51":" ","510":" ","511":" ","512":"}","513":"\n","514":"]","52":" ","53":" ","54":"{","55":"\n","56":" ","57":" ","58":" ","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-25 16:30:31"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-25 16:30:31"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-25 16:30:39"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516312D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 16:31:43"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:43"}
{"0":"\n  -INDIGO-04252516312D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:31:43"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:31:44"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(N)Cc1ccc(cc1)C(=O)NC(C)(C)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:31:51"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:51"}
{"0":"CC(N)Cc1ccc(cc1)C(=O)NC(C)(C)c1ccc(F)cc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:31:51"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516312D\n\n 23 24  0  0  0  0  0  0  0  0999 V2000\n   15.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:51"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:51"}
{"0":"\n  -INDIGO-04252516312D\n\n 23 24  0  0  0  0  0  0  0  0999 V2000\n   15.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4634   -5.7880    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9634   -4.9220    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9634   -3.1900    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9634   -2.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9634   -4.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4634   -2.3239    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4634   -2.3239    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9634   -3.1900    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  2  0  0  0  0\n  8 11  1  0  0  0  0\n 11 12  2  0  0  0  0\n 11 13  1  0  0  0  0\n 13 14  1  0  0  0  0\n 14 15  1  0  0  0  0\n 14 16  1  0  0  0  0\n 14 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  2  0  0  0  0\n 20 21  1  0  0  0  0\n 20 22  1  0  0  0  0\n 22 23  2  0  0  0  0\n 10  5  1  0  0  0  0\n 23 17  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:31:51"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:31:53"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(N)Cc1ccc(cc1)C(=O)NC(C)(C)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:31:53"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:53"}
{"0":"CC(N)Cc1ccc(cc1)C(=O)NC(C)(C)c1ccc(F)cc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:31:53"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516312D\n\n 23 24  0  0  0  0  0  0  0  0999 V2000\n   15.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:53"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:53"}
{"0":"\n  -INDIGO-04252516312D\n\n 23 24  0  0  0  0  0  0  0  0999 V2000\n   15.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4634   -5.7880    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9634   -4.9220    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9634   -3.1900    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9634   -2.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9634   -4.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4634   -2.3239    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4634   -2.3239    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9634   -3.1900    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  2  0  0  0  0\n  8 11  1  0  0  0  0\n 11 12  2  0  0  0  0\n 11 13  1  0  0  0  0\n 13 14  1  0  0  0  0\n 14 15  1  0  0  0  0\n 14 16  1  0  0  0  0\n 14 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  2  0  0  0  0\n 20 21  1  0  0  0  0\n 20 22  1  0  0  0  0\n 22 23  2  0  0  0  0\n 10  5  1  0  0  0  0\n 23 17  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:31:53"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(N)Cc1ccc(C(=O)NC(C)(C)c2ccc(F)cc2)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:31:54"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:54"}
{"0":"CC(N)Cc1ccc(C(=O)NC(C)(C)c2ccc(F)cc2)cc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:31:54"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516312D\n\n 23 24  0  0  0  0  0  0  0  0999 V2000\n   15.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:54"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:31:54"}
{"0":"\n  -INDIGO-04252516312D\n\n 23 24  0  0  0  0  0  0  0  0999 V2000\n   15.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4634   -5.7880    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9634   -4.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9634   -4.9220    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9634   -3.1900    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9634   -2.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9634   -4.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4634   -2.3239    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4634   -2.3239    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9634   -3.1900    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4634   -4.0560    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9634   -3.1900    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  2  0  0  0  0\n  9 11  1  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 12 14  1  0  0  0  0\n 12 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 18 20  1  0  0  0  0\n 20 21  2  0  0  0  0\n  8 22  1  0  0  0  0\n 22 23  2  0  0  0  0\n 23  5  1  0  0  0  0\n 21 15  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:31:54"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:31:56"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516342D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 16:34:02"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:02"}
{"0":"\n  -INDIGO-04252516342D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:34:02"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:04"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516342D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 16:34:05"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:05"}
{"0":"\n  -INDIGO-04252516342D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:34:05"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:06"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516342D\n\n  6  5  0  0  0  0  0  0  0  0999 V2000\n    9.9887   -4.0250    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.0718   -4.0250    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:06"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:06"}
{"0":"\n  -INDIGO-04252516342D\n\n  6  5  0  0  0  0  0  0  0  0999 V2000\n    9.9887   -4.0250    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.0718   -4.0250    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6139   -3.1834    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.5024   -3.1834    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    9.5024   -4.8666    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n   11.5581   -4.8666    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  1  4  1  0  0  0  0\n  1  5  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  6  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:34:06"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:08"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: [H]C([H])C([H])O","service":"breaking-good-api","timestamp":"2025-04-25 16:34:09"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:09"}
{"0":"[H]C([H])C([H])O","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:34:09"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516342D\n\n  3  2  0  0  0  0  0  0  0  0999 V2000\n    9.5046   -4.1490    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3706   -3.6490    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:09"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:09"}
{"0":"\n  -INDIGO-04252516342D\n\n  3  2  0  0  0  0  0  0  0  0999 V2000\n    9.5046   -4.1490    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3706   -3.6490    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.2367   -4.1490    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:34:09"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:12"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CCO","service":"breaking-good-api","timestamp":"2025-04-25 16:34:12"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:12"}
{"0":"CCO","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:34:12"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516342D\n\n  3  2  0  0  0  0  0  0  0  0999 V2000\n    9.9146   -4.1490    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7806   -3.6490    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:12"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:12"}
{"0":"\n  -INDIGO-04252516342D\n\n  3  2  0  0  0  0  0  0  0  0999 V2000\n    9.9146   -4.1490    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7806   -3.6490    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6467   -4.1490    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:34:12"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:14"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516342D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 16:34:17"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:17"}
{"0":"\n  -INDIGO-04252516342D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:34:17"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516342D\n\n  6  5  0  0  0  0  0  0  0  0999 V2000\n    9.9887   -6.7650    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.0718   -6.7650    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:18"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:34:18"}
{"0":"\n  -INDIGO-04252516342D\n\n  6  5  0  0  0  0  0  0  0  0999 V2000\n    9.9887   -6.7650    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.0718   -6.7650    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6139   -5.9234    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.5024   -5.9234    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    9.5024   -7.6066    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n   11.5581   -7.6066    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  1  4  1  0  0  0  0\n  1  5  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  6  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:34:18"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:19"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:34"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:36"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:40"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:34:53"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516352D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 16:35:10"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:35:10"}
{"0":"\n  -INDIGO-04252516352D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:35:10"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:35:12"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:35:44"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 16:36:08"}
{"level":"info","message":"Found 10 IDs (total 54001)","service":"breaking-good-api","timestamp":"2025-04-25 16:36:08"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 16:36:09"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-25 16:36:15"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-25 16:36:23"}
{"level":"info","message":"Searching PubMed for: poop AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 16:36:36"}
{"level":"info","message":"Found 10 IDs (total 2830)","service":"breaking-good-api","timestamp":"2025-04-25 16:36:37"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 16:36:37"}
{"level":"info","message":"Searching PubMed for: neuro AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: NaN","service":"breaking-good-api","timestamp":"2025-04-25 16:37:48"}
{"level":"info","message":"Found 0 IDs (total 0)","service":"breaking-good-api","timestamp":"2025-04-25 16:37:48"}
{"level":"info","message":"Searching PubMed for: neuroscience AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 16:37:50"}
{"level":"info","message":"Found 10 IDs (total 92271)","service":"breaking-good-api","timestamp":"2025-04-25 16:37:50"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 16:37:51"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 16:38:07"}
{"level":"info","message":"Found 10 IDs (total 54001)","service":"breaking-good-api","timestamp":"2025-04-25 16:38:07"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 16:38:08"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-25 16:38:09"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252516392D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 16:39:58"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 16:39:58"}
{"0":"\n  -INDIGO-04252516392D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 16:39:58"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:40:00"}
{"level":"info","message":"Searching PubMed for: piss AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 16:40:57"}
{"level":"info","message":"Found 10 IDs (total 35828)","service":"breaking-good-api","timestamp":"2025-04-25 16:40:58"}
{"level":"error","message":"Literature search error: pubmedData?.ArticleIdList?.ArticleId?.find is not a function","service":"breaking-good-api","stack":"TypeError: pubmedData?.ArticleIdList?.ArticleId?.find is not a function\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:87:59\n    at Array.map (<anonymous>)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:62:40\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","timestamp":"2025-04-25 16:40:58"}
{"level":"info","message":"Searching PubMed for: poop AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 16:41:02"}
{"level":"info","message":"Found 10 IDs (total 2830)","service":"breaking-good-api","timestamp":"2025-04-25 16:41:03"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 16:41:03"}
{"level":"info","message":"Searching PubMed for: Patent ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 16:41:18"}
{"level":"info","message":"Found 10 IDs (total 398)","service":"breaking-good-api","timestamp":"2025-04-25 16:41:18"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 16:41:19"}
{"level":"info","message":"Searching PubMed for: patent AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 16:41:34"}
{"level":"info","message":"Found 10 IDs (total 5203)","service":"breaking-good-api","timestamp":"2025-04-25 16:41:35"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 16:41:35"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-25 16:50:19"}
{"level":"info","message":"Created request ID: 2e7fef0c-1838-43c6-8186-e254490e44d2","service":"breaking-good-api","timestamp":"2025-04-25 16:50:19"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-25 16:50:19"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-25 16:50:19"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-25 16:50:19"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-25 16:50:19"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-25 16:50:19"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-25 16:50:19"}
{"level":"info","message":"Claude API response received: msg_01PnimCjD3Y7UeDM3CcQG74N","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Received Claude response with ID: msg_01PnimCjD3Y7UeDM3CcQG74N","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Using string content directly, length: 9127","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Extracted 9127 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)NC(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1ccc(OC(=O)NC(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1ccc(OC(=O)NC(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Validating SMILES: S)-2-amino-N-(4-(2-aminopropyl)phenyl)-4-(pyrrolidin-1-ylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"info","message":"Attempting 3D structure generation for: S)-2-amino-N-(4-(2-aminopropyl)phenyl)-4-(pyrrolidin-1-ylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 16:51:03"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: S)-2-amino-N-(4-(2-aminopropyl)phenyl)-4-(pyrrolidin-1-ylsulfonyl)benzamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"info","message":"Added molecule with properties but without 3D structure: S)-2-amino-N-(4-(2-aminopropyl)phenyl)-4-(pyrrolidin-1-ylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"info","message":"Validating SMILES: CN1C(=O)N(C)c2ccc(CC(=O)OCCN3CCN(C)CC3)cc21","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"info","message":"Attempting 3D structure generation for: CN1C(=O)N(C)c2ccc(CC(=O)OCCN3CCN(C)CC3)cc21","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CN1C(=O)N(C)c2ccc(CC(=O)OCCN3CCN(C)CC3)cc21","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"info","message":"Validating SMILES: 2-(4-(1,3-dimethyl-2,3-dihydro-1H-benzo[d]imidazol-2-one)phenyl)-N-(2-(4-methylpiperazin-1-yl)ethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"info","message":"Attempting 3D structure generation for: 2-(4-(1,3-dimethyl-2,3-dihydro-1H-benzo[d]imidazol-2-one)phenyl)-N-(2-(4-methylpiperazin-1-yl)ethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-(4-(1,3-dimethyl-2,3-dihydro-1H-benzo[d]imidazol-2-one)phenyl)-N-(2-(4-methylpiperazin-1-yl)ethyl)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-(4-(1,3-dimethyl-2,3-dihydro-1H-benzo[d]imidazol-2-one)phenyl)-N-(2-(4-methylpiperazin-1-yl)ethyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OCCOc2ccc3c(c2)CCN(C)C3=O)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:51:04"}
{"level":"info","message":"Attempting 3D structure generation for: CC(N)Cc1ccc(OCCOc2ccc3c(c2)CCN(C)C3=O)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:51:05"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(N)Cc1ccc(OCCOc2ccc3c(c2)CCN(C)C3=O)cc1","service":"breaking-good-api","timestamp":"2025-04-25 16:51:05"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-25 16:51:05"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-25 16:51:05"}
{"level":"info","message":"Saving results to file for request 2e7fef0c-1838-43c6-8186-e254490e44d2","service":"breaking-good-api","timestamp":"2025-04-25 16:51:05"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-25 16:51:05"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-25 16:51:05"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 16:51:08"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(N)Cc1ccc(OC(=O)NC(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)cc1","service":"breaking-good-api","timestamp":"2025-04-25 17:00:29"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:29"}
{"0":"CC(N)Cc1ccc(OC(=O)NC(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)cc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 17:00:29"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252517002D\n\n 30 32  0  0  0  0  0  0  0  0999 V2000\n   17.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   16.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:29"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:29"}
{"0":"\n  -INDIGO-04252517002D\n\n 30 32  0  0  0  0  0  0  0  0999 V2000\n   17.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   16.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   15.9331   -6.2211    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   15.9331   -4.4890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9331   -4.4890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9331   -4.4890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9331   -4.4890    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9331   -2.7569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4331   -3.6230    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9331   -2.7569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4331   -1.8909    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9331   -2.7569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4331   -1.8909    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4331   -1.8909    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9331   -2.7569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -2.7569    0.0000 S   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -1.7569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -3.7569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9331   -2.7569    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    4.3453   -3.5659    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3943   -3.2569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3943   -2.2569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.3453   -1.9479    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 10 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 13 14  2  0  0  0  0\n 13 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  2  0  0  0  0\n 19 21  2  0  0  0  0\n 19 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  1  0  0  0  0\n 24 25  1  0  0  0  0\n 25 26  1  0  0  0  0\n 18 27  1  0  0  0  0\n 27 28  2  0  0  0  0\n  8 29  1  0  0  0  0\n 29 30  2  0  0  0  0\n 30  5  1  0  0  0  0\n 28 15  1  0  0  0  0\n 26 22  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 17:00:29"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252517002D\n\n 30 32  0  0  0  0  0  0  0  0999 V2000\n   17.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   16.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:29"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:29"}
{"0":"\n  -INDIGO-04252517002D\n\n 30 32  0  0  0  0  0  0  0  0999 V2000\n   17.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   16.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   15.9331   -6.2211    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   15.9331   -4.4890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9331   -4.4890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9331   -4.4890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9331   -4.4890    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9331   -2.7569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4331   -3.6230    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9331   -2.7569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4331   -1.8909    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9331   -2.7569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4331   -1.8909    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4331   -1.8909    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9331   -2.7569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -2.7569    0.0000 S   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -1.7569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -3.7569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9331   -2.7569    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    4.3453   -3.5659    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3943   -3.2569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3943   -2.2569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.3453   -1.9479    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 10 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 13 14  2  0  0  0  0\n 13 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  2  0  0  0  0\n 19 21  2  0  0  0  0\n 19 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  1  0  0  0  0\n 24 25  1  0  0  0  0\n 25 26  1  0  0  0  0\n 18 27  1  0  0  0  0\n 27 28  2  0  0  0  0\n  8 29  1  0  0  0  0\n 29 30  2  0  0  0  0\n 30  5  1  0  0  0  0\n 28 15  1  0  0  0  0\n 26 22  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 17:00:29"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 17:00:32"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(N)Cc1ccc(OC(=O)NC(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)cc1","service":"breaking-good-api","timestamp":"2025-04-25 17:00:32"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:32"}
{"0":"CC(N)Cc1ccc(OC(=O)NC(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)cc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 17:00:32"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252517002D\n\n 30 32  0  0  0  0  0  0  0  0999 V2000\n   17.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   16.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:32"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:32"}
{"0":"\n  -INDIGO-04252517002D\n\n 30 32  0  0  0  0  0  0  0  0999 V2000\n   17.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   16.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   15.9331   -6.2211    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   15.9331   -4.4890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9331   -4.4890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4331   -5.3550    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9331   -4.4890    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9331   -4.4890    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9331   -2.7569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4331   -3.6230    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9331   -2.7569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4331   -1.8909    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9331   -2.7569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4331   -1.8909    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4331   -1.8909    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9331   -2.7569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -2.7569    0.0000 S   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -1.7569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -3.7569    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9331   -2.7569    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    4.3453   -3.5659    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3943   -3.2569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3943   -2.2569    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.3453   -1.9479    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4331   -3.6230    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 10 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 13 14  2  0  0  0  0\n 13 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  2  0  0  0  0\n 19 21  2  0  0  0  0\n 19 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  1  0  0  0  0\n 24 25  1  0  0  0  0\n 25 26  1  0  0  0  0\n 18 27  1  0  0  0  0\n 27 28  2  0  0  0  0\n  8 29  1  0  0  0  0\n 29 30  2  0  0  0  0\n 30  5  1  0  0  0  0\n 28 15  1  0  0  0  0\n 26 22  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 17:00:32"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 17:00:34"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 17:00:42"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(N)Cc1ccc(OC(=O)NC(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)cc1","service":"breaking-good-api","timestamp":"2025-04-25 17:00:53"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:53"}
{"0":"CC(N)Cc1ccc(OC(=O)NC(=O)c2ccc(S(=O)(=O)N3CCCC3)cc2)cc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 17:00:53"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252517002D\n\n 30 32  0  0  0  0  0  0  0  0999 V2000\n   17.4331   -7.8350    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   16.4331   -7.8350    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:54"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 17:00:54"}
{"0":"\n  -INDIGO-04252517002D\n\n 30 32  0  0  0  0  0  0  0  0999 V2000\n   17.4331   -7.8350    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   16.4331   -7.8350    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   15.9331   -8.7011    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   15.9331   -6.9690    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9331   -6.9690    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4331   -7.8350    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4331   -7.8350    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9331   -6.9690    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9331   -6.9690    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4331   -6.1030    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9331   -5.2369    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4331   -6.1030    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9331   -5.2369    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4331   -4.3709    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9331   -5.2369    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4331   -4.3709    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4331   -4.3709    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9331   -5.2369    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -5.2369    0.0000 S   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -4.2369    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9331   -6.2369    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9331   -5.2369    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    4.3453   -6.0459    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3943   -5.7369    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3943   -4.7369    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.3453   -4.4279    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4331   -6.1030    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4331   -6.1030    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4331   -6.1030    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.4331   -6.1030    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  2  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  2  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  2  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 10 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 13 14  2  0  0  0  0\n 13 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  2  0  0  0  0\n 19 21  2  0  0  0  0\n 19 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  1  0  0  0  0\n 24 25  1  0  0  0  0\n 25 26  1  0  0  0  0\n 18 27  1  0  0  0  0\n 27 28  2  0  0  0  0\n  8 29  1  0  0  0  0\n 29 30  2  0  0  0  0\n 30  5  1  0  0  0  0\n 28 15  1  0  0  0  0\n 26 22  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 17:00:54"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 17:00:56"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 17:04:25"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 17:04:30"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 20:01:07"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252520122D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 20:12:01"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 20:12:01"}
{"0":"\n  -INDIGO-04252520122D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 20:12:01"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 20:12:03"}
{"level":"info","message":"Searching PubMed for: poop AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 21:41:39"}
{"level":"info","message":"Found 10 IDs (total 2830)","service":"breaking-good-api","timestamp":"2025-04-25 21:41:40"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 21:41:41"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 21:41:52"}
{"level":"info","message":"Found 10 IDs (total 54001)","service":"breaking-good-api","timestamp":"2025-04-25 21:41:52"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 21:41:53"}
{"level":"info","message":"Searching PubMed for: neuroscience AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-25 21:41:58"}
{"level":"info","message":"Found 10 IDs (total 92271)","service":"breaking-good-api","timestamp":"2025-04-25 21:41:58"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-25 21:41:59"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently without as many downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-25 21:43:37"}
{"level":"info","message":"Created request ID: 355d427d-ca87-40ca-adeb-264b31595ef3","service":"breaking-good-api","timestamp":"2025-04-25 21:43:37"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-25 21:43:37"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-25 21:43:37"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-25 21:43:37"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-25 21:43:37"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-25 21:43:37"}
{"level":"info","message":"User prompt length: 818 characters","service":"breaking-good-api","timestamp":"2025-04-25 21:43:37"}
{"level":"info","message":"Claude API response received: msg_01Gxi1dS8jNmfAtRLqdZV6NN","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Received Claude response with ID: msg_01Gxi1dS8jNmfAtRLqdZV6NN","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Using string content directly, length: 7905","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Extracted 7905 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[(4-phenylpiracetam-2-yl)methyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-25 21:44:14"}
{"level":"info","message":"Attempting 3D structure generation for: 2-[(diphenylmethyl)sulfinyl]-N-[(4-phenylpiracetam-2-yl)methyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-25 21:44:15"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[(4-phenylpiracetam-2-yl)methyl]acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-25 21:44:15"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-[(diphenylmethyl)sulfinyl]-N-[(4-phenylpiracetam-2-yl)methyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-25 21:44:15"}
{"level":"info","message":"Validating SMILES: O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-25 21:44:15"}
{"level":"info","message":"Attempting 3D structure generation for: O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-25 21:44:16"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-25 21:44:16"}
{"level":"info","message":"Validating SMILES: 2-(3-fluorophenyl)-2-(piperidin-4-yl)acetate-4-fluoro-N-(pyridin-3-yl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 21:44:16"}
{"level":"info","message":"Attempting 3D structure generation for: 2-(3-fluorophenyl)-2-(piperidin-4-yl)acetate-4-fluoro-N-(pyridin-3-yl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 21:44:17"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-(3-fluorophenyl)-2-(piperidin-4-yl)acetate-4-fluoro-N-(pyridin-3-yl)benzamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-25 21:44:17"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-(3-fluorophenyl)-2-(piperidin-4-yl)acetate-4-fluoro-N-(pyridin-3-yl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 21:44:17"}
{"level":"info","message":"Validating SMILES: O=C(c1ccc(F)cc1)Nc1cccnc1CN1CCC(C(C(=O)OC)c2cccc(F)c2)CC1","service":"breaking-good-api","timestamp":"2025-04-25 21:44:17"}
{"level":"info","message":"Attempting 3D structure generation for: O=C(c1ccc(F)cc1)Nc1cccnc1CN1CCC(C(C(=O)OC)c2cccc(F)c2)CC1","service":"breaking-good-api","timestamp":"2025-04-25 21:44:18"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): O=C(c1ccc(F)cc1)Nc1cccnc1CN1CCC(C(C(=O)OC)c2cccc(F)c2)CC1","service":"breaking-good-api","timestamp":"2025-04-25 21:44:19"}
{"level":"info","message":"Validating SMILES: Cc1cccc(Nc2nnc(c3ccccc3)c(N)n2)c1C(=O)NCCC1CCCN1","service":"breaking-good-api","timestamp":"2025-04-25 21:44:19"}
{"level":"info","message":"Attempting 3D structure generation for: Cc1cccc(Nc2nnc(c3ccccc3)c(N)n2)c1C(=O)NCCC1CCCN1","service":"breaking-good-api","timestamp":"2025-04-25 21:44:19"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): Cc1cccc(Nc2nnc(c3ccccc3)c(N)n2)c1C(=O)NCCC1CCCN1","service":"breaking-good-api","timestamp":"2025-04-25 21:44:20"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-25 21:44:20"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-25 21:44:20"}
{"level":"info","message":"Saving results to file for request 355d427d-ca87-40ca-adeb-264b31595ef3","service":"breaking-good-api","timestamp":"2025-04-25 21:44:20"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-25 21:44:20"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-25 21:44:21"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:44:24"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:44:31"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-25 21:45:16"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"H","105":"o","106":"w","107":" ","108":"c","109":"a","11":"r","110":"n","111":" ","112":"I","113":" ","114":"h","115":"e","116":"l","117":"p","118":" ","119":"w","12":"o","120":"i","121":"t","122":"h","123":" ","124":"d","125":"r","126":"u","127":"g","128":" ","129":"d","13":"l","130":"e","131":"s","132":"i","133":"g","134":"n","135":" ","136":"t","137":"o","138":"d","139":"a","14":"e","140":"y","141":"?","142":"\"","143":"\n","144":" ","145":" ","146":" ","147":" ","148":" ","149":" ","15":"\"","150":"}","151":"\n","152":" ","153":" ","154":" ","155":" ","156":"]","157":"\n","158":" ","159":" ","16":":","160":"}","161":",","162":"\n","163":" ","164":" ","165":"{","166":"\n","167":" ","168":" ","169":" ","17":" ","170":" ","171":"\"","172":"r","173":"o","174":"l","175":"e","176":"\"","177":":","178":" ","179":"\"","18":"\"","180":"u","181":"s","182":"e","183":"r","184":"\"","185":",","186":"\n","187":" ","188":" ","189":" ","19":"a","190":" ","191":"\"","192":"c","193":"o","194":"n","195":"t","196":"e","197":"n","198":"t","199":"\"","2":" ","20":"s","200":":","201":" ","202":"[","203":"\n","204":" ","205":" ","206":" ","207":" ","208":" ","209":" ","21":"s","210":"{","211":"\n","212":" ","213":" ","214":" ","215":" ","216":" ","217":" ","218":" ","219":" ","22":"i","220":"\"","221":"t","222":"y","223":"p","224":"e","225":"\"","226":":","227":" ","228":"\"","229":"t","23":"s","230":"e","231":"x","232":"t","233":"\"","234":",","235":"\n","236":" ","237":" ","238":" ","239":" ","24":"t","240":" ","241":" ","242":" ","243":" ","244":"\"","245":"t","246":"e","247":"x","248":"t","249":"\"","25":"a","250":":","251":" ","252":"\"","253":"[","254":"F","255":"o","256":"c","257":"u","258":"s","259":" ","26":"n","260":"o","261":"n","262":" ","263":"M","264":"o","265":"l","266":"e","267":"c","268":"u","269":"l","27":"t","270":"e","271":":","272":" ","273":"M","274":"o","275":"l","276":"e","277":"c","278":"u","279":"l","28":"\"","280":"e","281":" ","282":"C","283":"a","284":"n","285":"d","286":"i","287":"d","288":"a","289":"t","29":",","290":"e","291":" ","292":"2","293":",","294":" ","295":"S","296":"M","297":"I","298":"L","299":"E","3":" ","30":"\n","300":"S","301":":","302":" ","303":"O","304":"=","305":"S","306":"(","307":"C","308":"(","309":"c","31":" ","310":"1","311":"c","312":"c","313":"c","314":"c","315":"c","316":"1","317":")","318":"c","319":"1","32":" ","320":"c","321":"c","322":"c","323":"c","324":"c","325":"1","326":")","327":"C","328":"C","329":"(","33":" ","330":"=","331":"O","332":")","333":"N","334":"C","335":"C","336":"1","337":"(","338":"N","339":"(","34":" ","340":"C","341":"(","342":"=","343":"O","344":")","345":"C","346":"C","347":"1","348":")","349":"C","35":"\"","350":")","351":"c","352":"1","353":"c","354":"c","355":"c","356":"c","357":"c","358":"1","359":"]","36":"c","360":"\"","361":"\n","362":" ","363":" ","364":" ","365":" ","366":" ","367":" ","368":"}","369":"\n","37":"o","370":" ","371":" ","372":" ","373":" ","374":"]","375":"\n","376":" ","377":" ","378":"}","379":",","38":"n","380":"\n","381":" ","382":" ","383":"{","384":"\n","385":" ","386":" ","387":" ","388":" ","389":"\"","39":"t","390":"r","391":"o","392":"l","393":"e","394":"\"","395":":","396":" ","397":"\"","398":"u","399":"s","4":"{","40":"e","400":"e","401":"r","402":"\"","403":",","404":"\n","405":" ","406":" ","407":" ","408":" ","409":"\"","41":"n","410":"c","411":"o","412":"n","413":"t","414":"e","415":"n","416":"t","417":"\"","418":":","419":" ","42":"t","420":"[","421":"\n","422":" ","423":" ","424":" ","425":" ","426":" ","427":" ","428":"{","429":"\n","43":"\"","430":" ","431":" ","432":" ","433":" ","434":" ","435":" ","436":" ","437":" ","438":"\"","439":"t","44":":","440":"y","441":"p","442":"e","443":"\"","444":":","445":" ","446":"\"","447":"t","448":"e","449":"x","45":" ","450":"t","451":"\"","452":",","453":"\n","454":" ","455":" ","456":" ","457":" ","458":" ","459":" ","46":"[","460":" ","461":" ","462":"\"","463":"t","464":"e","465":"x","466":"t","467":"\"","468":":","469":" ","47":"\n","470":"\"","471":"T","472":"e","473":"l","474":"l","475":" ","476":"m","477":"e","478":" ","479":"m","48":" ","480":"o","481":"r","482":"e","483":" ","484":"a","485":"b","486":"o","487":"u","488":"t","489":" ","49":" ","490":"t","491":"h","492":"e","493":" ","494":"p","495":"r","496":"o","497":"p","498":"e","499":"r","5":"\n","50":" ","500":"t","501":"i","502":"e","503":"s","504":" ","505":"o","506":"f","507":" ","508":"t","509":"h","51":" ","510":"i","511":"s","512":" ","513":"c","514":"a","515":"n","516":"d","517":"i","518":"d","519":"a","52":" ","520":"t","521":"e","522":"?","523":"\"","524":"\n","525":" ","526":" ","527":" ","528":" ","529":" ","53":" ","530":" ","531":"}","532":"\n","533":" ","534":" ","535":" ","536":" ","537":"]","538":"\n","539":" ","54":"{","540":" ","541":"}","542":"\n","543":"]","55":"\n","56":" ","57":" ","58":" ","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-25 21:45:16"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-25 21:45:16"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-25 21:45:25"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252521452D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 21:45:55"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:45:55"}
{"0":"\n  -INDIGO-04252521452D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:45:55"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:45:58"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:46:03"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-25 21:46:15"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:15"}
{"0":"O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:15"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:15"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:15"}
{"0":"\n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -3.0137    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -3.0137    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -4.7458    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   12.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.2223   -6.5628    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   14.2223   -6.5628    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.8101   -7.3718    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   14.5314   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.7223   -5.0240    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6345   -7.3718    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9998   -6.0185    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1908   -5.4307    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.2772   -5.8374    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1727   -6.8320    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9817   -7.4198    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.8952   -7.0130    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  2  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  5  6  1  0  0  0  0\n  6  7  2  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  2  0  0  0  0\n  3 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  2  0  0  0  0\n 13 14  1  0  0  0  0\n 14 15  2  0  0  0  0\n  2 16  1  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 17 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 20 21  1  0  0  0  0\n 21 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  2  0  0  0  0\n 23 25  1  0  0  0  0\n 25 26  1  0  0  0  0\n 22 27  1  0  0  0  0\n 21 28  1  0  0  0  0\n 28 29  2  0  0  0  0\n 29 30  1  0  0  0  0\n 30 31  2  0  0  0  0\n 31 32  1  0  0  0  0\n 32 33  2  0  0  0  0\n  9  4  1  0  0  0  0\n 15 10  1  0  0  0  0\n 26 21  1  0  0  0  0\n 33 28  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:15"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:15"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:15"}
{"0":"\n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -3.0137    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -3.0137    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -4.7458    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   12.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.2223   -6.5628    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   14.2223   -6.5628    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.8101   -7.3718    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   14.5314   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.7223   -5.0240    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6345   -7.3718    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9998   -6.0185    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1908   -5.4307    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.2772   -5.8374    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1727   -6.8320    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9817   -7.4198    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.8952   -7.0130    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  2  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  5  6  1  0  0  0  0\n  6  7  2  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  2  0  0  0  0\n  3 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  2  0  0  0  0\n 13 14  1  0  0  0  0\n 14 15  2  0  0  0  0\n  2 16  1  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 17 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 20 21  1  0  0  0  0\n 21 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  2  0  0  0  0\n 23 25  1  0  0  0  0\n 25 26  1  0  0  0  0\n 22 27  1  0  0  0  0\n 21 28  1  0  0  0  0\n 28 29  2  0  0  0  0\n 29 30  1  0  0  0  0\n 30 31  2  0  0  0  0\n 31 32  1  0  0  0  0\n 32 33  2  0  0  0  0\n  9  4  1  0  0  0  0\n 15 10  1  0  0  0  0\n 26 21  1  0  0  0  0\n 33 28  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:15"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-25 21:46:18"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:18"}
{"0":"O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:18"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:18"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:18"}
{"0":"\n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -3.0137    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -3.0137    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -4.7458    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   12.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.2223   -6.5628    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   14.2223   -6.5628    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.8101   -7.3718    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   14.5314   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.7223   -5.0240    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6345   -7.3718    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9998   -6.0185    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1908   -5.4307    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.2772   -5.8374    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1727   -6.8320    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9817   -7.4198    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.8952   -7.0130    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  2  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  5  6  1  0  0  0  0\n  6  7  2  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  2  0  0  0  0\n  3 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  2  0  0  0  0\n 13 14  1  0  0  0  0\n 14 15  2  0  0  0  0\n  2 16  1  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 17 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 20 21  1  0  0  0  0\n 21 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  2  0  0  0  0\n 23 25  1  0  0  0  0\n 25 26  1  0  0  0  0\n 22 27  1  0  0  0  0\n 21 28  1  0  0  0  0\n 28 29  2  0  0  0  0\n 29 30  1  0  0  0  0\n 30 31  2  0  0  0  0\n 31 32  1  0  0  0  0\n 32 33  2  0  0  0  0\n  9  4  1  0  0  0  0\n 15 10  1  0  0  0  0\n 26 21  1  0  0  0  0\n 33 28  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:18"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:46:21"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252521462D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 21:46:21"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:21"}
{"0":"\n  -INDIGO-04252521462D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:21"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:46:24"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-25 21:46:29"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:29"}
{"0":"O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:29"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:30"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:30"}
{"0":"\n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -3.0137    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -3.0137    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -4.7458    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   12.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.2223   -6.5628    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   14.2223   -6.5628    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.8101   -7.3718    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   14.5314   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.7223   -5.0240    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6345   -7.3718    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9998   -6.0185    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1908   -5.4307    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.2772   -5.8374    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1727   -6.8320    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9817   -7.4198    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.8952   -7.0130    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  2  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  5  6  1  0  0  0  0\n  6  7  2  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  2  0  0  0  0\n  3 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  2  0  0  0  0\n 13 14  1  0  0  0  0\n 14 15  2  0  0  0  0\n  2 16  1  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 17 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 20 21  1  0  0  0  0\n 21 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  2  0  0  0  0\n 23 25  1  0  0  0  0\n 25 26  1  0  0  0  0\n 22 27  1  0  0  0  0\n 21 28  1  0  0  0  0\n 28 29  2  0  0  0  0\n 29 30  1  0  0  0  0\n 30 31  2  0  0  0  0\n 31 32  1  0  0  0  0\n 32 33  2  0  0  0  0\n  9  4  1  0  0  0  0\n 15 10  1  0  0  0  0\n 26 21  1  0  0  0  0\n 33 28  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:30"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-25 21:46:33"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:33"}
{"0":"O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:33"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:46:34"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-25 21:46:44"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:44"}
{"0":"O=S(C(c1ccccc1)c1ccccc1)CC(=O)NCC1(N(C(=O)CC1)C)c1ccccc1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:44"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:45"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:46:45"}
{"0":"\n  -INDIGO-04252521462D\n\n 33 36  0  0  0  0  0  0  0  0999 V2000\n    9.9133   -2.1477    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4133   -3.0137    0.0000 S   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -3.0137    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -0.4157    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -1.2817    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -2.1477    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9133   -3.8797    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -3.0137    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -4.7458    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   12.4133   -4.7458    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9133   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.2223   -6.5628    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   14.2223   -6.5628    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.8101   -7.3718    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   14.5314   -5.6118    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.7223   -5.0240    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6345   -7.3718    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9998   -6.0185    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1908   -5.4307    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.2772   -5.8374    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1727   -6.8320    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9817   -7.4198    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.8952   -7.0130    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  2  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  5  6  1  0  0  0  0\n  6  7  2  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  2  0  0  0  0\n  3 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  2  0  0  0  0\n 13 14  1  0  0  0  0\n 14 15  2  0  0  0  0\n  2 16  1  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 17 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 20 21  1  0  0  0  0\n 21 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  2  0  0  0  0\n 23 25  1  0  0  0  0\n 25 26  1  0  0  0  0\n 22 27  1  0  0  0  0\n 21 28  1  0  0  0  0\n 28 29  2  0  0  0  0\n 29 30  1  0  0  0  0\n 30 31  2  0  0  0  0\n 31 32  1  0  0  0  0\n 32 33  2  0  0  0  0\n  9  4  1  0  0  0  0\n 15 10  1  0  0  0  0\n 26 21  1  0  0  0  0\n 33 28  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:46:45"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:46:48"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:48:35"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04252521502D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-25 21:50:00"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-25 21:50:00"}
{"0":"\n  -INDIGO-04252521502D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-25 21:50:00"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:50:02"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:51:37"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-25 21:53:16"}
{"level":"info","message":"Created request ID: dc09e453-65fd-441e-b462-d39707ad00e0","service":"breaking-good-api","timestamp":"2025-04-25 21:53:16"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-25 21:53:16"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-25 21:53:16"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-25 21:53:16"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-25 21:53:16"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-25 21:53:16"}
{"level":"info","message":"User prompt length: 814 characters","service":"breaking-good-api","timestamp":"2025-04-25 21:53:16"}
{"level":"info","message":"Claude API response received: msg_01PDwNoBGCo7wjZ9HCsRH6Go","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Received Claude response with ID: msg_01PDwNoBGCo7wjZ9HCsRH6Go","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Using string content directly, length: 8699","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Extracted 8699 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NC(=O)C1(CC1)C(=O)NCCS(=O)(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-25 21:53:58"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)(C)NC(=O)C1(CC1)C(=O)NCCS(=O)(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-25 21:53:59"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)(C)NC(=O)C1(CC1)C(=O)NCCS(=O)(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-25 21:53:59"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CC2)C(=O)C2CCCN2C)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-25 21:53:59"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(CC(=O)N2CCN(CC2)C(=O)C2CCCN2C)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-25 21:54:00"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(CC(=O)N2CCN(CC2)C(=O)C2CCCN2C)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-25 21:54:00"}
{"level":"info","message":"Validating SMILES: N-(4-(4-(3,4-dimethoxyphenethyl)piperazin-1-yl)-1-methylpyrrolidin-2-yl)acetamide","service":"breaking-good-api","timestamp":"2025-04-25 21:54:00"}
{"level":"info","message":"Attempting 3D structure generation for: N-(4-(4-(3,4-dimethoxyphenethyl)piperazin-1-yl)-1-methylpyrrolidin-2-yl)acetamide","service":"breaking-good-api","timestamp":"2025-04-25 21:54:01"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(4-(4-(3,4-dimethoxyphenethyl)piperazin-1-yl)-1-methylpyrrolidin-2-yl)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-25 21:54:01"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(4-(4-(3,4-dimethoxyphenethyl)piperazin-1-yl)-1-methylpyrrolidin-2-yl)acetamide","service":"breaking-good-api","timestamp":"2025-04-25 21:54:01"}
{"level":"info","message":"Validating SMILES: CC(C)NC(=O)c1cccc(C(=O)N2CC3(CCCC3)CC2c2ccc(F)cc2)c1","service":"breaking-good-api","timestamp":"2025-04-25 21:54:01"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)NC(=O)c1cccc(C(=O)N2CC3(CCCC3)CC2c2ccc(F)cc2)c1","service":"breaking-good-api","timestamp":"2025-04-25 21:54:02"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)NC(=O)c1cccc(C(=O)N2CC3(CCCC3)CC2c2ccc(F)cc2)c1","service":"breaking-good-api","timestamp":"2025-04-25 21:54:03"}
{"level":"info","message":"Validating SMILES: N-isopropyl-3-((1-(4-fluorophenyl)-4-spirocyclopentylpiperazin-2-yl)carbonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 21:54:03"}
{"level":"info","message":"Attempting 3D structure generation for: N-isopropyl-3-((1-(4-fluorophenyl)-4-spirocyclopentylpiperazin-2-yl)carbonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 21:54:03"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-isopropyl-3-((1-(4-fluorophenyl)-4-spirocyclopentylpiperazin-2-yl)carbonyl)benzamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-25 21:54:04"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-isopropyl-3-((1-(4-fluorophenyl)-4-spirocyclopentylpiperazin-2-yl)carbonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-25 21:54:04"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-25 21:54:04"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-25 21:54:04"}
{"level":"info","message":"Saving results to file for request dc09e453-65fd-441e-b462-d39707ad00e0","service":"breaking-good-api","timestamp":"2025-04-25 21:54:04"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-25 21:54:04"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-25 21:54:05"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 21:54:08"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 22:10:18"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-25 22:11:14"}
{"level":"info","message":"Created request ID: a47040c3-6bc7-4b90-a463-78e318f0299b","service":"breaking-good-api","timestamp":"2025-04-25 22:11:14"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-25 22:11:14"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-25 22:11:14"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-25 22:11:14"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-25 22:11:14"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-25 22:11:14"}
{"level":"info","message":"User prompt length: 813 characters","service":"breaking-good-api","timestamp":"2025-04-25 22:11:14"}
{"level":"info","message":"Claude API response received: msg_01KgE4Fr7BU7TAfFtuRCSPqA","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Received Claude response with ID: msg_01KgE4Fr7BU7TAfFtuRCSPqA","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Using string content directly, length: 7848","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Extracted 7848 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Validating SMILES: CC(CS(=O)C(=O)NC(C)(C)c1ccccc1)NCCCC2=CC(=CC=C2)OC","service":"breaking-good-api","timestamp":"2025-04-25 22:11:54"}
{"level":"info","message":"Attempting 3D structure generation for: CC(CS(=O)C(=O)NC(C)(C)c1ccccc1)NCCCC2=CC(=CC=C2)OC","service":"breaking-good-api","timestamp":"2025-04-25 22:11:55"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(CS(=O)C(=O)NC(C)(C)c1ccccc1)NCCCC2=CC(=CC=C2)OC","service":"breaking-good-api","timestamp":"2025-04-25 22:11:55"}
{"level":"info","message":"Validating SMILES: 2-((methylsulfinyl)acetyl)-N-(1-(4-methoxyphenethylamino)propan-2-yl)-2-phenylpropanamide","service":"breaking-good-api","timestamp":"2025-04-25 22:11:55"}
{"level":"info","message":"Attempting 3D structure generation for: 2-((methylsulfinyl)acetyl)-N-(1-(4-methoxyphenethylamino)propan-2-yl)-2-phenylpropanamide","service":"breaking-good-api","timestamp":"2025-04-25 22:11:56"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-((methylsulfinyl)acetyl)-N-(1-(4-methoxyphenethylamino)propan-2-yl)-2-phenylpropanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-25 22:11:57"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-((methylsulfinyl)acetyl)-N-(1-(4-methoxyphenethylamino)propan-2-yl)-2-phenylpropanamide","service":"breaking-good-api","timestamp":"2025-04-25 22:11:57"}
{"level":"info","message":"Validating SMILES: CC(C(=O)OC)N(C)C1CCN(CC1)C2=CC=C(C=C2)C3=NC=CS3","service":"breaking-good-api","timestamp":"2025-04-25 22:11:57"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C(=O)OC)N(C)C1CCN(CC1)C2=CC=C(C=C2)C3=NC=CS3","service":"breaking-good-api","timestamp":"2025-04-25 22:11:57"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C(=O)OC)N(C)C1CCN(CC1)C2=CC=C(C=C2)C3=NC=CS3","service":"breaking-good-api","timestamp":"2025-04-25 22:11:58"}
{"level":"info","message":"Validating SMILES: FC(F)(F)C1=CC=C(C=C1)C2=NN=C(O2)CN3C4CCC(CC4)C3CC(=O)N5CCOCC5","service":"breaking-good-api","timestamp":"2025-04-25 22:11:58"}
{"level":"info","message":"Attempting 3D structure generation for: FC(F)(F)C1=CC=C(C=C1)C2=NN=C(O2)CN3C4CCC(CC4)C3CC(=O)N5CCOCC5","service":"breaking-good-api","timestamp":"2025-04-25 22:11:58"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): FC(F)(F)C1=CC=C(C=C1)C2=NN=C(O2)CN3C4CCC(CC4)C3CC(=O)N5CCOCC5","service":"breaking-good-api","timestamp":"2025-04-25 22:11:59"}
{"level":"info","message":"Validated 4 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-25 22:11:59"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-25 22:11:59"}
{"level":"info","message":"Saving results to file for request a47040c3-6bc7-4b90-a463-78e318f0299b","service":"breaking-good-api","timestamp":"2025-04-25 22:11:59"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-25 22:11:59"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-25 22:12:00"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-25 22:12:04"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 08:56:56"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently with as few downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-26 08:57:49"}
{"level":"info","message":"Created request ID: d850a414-ecb6-4909-9275-ac6b003482e2","service":"breaking-good-api","timestamp":"2025-04-26 08:57:49"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-26 08:57:49"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-26 08:57:49"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-26 08:57:49"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-26 08:57:49"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-26 08:57:49"}
{"level":"info","message":"User prompt length: 814 characters","service":"breaking-good-api","timestamp":"2025-04-26 08:57:49"}
{"level":"info","message":"Claude API response received: msg_01DbkkSHv3jSZnQg3dLyPz5G","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Received Claude response with ID: msg_01DbkkSHv3jSZnQg3dLyPz5G","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Using string content directly, length: 8770","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Extracted 8770 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CC2CC1CN2C)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC(=O)C1CC2CC1CN2C)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC(=O)C1CC2CC1CN2C)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Validating SMILES: N-(1-(4-fluorophenyl)piperazin-4-yl)-2-(methyl(7-azabicyclo[2.2.1]heptan-2-yl)amino)acetamide","service":"breaking-good-api","timestamp":"2025-04-26 08:58:32"}
{"level":"info","message":"Attempting 3D structure generation for: N-(1-(4-fluorophenyl)piperazin-4-yl)-2-(methyl(7-azabicyclo[2.2.1]heptan-2-yl)amino)acetamide","service":"breaking-good-api","timestamp":"2025-04-26 08:58:33"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(1-(4-fluorophenyl)piperazin-4-yl)-2-(methyl(7-azabicyclo[2.2.1]heptan-2-yl)amino)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 08:58:33"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(1-(4-fluorophenyl)piperazin-4-yl)-2-(methyl(7-azabicyclo[2.2.1]heptan-2-yl)amino)acetamide","service":"breaking-good-api","timestamp":"2025-04-26 08:58:33"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CCNC(=O)C2CCN(CC2)CC2=CNC3=CC=CC=C32)C=C1OC","service":"breaking-good-api","timestamp":"2025-04-26 08:58:33"}
{"level":"info","message":"Attempting 3D structure generation for: COC1=CC=C(CCNC(=O)C2CCN(CC2)CC2=CNC3=CC=CC=C32)C=C1OC","service":"breaking-good-api","timestamp":"2025-04-26 08:58:33"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COC1=CC=C(CCNC(=O)C2CCN(CC2)CC2=CNC3=CC=CC=C32)C=C1OC","service":"breaking-good-api","timestamp":"2025-04-26 08:58:33"}
{"level":"info","message":"Validating SMILES: N-(3,4-dimethoxyphenethyl)-1-((1H-indol-3-yl)methyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-26 08:58:33"}
{"level":"info","message":"Attempting 3D structure generation for: N-(3,4-dimethoxyphenethyl)-1-((1H-indol-3-yl)methyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-26 08:58:33"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(3,4-dimethoxyphenethyl)-1-((1H-indol-3-yl)methyl)piperidine-4-carboxamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(3,4-dimethoxyphenethyl)-1-((1H-indol-3-yl)methyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Validating SMILES: CC(NC(C)C)CC(=O)N1CCN(CC1)C1=CC=C(Cl)C=C1C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Attempting 3D structure generation for: CC(NC(C)C)CC(=O)N1CCN(CC1)C1=CC=C(Cl)C=C1C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(NC(C)C)CC(=O)N1CCN(CC1)C1=CC=C(Cl)C=C1C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Validating SMILES: N-(1-(4-chloro-3-(trifluoromethyl)phenyl)piperazin-4-yl)-3-(isopropylmethylamino)butanamide","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Attempting 3D structure generation for: N-(1-(4-chloro-3-(trifluoromethyl)phenyl)piperazin-4-yl)-3-(isopropylmethylamino)butanamide","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(1-(4-chloro-3-(trifluoromethyl)phenyl)piperazin-4-yl)-3-(isopropylmethylamino)butanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(1-(4-chloro-3-(trifluoromethyl)phenyl)piperazin-4-yl)-3-(isopropylmethylamino)butanamide","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Validated 6 molecules (Props & 3D) out of 6 candidates.","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Successfully extracted and validated 6 molecules","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Saving results to file for request d850a414-ecb6-4909-9275-ac6b003482e2","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-26 08:58:34"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-26 08:58:35"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 08:58:37"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-26 09:00:18"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"H","105":"o","106":"w","107":" ","108":"c","109":"a","11":"r","110":"n","111":" ","112":"I","113":" ","114":"h","115":"e","116":"l","117":"p","118":" ","119":"w","12":"o","120":"i","121":"t","122":"h","123":" ","124":"d","125":"r","126":"u","127":"g","128":" ","129":"d","13":"l","130":"e","131":"s","132":"i","133":"g","134":"n","135":" ","136":"t","137":"o","138":"d","139":"a","14":"e","140":"y","141":"?","142":"\"","143":"\n","144":" ","145":" ","146":" ","147":" ","148":" ","149":" ","15":"\"","150":"}","151":"\n","152":" ","153":" ","154":" ","155":" ","156":"]","157":"\n","158":" ","159":" ","16":":","160":"}","161":",","162":"\n","163":" ","164":" ","165":"{","166":"\n","167":" ","168":" ","169":" ","17":" ","170":" ","171":"\"","172":"r","173":"o","174":"l","175":"e","176":"\"","177":":","178":" ","179":"\"","18":"\"","180":"u","181":"s","182":"e","183":"r","184":"\"","185":",","186":"\n","187":" ","188":" ","189":" ","19":"a","190":" ","191":"\"","192":"c","193":"o","194":"n","195":"t","196":"e","197":"n","198":"t","199":"\"","2":" ","20":"s","200":":","201":" ","202":"[","203":"\n","204":" ","205":" ","206":" ","207":" ","208":" ","209":" ","21":"s","210":"{","211":"\n","212":" ","213":" ","214":" ","215":" ","216":" ","217":" ","218":" ","219":" ","22":"i","220":"\"","221":"t","222":"y","223":"p","224":"e","225":"\"","226":":","227":" ","228":"\"","229":"t","23":"s","230":"e","231":"x","232":"t","233":"\"","234":",","235":"\n","236":" ","237":" ","238":" ","239":" ","24":"t","240":" ","241":" ","242":" ","243":" ","244":"\"","245":"t","246":"e","247":"x","248":"t","249":"\"","25":"a","250":":","251":" ","252":"\"","253":"[","254":"F","255":"o","256":"c","257":"u","258":"s","259":" ","26":"n","260":"o","261":"n","262":" ","263":"M","264":"o","265":"l","266":"e","267":"c","268":"u","269":"l","27":"t","270":"e","271":":","272":" ","273":"M","274":"o","275":"l","276":"e","277":"c","278":"u","279":"l","28":"\"","280":"e","281":" ","282":"C","283":"a","284":"n","285":"d","286":"i","287":"d","288":"a","289":"t","29":",","290":"e","291":" ","292":"1","293":",","294":" ","295":"S","296":"M","297":"I","298":"L","299":"E","3":" ","30":"\n","300":"S","301":":","302":" ","303":"C","304":"C","305":"(","306":"N","307":"C","308":"(","309":"=","31":" ","310":"O","311":")","312":"C","313":"1","314":"C","315":"C","316":"2","317":"C","318":"C","319":"1","32":" ","320":"C","321":"N","322":"2","323":"C","324":")","325":"C","326":"(","327":"=","328":"O","329":")","33":" ","330":"N","331":"1","332":"C","333":"C","334":"N","335":"(","336":"C","337":"C","338":"1","339":")","34":" ","340":"C","341":"1","342":"=","343":"C","344":"C","345":"=","346":"C","347":"(","348":"F","349":")","35":"\"","350":"C","351":"=","352":"C","353":"1","354":"]","355":"\"","356":"\n","357":" ","358":" ","359":" ","36":"c","360":" ","361":" ","362":" ","363":"}","364":"\n","365":" ","366":" ","367":" ","368":" ","369":"]","37":"o","370":"\n","371":" ","372":" ","373":"}","374":",","375":"\n","376":" ","377":" ","378":"{","379":"\n","38":"n","380":" ","381":" ","382":" ","383":" ","384":"\"","385":"r","386":"o","387":"l","388":"e","389":"\"","39":"t","390":":","391":" ","392":"\"","393":"u","394":"s","395":"e","396":"r","397":"\"","398":",","399":"\n","4":"{","40":"e","400":" ","401":" ","402":" ","403":" ","404":"\"","405":"c","406":"o","407":"n","408":"t","409":"e","41":"n","410":"n","411":"t","412":"\"","413":":","414":" ","415":"[","416":"\n","417":" ","418":" ","419":" ","42":"t","420":" ","421":" ","422":" ","423":"{","424":"\n","425":" ","426":" ","427":" ","428":" ","429":" ","43":"\"","430":" ","431":" ","432":" ","433":"\"","434":"t","435":"y","436":"p","437":"e","438":"\"","439":":","44":":","440":" ","441":"\"","442":"t","443":"e","444":"x","445":"t","446":"\"","447":",","448":"\n","449":" ","45":" ","450":" ","451":" ","452":" ","453":" ","454":" ","455":" ","456":" ","457":"\"","458":"t","459":"e","46":"[","460":"x","461":"t","462":"\"","463":":","464":" ","465":"\"","466":"T","467":"e","468":"l","469":"l","47":"\n","470":" ","471":"m","472":"e","473":" ","474":"m","475":"o","476":"r","477":"e","478":" ","479":"a","48":" ","480":"b","481":"o","482":"u","483":"t","484":" ","485":"t","486":"h","487":"i","488":"s","489":" ","49":" ","490":"c","491":"a","492":"n","493":"d","494":"i","495":"d","496":"a","497":"t","498":"e","499":"s","5":"\n","50":" ","500":" ","501":"p","502":"r","503":"o","504":"p","505":"e","506":"r","507":"t","508":"i","509":"e","51":" ","510":"s","511":".","512":"\"","513":"\n","514":" ","515":" ","516":" ","517":" ","518":" ","519":" ","52":" ","520":"}","521":"\n","522":" ","523":" ","524":" ","525":" ","526":"]","527":"\n","528":" ","529":" ","53":" ","530":"}","531":"\n","532":"]","54":"{","55":"\n","56":" ","57":" ","58":" ","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-26 09:00:18"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:18"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-26 09:00:25"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262509002D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-26 09:00:43"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:43"}
{"0":"\n  -INDIGO-04262509002D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 09:00:43"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 09:00:44"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(NC(=O)C1CC2CC1CN2C)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-26 09:00:54"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:54"}
{"0":"CC(NC(=O)C1CC2CC1CN2C)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 09:00:54"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262509002D\n\n 28 31  0  0  0  0  0  0  0  0999 V2000\n   12.4355   -4.9873    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4573   -5.1952    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:54"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:54"}
{"0":"\n  -INDIGO-04262509002D\n\n 28 31  0  0  0  0  0  0  0  0999 V2000\n   12.4355   -4.9873    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4573   -5.1952    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1483   -6.1463    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1701   -6.3542    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.5010   -5.6111    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8611   -7.3053    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4489   -8.1143    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8611   -8.9233    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9100   -8.6143    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9100   -7.6143    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.3222   -8.4233    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9100   -9.2323    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6010  -10.1833    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7882   -4.4521    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8101   -4.6600    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.0972   -3.5010    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   12.0753   -3.2931    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.3843   -2.3421    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.7153   -1.5989    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7371   -1.8068    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4281   -2.7579    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.0243   -0.6479    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.0024   -0.4399    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.3114    0.5111    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6423    1.2543    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9513    2.2053    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6641    1.0463    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.3551    0.0953    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  4  6  1  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  1  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n  2 14  1  0  0  0  0\n 14 15  2  0  0  0  0\n 14 16  1  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  1  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 20 21  1  0  0  0  0\n 19 22  1  0  0  0  0\n 22 23  2  0  0  0  0\n 23 24  1  0  0  0  0\n 24 25  2  0  0  0  0\n 25 26  1  0  0  0  0\n 25 27  1  0  0  0  0\n 27 28  2  0  0  0  0\n 10  6  1  0  0  0  0\n 21 16  1  0  0  0  0\n 28 22  1  0  0  0  0\n 12  8  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 09:00:54"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(NC(=O)C1CC2CC1CN2C)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"0":"CC(NC(=O)C1CC2CC1CN2C)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262509002D\n\n 28 31  0  0  0  0  0  0  0  0999 V2000\n   12.4355   -4.9873    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4573   -5.1952    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"0":"\n  -INDIGO-04262509002D\n\n 28 31  0  0  0  0  0  0  0  0999 V2000\n   12.4355   -4.9873    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4573   -5.1952    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1483   -6.1463    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1701   -6.3542    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.5010   -5.6111    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8611   -7.3053    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4489   -8.1143    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8611   -8.9233    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9100   -8.6143    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9100   -7.6143    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.3222   -8.4233    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9100   -9.2323    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6010  -10.1833    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7882   -4.4521    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8101   -4.6600    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.0972   -3.5010    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   12.0753   -3.2931    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.3843   -2.3421    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.7153   -1.5989    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7371   -1.8068    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4281   -2.7579    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.0243   -0.6479    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.0024   -0.4399    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.3114    0.5111    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6423    1.2543    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9513    2.2053    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6641    1.0463    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.3551    0.0953    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  4  6  1  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  1  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n  2 14  1  0  0  0  0\n 14 15  2  0  0  0  0\n 14 16  1  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  1  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 20 21  1  0  0  0  0\n 19 22  1  0  0  0  0\n 22 23  2  0  0  0  0\n 23 24  1  0  0  0  0\n 24 25  2  0  0  0  0\n 25 26  1  0  0  0  0\n 25 27  1  0  0  0  0\n 27 28  2  0  0  0  0\n 10  6  1  0  0  0  0\n 21 16  1  0  0  0  0\n 28 22  1  0  0  0  0\n 12  8  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: CC(NC(=O)C1CC2CC1CN2C)C(=O)N1CCN(c2ccc(F)cc2)CC1","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"0":"CC(NC(=O)C1CC2CC1CN2C)C(=O)N1CCN(c2ccc(F)cc2)CC1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 09:00:57"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262509002D\n\n 28 31  0  0  0  0  0  0  0  0999 V2000\n   12.3915   -4.9854    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -5.1933    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:58"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 09:00:58"}
{"0":"\n  -INDIGO-04262509002D\n\n 28 31  0  0  0  0  0  0  0  0999 V2000\n   12.3915   -4.9854    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.4133   -5.1933    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1043   -6.1443    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1261   -6.3523    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4570   -5.6091    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8171   -7.3033    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4049   -8.1123    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.8171   -8.9213    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.8661   -8.6123    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.8661   -7.6123    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.2783   -8.4213    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.8661   -9.2304    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.5571  -10.1814    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.7442   -4.4501    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.7661   -4.6581    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.0532   -3.4991    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   12.0313   -3.2912    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.3403   -2.3401    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6713   -1.5970    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9803   -0.6459    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9584   -0.4380    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.2674    0.5131    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.5983    1.2562    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9073    2.2073    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6201    1.0483    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.3111    0.0972    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.6931   -1.8049    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3841   -2.7559    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  4  6  1  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  1  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n  2 14  1  0  0  0  0\n 14 15  2  0  0  0  0\n 14 16  1  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  1  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 20 21  2  0  0  0  0\n 21 22  1  0  0  0  0\n 22 23  2  0  0  0  0\n 23 24  1  0  0  0  0\n 23 25  1  0  0  0  0\n 25 26  2  0  0  0  0\n 19 27  1  0  0  0  0\n 27 28  1  0  0  0  0\n 10  6  1  0  0  0  0\n 28 16  1  0  0  0  0\n 12  8  1  0  0  0  0\n 26 20  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 09:00:58"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 09:01:00"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 09:02:29"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-26 09:03:04"}
{"level":"info","message":"Found 10 IDs (total 54001)","service":"breaking-good-api","timestamp":"2025-04-26 09:03:04"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-26 09:03:05"}
{"level":"info","message":"Searching PubMed for: neuroscience AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-26 09:03:16"}
{"level":"info","message":"Found 10 IDs (total 92271)","service":"breaking-good-api","timestamp":"2025-04-26 09:03:16"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-26 09:03:17"}
{"level":"info","message":"Fetching details for ID: 26386541","service":"breaking-good-api","timestamp":"2025-04-26 09:03:59"}
{"level":"info","message":"Received molecule generation request with requirements: Give me compounds that address chronic depression and rationale.","service":"breaking-good-api","timestamp":"2025-04-26 09:06:33"}
{"level":"info","message":"Created request ID: a3e35670-7a50-4247-a758-62753e40d6be","service":"breaking-good-api","timestamp":"2025-04-26 09:06:33"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-26 09:06:33"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-26 09:06:33"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-26 09:06:33"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-26 09:06:33"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-26 09:06:33"}
{"level":"info","message":"User prompt length: 689 characters","service":"breaking-good-api","timestamp":"2025-04-26 09:06:33"}
{"level":"info","message":"Claude API response received: msg_01V98wt4cEAedgDsvLC8JfHK","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Received Claude response with ID: msg_01V98wt4cEAedgDsvLC8JfHK","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Using string content directly, length: 8257","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Extracted 8257 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)NCC2CCC(N3CCN(C)CC3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-26 09:07:12"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(CC(=O)NCC2CCC(N3CCN(C)CC3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-26 09:07:13"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(CC(=O)NCC2CCC(N3CCN(C)CC3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-26 09:07:13"}
{"level":"info","message":"Validating SMILES: 2-(4-methoxyphenyl)-N-(4-(4-methylpiperazin-1-yl)cyclohexyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-26 09:07:13"}
{"level":"info","message":"Attempting 3D structure generation for: 2-(4-methoxyphenyl)-N-(4-(4-methylpiperazin-1-yl)cyclohexyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-26 09:07:13"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 2-(4-methoxyphenyl)-N-(4-(4-methylpiperazin-1-yl)cyclohexyl)acetamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 09:07:13"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 2-(4-methoxyphenyl)-N-(4-(4-methylpiperazin-1-yl)cyclohexyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-26 09:07:13"}
{"level":"info","message":"Validating SMILES: CC1(C)CC(NC(=O)C2(c3ccccc3)CCCC2)CCN1C(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-26 09:07:13"}
{"level":"info","message":"Attempting 3D structure generation for: CC1(C)CC(NC(=O)C2(c3ccccc3)CCCC2)CCN1C(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-26 09:07:13"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC1(C)CC(NC(=O)C2(c3ccccc3)CCCC2)CCN1C(=O)c1ccc(F)cc1","service":"breaking-good-api","timestamp":"2025-04-26 09:07:14"}
{"level":"info","message":"Validating SMILES: COc1ccc(CCN(C)CCCOc2cccc(C(=O)NC3CCN(Cc4ccncc4)CC3)c2)cc1","service":"breaking-good-api","timestamp":"2025-04-26 09:07:14"}
{"level":"info","message":"Attempting 3D structure generation for: COc1ccc(CCN(C)CCCOc2cccc(C(=O)NC3CCN(Cc4ccncc4)CC3)c2)cc1","service":"breaking-good-api","timestamp":"2025-04-26 09:07:14"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1ccc(CCN(C)CCCOc2cccc(C(=O)NC3CCN(Cc4ccncc4)CC3)c2)cc1","service":"breaking-good-api","timestamp":"2025-04-26 09:07:14"}
{"level":"info","message":"Validating SMILES: N-(1-(pyridin-4-ylmethyl)piperidin-4-yl)-3-(3-(methylamino)propoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-26 09:07:14"}
{"level":"info","message":"Attempting 3D structure generation for: N-(1-(pyridin-4-ylmethyl)piperidin-4-yl)-3-(3-(methylamino)propoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-26 09:07:14"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: N-(1-(pyridin-4-ylmethyl)piperidin-4-yl)-3-(3-(methylamino)propoxy)benzamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 09:07:15"}
{"level":"info","message":"Added molecule with properties but without 3D structure: N-(1-(pyridin-4-ylmethyl)piperidin-4-yl)-3-(3-(methylamino)propoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-26 09:07:15"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-26 09:07:15"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-26 09:07:15"}
{"level":"info","message":"Saving results to file for request a3e35670-7a50-4247-a758-62753e40d6be","service":"breaking-good-api","timestamp":"2025-04-26 09:07:15"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-26 09:07:15"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-26 09:07:15"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 09:07:17"}
{"level":"info","message":"Received molecule generation request with requirements: Generate stuff","service":"breaking-good-api","timestamp":"2025-04-26 10:15:30"}
{"level":"info","message":"Created request ID: 97095491-e454-40c4-8c33-3b588cb3b054","service":"breaking-good-api","timestamp":"2025-04-26 10:15:30"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-26 10:15:30"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-26 10:15:30"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-26 10:15:30"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-26 10:15:30"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-26 10:15:30"}
{"level":"info","message":"User prompt length: 639 characters","service":"breaking-good-api","timestamp":"2025-04-26 10:15:30"}
{"level":"info","message":"Claude API response received: msg_019xbLkjZWCNQFbDD1RQL6md","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Received Claude response with ID: msg_019xbLkjZWCNQFbDD1RQL6md","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Using string content directly, length: 7110","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Extracted 7110 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Validating SMILES: C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(=O)N)ccc12)c1ccc(F)c(F)c1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:06"}
{"level":"info","message":"Attempting 3D structure generation for: C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(=O)N)ccc12)c1ccc(F)c(F)c1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:07"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(=O)N)ccc12)c1ccc(F)c(F)c1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:07"}
{"level":"info","message":"Validating SMILES: CCN(CC)C[C@H]1CCCN1c1ccc(c2nc3c(n2)CCCc2ccccc23)cc1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:07"}
{"level":"info","message":"Attempting 3D structure generation for: CCN(CC)C[C@H]1CCCN1c1ccc(c2nc3c(n2)CCCc2ccccc23)cc1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:07"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: CCN(CC)C[C@H]1CCCN1c1ccc(c2nc3c(n2)CCCc2ccccc23)cc1 - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 10:16:07"}
{"level":"info","message":"Added molecule with properties but without 3D structure: CCN(CC)C[C@H]1CCCN1c1ccc(c2nc3c(n2)CCCc2ccccc23)cc1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:07"}
{"level":"info","message":"Validating SMILES: S)-3-(3-fluorophenyl)-N-(2-(4-isopropylpiperazin-1-yl)ethyl)-N-methyl-3-(methylamino)propanamide","service":"breaking-good-api","timestamp":"2025-04-26 10:16:07"}
{"level":"info","message":"Attempting 3D structure generation for: S)-3-(3-fluorophenyl)-N-(2-(4-isopropylpiperazin-1-yl)ethyl)-N-methyl-3-(methylamino)propanamide","service":"breaking-good-api","timestamp":"2025-04-26 10:16:07"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: S)-3-(3-fluorophenyl)-N-(2-(4-isopropylpiperazin-1-yl)ethyl)-N-methyl-3-(methylamino)propanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Added molecule with properties but without 3D structure: S)-3-(3-fluorophenyl)-N-(2-(4-isopropylpiperazin-1-yl)ethyl)-N-methyl-3-(methylamino)propanamide","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Validating SMILES: CC(C)N1CCN(CCN(C)C(=O)C[C@H](NC)c2cccc(F)c2)CC1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)N1CCN(CCN(C)C(=O)C[C@H](NC)c2cccc(F)c2)CC1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)N1CCN(CCN(C)C(=O)C[C@H](NC)c2cccc(F)c2)CC1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Validated 4 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Saving results to file for request 97095491-e454-40c4-8c33-3b588cb3b054","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-26 10:16:08"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 10:16:10"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(=O)N)ccc12)c1ccc(F)c(F)c1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:42"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 10:16:42"}
{"0":"C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(=O)N)ccc12)c1ccc(F)c(F)c1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 10:16:42"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262510162D\n\n  0  0  0  0  0  0  0  0  0  0  0 V3000\nM  V30 BEGIN CTAB\nM  V30 COUNTS 26 28 0 0 0\nM  V30 BEGIN ATOM\nM  V30 1 C 11.0382 -7.58177 0.0 0\nM  V30 2 C 10.295 -6.91263 0.0 0 CFG=2\n...","service":"breaking-good-api","timestamp":"2025-04-26 10:16:43"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 10:16:43"}
{"0":"\n  -INDIGO-04262510162D\n\n  0  0  0  0  0  0  0  0  0  0  0 V3000\nM  V30 BEGIN CTAB\nM  V30 COUNTS 26 28 0 0 0\nM  V30 BEGIN ATOM\nM  V30 1 C 11.0382 -7.58177 0.0 0\nM  V30 2 C 10.295 -6.91263 0.0 0 CFG=2\nM  V30 3 N 10.5029 -5.9345 0.0 0\nM  V30 4 C 9.75976 -5.26537 0.0 0 CFG=1\nM  V30 5 C 8.8087 -5.57437 0.0 0\nM  V30 6 C 9.9677 -4.28717 0.0 0\nM  V30 7 C 10.9188 -3.97817 0.0 0\nM  V30 8 C 11.7278 -4.56597 0.0 0\nM  V30 9 N 12.5368 -3.97817 0.0 0\nM  V30 10 C 12.2278 -3.0271 0.0 0\nM  V30 11 C 12.7278 -2.1611 0.0 0\nM  V30 12 C 12.2278 -1.2951 0.0 0\nM  V30 13 C 12.7278 -0.429033 0.0 0\nM  V30 14 O 12.2278 0.436967 0.0 0\nM  V30 15 N 13.7278 -0.429033 0.0 0\nM  V30 16 C 11.2278 -1.2951 0.0 0\nM  V30 17 C 10.7278 -2.1611 0.0 0\nM  V30 18 C 11.2278 -3.0271 0.0 0\nM  V30 19 C 9.34396 -7.22163 0.0 0\nM  V30 20 C 8.60083 -6.5525 0.0 0\nM  V30 21 C 7.64976 -6.8615 0.0 0\nM  V30 22 C 7.44183 -7.8397 0.0 0\nM  V30 23 F 6.49076 -8.1487 0.0 0\nM  V30 24 C 8.18496 -8.50883 0.0 0\nM  V30 25 F 7.9771 -9.48697 0.0 0\nM  V30 26 C 9.13603 -8.19977 0.0 0\nM  V30 END ATOM\nM  V30 BEGIN BOND\nM  V30 1 1 2 1 CFG=1\nM  V30 2 1 2 3\nM  V30 3 1 3 4\nM  V30 4 1 4 5 CFG=1\nM  V30 5 1 4 6\nM  V30 6 1 6 7\nM  V30 7 2 7 8\nM  V30 8 1 8 9\nM  V30 9 1 9 10\nM  V30 10 2 10 11\nM  V30 11 1 11 12\nM  V30 12 1 12 13\nM  V30 13 2 13 14\nM  V30 14 1 13 15\nM  V30 15 2 12 16\nM  V30 16 1 16 17\nM  V30 17 2 17 18\nM  V30 18 1 2 19\nM  V30 19 2 19 20\nM  V30 20 1 20 21\nM  V30 21 2 21 22\nM  V30 22 1 22 23\nM  V30 23 1 22 24\nM  V30 24 1 24 25\nM  V30 25 2 24 26\nM  V30 26 1 18 7\nM  V30 27 1 26 19\nM  V30 28 1 18 10\nM  V30 END BOND\nM  V30 BEGIN COLLECTION\nM  V30 MDLV30/STERAC1 ATOMS=(2 2 4)\nM  V30 END COLLECTION\nM  V30 END CTAB\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 10:16:43"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262510162D\n\n  0  0  0  0  0  0  0  0  0  0  0 V3000\nM  V30 BEGIN CTAB\nM  V30 COUNTS 26 28 0 0 0\nM  V30 BEGIN ATOM\nM  V30 1 C 11.0382 -7.58177 0.0 0\nM  V30 2 C 10.295 -6.91263 0.0 0 CFG=2\n...","service":"breaking-good-api","timestamp":"2025-04-26 10:16:43"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 10:16:43"}
{"0":"\n  -INDIGO-04262510162D\n\n  0  0  0  0  0  0  0  0  0  0  0 V3000\nM  V30 BEGIN CTAB\nM  V30 COUNTS 26 28 0 0 0\nM  V30 BEGIN ATOM\nM  V30 1 C 11.0382 -7.58177 0.0 0\nM  V30 2 C 10.295 -6.91263 0.0 0 CFG=2\nM  V30 3 N 10.5029 -5.9345 0.0 0\nM  V30 4 C 9.75976 -5.26537 0.0 0 CFG=1\nM  V30 5 C 8.8087 -5.57437 0.0 0\nM  V30 6 C 9.9677 -4.28717 0.0 0\nM  V30 7 C 10.9188 -3.97817 0.0 0\nM  V30 8 C 11.7278 -4.56597 0.0 0\nM  V30 9 N 12.5368 -3.97817 0.0 0\nM  V30 10 C 12.2278 -3.0271 0.0 0\nM  V30 11 C 12.7278 -2.1611 0.0 0\nM  V30 12 C 12.2278 -1.2951 0.0 0\nM  V30 13 C 12.7278 -0.429033 0.0 0\nM  V30 14 O 12.2278 0.436967 0.0 0\nM  V30 15 N 13.7278 -0.429033 0.0 0\nM  V30 16 C 11.2278 -1.2951 0.0 0\nM  V30 17 C 10.7278 -2.1611 0.0 0\nM  V30 18 C 11.2278 -3.0271 0.0 0\nM  V30 19 C 9.34396 -7.22163 0.0 0\nM  V30 20 C 8.60083 -6.5525 0.0 0\nM  V30 21 C 7.64976 -6.8615 0.0 0\nM  V30 22 C 7.44183 -7.8397 0.0 0\nM  V30 23 F 6.49076 -8.1487 0.0 0\nM  V30 24 C 8.18496 -8.50883 0.0 0\nM  V30 25 F 7.9771 -9.48697 0.0 0\nM  V30 26 C 9.13603 -8.19977 0.0 0\nM  V30 END ATOM\nM  V30 BEGIN BOND\nM  V30 1 1 2 1 CFG=1\nM  V30 2 1 2 3\nM  V30 3 1 3 4\nM  V30 4 1 4 5 CFG=1\nM  V30 5 1 4 6\nM  V30 6 1 6 7\nM  V30 7 2 7 8\nM  V30 8 1 8 9\nM  V30 9 1 9 10\nM  V30 10 2 10 11\nM  V30 11 1 11 12\nM  V30 12 1 12 13\nM  V30 13 2 13 14\nM  V30 14 1 13 15\nM  V30 15 2 12 16\nM  V30 16 1 16 17\nM  V30 17 2 17 18\nM  V30 18 1 2 19\nM  V30 19 2 19 20\nM  V30 20 1 20 21\nM  V30 21 2 21 22\nM  V30 22 1 22 23\nM  V30 23 1 22 24\nM  V30 24 1 24 25\nM  V30 25 2 24 26\nM  V30 26 1 18 7\nM  V30 27 1 26 19\nM  V30 28 1 18 10\nM  V30 END BOND\nM  V30 BEGIN COLLECTION\nM  V30 MDLV30/STERAC1 ATOMS=(2 2 4)\nM  V30 END COLLECTION\nM  V30 END CTAB\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 10:16:43"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(=O)N)ccc12)c1ccc(F)c(F)c1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:44"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 10:16:44"}
{"0":"C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(=O)N)ccc12)c1ccc(F)c(F)c1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 10:16:44"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 10:16:45"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(N)=O)ccc12)c1ccc(F)c(F)c1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:45"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 10:16:45"}
{"0":"C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(N)=O)ccc12)c1ccc(F)c(F)c1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 10:16:45"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 10:16:46"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(=O)N)ccc12)c1ccc(F)c(F)c1","service":"breaking-good-api","timestamp":"2025-04-26 10:16:46"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 10:16:46"}
{"0":"C[C@H](N[C@@H](C)Cc1c[nH]c2cc(C(=O)N)ccc12)c1ccc(F)c(F)c1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 10:16:46"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 10:16:47"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 10:16:48"}
