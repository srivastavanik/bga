{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:30"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:32"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:33"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:34"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:35"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:36"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:38"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:39"}
{"level":"error","message":"Claude API error: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Error generating molecule: Error calling Claude API: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-14 13:52:40"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-14 23:52:53"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-15 00:00:50"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"info","message":"Using fallback test response since API call failed","service":"breaking-good-api","timestamp":"2025-04-15 00:00:51"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:14:33"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:03"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:28:26"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 00:33:15"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Extracted 8029 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)C(=O)NC)N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)C(CS(=O)C(=O)NC)N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Validating SMILES: COc1ccc(CCN2CCN(c3ncnc4[nH]ccc34)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:46"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(CCN2CCN(c3ncnc4[nH]ccc34)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:47"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(CCNC(=O)C2CCN(CC3=Cc4ccccc4C3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:47"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(CCNC(=O)C2CCN(CC3=Cc4ccccc4C3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:36:48"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:36:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Extracted 8364 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Validating SMILES: CC(C(=O)OC)C1CCN(C)CC1c1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Successfully validated SMILES: CC(C(=O)OC)C1CCN(C)CC1c1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(C(=O)CS(=O)c2ccccc2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 00:38:31"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(C(=O)CS(=O)c2ccccc2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 00:38:32"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc(F)cc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:38:32"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc(F)cc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Validating SMILES: N-substituted-2-amino-3-(4-ethoxy-phenyl)propane","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Successfully validated SMILES: N-substituted-2-amino-3-(4-ethoxy-phenyl)propane","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:38:33"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Extracted 9582 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Validating SMILES: CC(C)C(=O)OCCCN1C(=O)C2=C(C1=O)C(=O)N(C(=O)N2)CCCOC(=O)C(C)C","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Successfully validated SMILES: CC(C)C(=O)OCCCN1C(=O)C2=C(C1=O)C(=O)N(C(=O)N2)CCCOC(=O)C(C)C","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc4c(c3)OCO4)CC2)cc(OC)c1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:50:55"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(CC(=O)N2CCN(CCCOc3ccc4c(c3)OCO4)CC2)cc(OC)c1OC","service":"breaking-good-api","timestamp":"2025-04-15 00:50:56"}
{"level":"info","message":"Validating SMILES: 3,4,5-trimethoxy-N-[1-(3-(1,3-benzodioxol-5-yloxy)propyl)piperidin-4-yl]benzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:56"}
{"level":"info","message":"Successfully validated SMILES: 3,4,5-trimethoxy-N-[1-(3-(1,3-benzodioxol-5-yloxy)propyl)piperidin-4-yl]benzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Validating SMILES: COc1ccc(OC)c(CC(=O)NCCCNc2ncnc3[nH]cnc23)c1","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(OC)c(CC(=O)NCCCNc2ncnc3[nH]cnc23)c1","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Validating SMILES: N-(3-(9H-purin-6-ylamino)propyl)-2-(2,5-dimethoxyphenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:57"}
{"level":"info","message":"Successfully validated SMILES: N-(3-(9H-purin-6-ylamino)propyl)-2-(2,5-dimethoxyphenyl)acetamide","service":"breaking-good-api","timestamp":"2025-04-15 00:50:58"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:50:58"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Extracted 6670 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Validating SMILES: O=C(O)C1C(=O)N(CC2=CC=C(F)C=C2)C(=O)N1CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-15 00:52:18"}
{"level":"info","message":"Successfully validated SMILES: O=C(O)C1C(=O)N(CC2=CC=C(F)C=C2)C(=O)N1CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CC(=O)N2CCN(C3CCN(C(=O)C4=CC=C(F)C=C4)CC3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CC(=O)N2CCN(C3CCN(C(=O)C4=CC=C(F)C=C4)CC3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Validating SMILES: N-(4-(4-(2-methoxyphenyl)piperazin-1-yl)butyl)-4-fluorobenzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:19"}
{"level":"info","message":"Successfully validated SMILES: N-(4-(4-(2-methoxyphenyl)piperazin-1-yl)butyl)-4-fluorobenzamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Validating SMILES: CC(C)NC(=O)C1(C2=CC(Cl)=C(OC)C=C2)CCN(CC3=CC=C(F)C=C3)CC1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Successfully validated SMILES: CC(C)NC(=O)C1(C2=CC(Cl)=C(OC)C=C2)CCN(CC3=CC=C(F)C=C3)CC1","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Validating SMILES: N-Isopropyl-1-(3-chloro-4-methoxyphenyl)-4-(4-fluorobenzyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:20"}
{"level":"info","message":"Successfully validated SMILES: N-Isopropyl-1-(3-chloro-4-methoxyphenyl)-4-(4-fluorobenzyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-15 00:52:21"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 00:52:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Extracted 9597 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)C(CS(=O)NC)NC(=O)OC1CCCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)C(CS(=O)NC)NC(=O)OC1CCCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-methyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:00:43"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-methyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:00:44"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N1CCN(C2=CC=CC=C2F)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:44"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(C1CCCC1)N1CCN(C2=CC=CC=C2F)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Validating SMILES: 2-(1-piperidyl)-2-(cyclopentyl)acetate-N-(2-fluorophenyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Successfully validated SMILES: 2-(1-piperidyl)-2-(cyclopentyl)acetate-N-(2-fluorophenyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Validating SMILES: C1CN(CC(C1)OC(=O)N1CCCCC1)C(=O)C1=CC=C(C=C1)C#CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:45"}
{"level":"info","message":"Successfully validated SMILES: C1CN(CC(C1)OC(=O)N1CCCCC1)C(=O)C1=CC=C(C=C1)C#CC1=CC=CC=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:00:46"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:00:46"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Extracted 8003 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Validating SMILES: C[C@H](OS(=O)(=O)c1ccccc1)C(=O)NCCCC(c1ccccc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:06:46"}
{"level":"info","message":"Successfully validated SMILES: C[C@H](OS(=O)(=O)c1ccccc1)C(=O)NCCCC(c1ccccc1)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(cc1OC)C(=O)N1CCN(CC1)C(C)Cc1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Successfully validated SMILES: COc1cc(OC)c(cc1OC)C(=O)N1CCN(CC1)C(C)Cc1ccccc1F","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(cc1)OCCCOc1cccc(c1)C#N","service":"breaking-good-api","timestamp":"2025-04-15 01:06:47"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(cc1)OCCCOc1cccc(c1)C#N","service":"breaking-good-api","timestamp":"2025-04-15 01:06:48"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:06:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Extracted 5870 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Validating SMILES: N-methyl-4-phenyl-3-(pyrrolidin-1-yl)butan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:34"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-4-phenyl-3-(pyrrolidin-1-yl)butan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Validating SMILES: CC(CCCN(C)C)C1=CC=CC=C1N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Successfully validated SMILES: CC(CCCN(C)C)C1=CC=CC=C1N1CCCC1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Validating SMILES: CN(C)C(CC1=CC=CC=C1)C1=NC(N)=CO1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:35"}
{"level":"info","message":"Successfully validated SMILES: CN(C)C(CC1=CC=CC=C1)C1=NC(N)=CO1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:36"}
{"level":"info","message":"Validating SMILES: 3-(benzofuran-4-yl)-N,N-dimethyl-3-(methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:36"}
{"level":"info","message":"Successfully validated SMILES: 3-(benzofuran-4-yl)-N,N-dimethyl-3-(methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Validating SMILES: CN(C)CCCC(NC)C1=CC2=CC=CC=C2O1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Successfully validated SMILES: CN(C)CCCC(NC)C1=CC2=CC=CC=C2O1","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:08:37"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Extracted 7530 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1=CC(=C(C=C1)S(=O)(=O)N)OC2CCOCC2)C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 01:17:17"}
{"level":"info","message":"Successfully validated SMILES: CC(NC(=O)C1=CC(=C(C=C1)S(=O)(=O)N)OC2CCOCC2)C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Validating SMILES: CCCC(C(=O)N1CCN(CC1)C2=CC=C(C=C2)OC)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Successfully validated SMILES: CCCC(C(=O)N1CCN(CC1)C2=CC=C(C=C2)OC)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1OC)C(=O)NC2CCN(CC2)CC3=CC=CC=C3CN4C=NC=N4","service":"breaking-good-api","timestamp":"2025-04-15 01:17:18"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC(=CC=C1OC)C(=O)NC2CCN(CC2)CC3=CC=CC=C3CN4C=NC=N4","service":"breaking-good-api","timestamp":"2025-04-15 01:17:19"}
{"level":"info","message":"Validating SMILES: N-(1-(benzylimidazol-1-yl)piperidin-4-yl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:17:19"}
{"level":"info","message":"Successfully validated SMILES: N-(1-(benzylimidazol-1-yl)piperidin-4-yl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:17:20"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:17:20"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Extracted 7165 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Validating SMILES: COC(=O)C(CS(=O)C(C)(C)NC(=O)OC)NC(=O)OCH3","service":"breaking-good-api","timestamp":"2025-04-15 01:18:23"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)C(CS(=O)C(C)(C)NC(=O)OC)NC(=O)OCH3","service":"breaking-good-api","timestamp":"2025-04-15 01:18:24"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CCCC1)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:24"}
{"level":"info","message":"Successfully validated SMILES: CC(NC(=O)C1CCCC1)C(=O)N1CCN(CC1)C1=CC=C(F)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1OC)CCN1CC(CC2=CC=C(Cl)C=C2)N(C)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC(=CC=C1OC)CCN1CC(CC2=CC=C(Cl)C=C2)N(C)CC1","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:18:25"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Extracted 5776 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Found 6 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)CNC(=O)OS(=O)(=O)c1ccc(N)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)CNC(=O)OS(=O)(=O)c1ccc(N)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Validating SMILES: N-(2,2-dimethylpropanoyl)-2-[(4-aminophenyl)sulfonyloxy]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:23:58"}
{"level":"info","message":"Successfully validated SMILES: N-(2,2-dimethylpropanoyl)-2-[(4-aminophenyl)sulfonyloxy]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:23:59"}
{"level":"info","message":"Validating SMILES: C1CN2CCC1CC2C(c1ccccc1)OC(=O)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:23:59"}
{"level":"info","message":"Successfully validated SMILES: C1CN2CCC1CC2C(c1ccccc1)OC(=O)N(C)C","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Validating SMILES: N-methyl-N-(3","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-N-(3","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Validating SMILES: COc1ccc(CC(NC)C(=O)NCC2=CC(=O)OC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:24:00"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(CC(NC)C(=O)NCC2=CC(=O)OC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Validating SMILES: N-methyl-2-(4-methoxyphenyl)-3-oxo-3-((2-oxo-2H-pyran-4-yl)methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-2-(4-methoxyphenyl)-3-oxo-3-((2-oxo-2H-pyran-4-yl)methylamino)propan-1-amine","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Validated 6 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:24:01"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Extracted 7089 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Validating SMILES: CNC(=O)C(C1=CC=CC=C1)C2CCN(C)CC2","service":"breaking-good-api","timestamp":"2025-04-15 01:25:05"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)C(C1=CC=CC=C1)C2CCN(C)CC2","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Validating SMILES: CC(C)(C)C(=O)NCCCC1=CC=C(OS(=O)(=O)C)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)C(=O)NCCCC1=CC=C(OS(=O)(=O)C)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CCNC(=O)C2CCN(CC3=CC=C(F)C=C3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:06"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CCNC(=O)C2CCN(CC3=CC=C(F)C=C3)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:25:07"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:25:07"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Extracted 8237 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Validating SMILES: CC(C(=O)OC)C(C1=CC=CC=C1)N2CCN(CC2)C3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:29:45"}
{"level":"info","message":"Successfully validated SMILES: CC(C(=O)OC)C(C1=CC=CC=C1)N2CCN(CC2)C3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 01:29:46"}
{"level":"info","message":"Validating SMILES: CNC(=O)C1=CC(=C(C=C1)NS(=O)(=O)C2=CC=C(C=C2)OC)OC3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-15 01:29:46"}
{"level":"info","message":"Successfully validated SMILES: CNC(=O)C1=CC(=C(C=C1)NS(=O)(=O)C2=CC=C(C=C2)OC)OC3CCNCC3","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Validating SMILES: N-methyl-3-methoxy-4-(3-piperidinyloxy)-N-(4-methoxyphenylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Successfully validated SMILES: N-methyl-3-methoxy-4-(3-piperidinyloxy)-N-(4-methoxyphenylsulfonyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Validating SMILES: CC1C2CCC(C1(C)C(=O)C(C)(C)S(=O)C3=CC=C(C=C3)OC)N2C","service":"breaking-good-api","timestamp":"2025-04-15 01:29:47"}
{"level":"info","message":"Successfully validated SMILES: CC1C2CCC(C1(C)C(=O)C(C)(C)S(=O)C3=CC=C(C=C3)OC)N2C","service":"breaking-good-api","timestamp":"2025-04-15 01:29:48"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:29:48"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Extracted 7796 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(OC(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:04"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(OC(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:05"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(S(=O)C(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:05"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(S(=O)C(=O)NC2CCCCC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Validating SMILES: COc1ccc(C(=O)NCCc2ccc(F)cc2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Successfully validated SMILES: COc1ccc(C(=O)NCCc2ccc(F)cc2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Validating SMILES: N-(4-fluorophenethyl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:31:06"}
{"level":"info","message":"Successfully validated SMILES: N-(4-fluorophenethyl)-3,4-dimethoxybenzamide","service":"breaking-good-api","timestamp":"2025-04-15 01:31:07"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:31:07"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Extracted 8676 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Found 4 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NC(=O)C[C@@H](C(=O)NC(C)(C)C)S(=O)C1=CC=C(C=C1)OC","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NC(=O)C[C@@H](C(=O)NC(C)(C)C)S(=O)C1=CC=C(C=C1)OC","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Validating SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methoxyphenyl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:40:41"}
{"level":"info","message":"Successfully validated SMILES: 2-[(diphenylmethyl)sulfinyl]-N-[2-(4-methoxyphenyl)ethyl]acetamide","service":"breaking-good-api","timestamp":"2025-04-15 01:40:42"}
{"level":"info","message":"Validating SMILES: CCOC(=O)C(C1CCCCN1)C1=CC=C(C=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-15 01:40:42"}
{"level":"info","message":"Successfully validated SMILES: CCOC(=O)C(C1CCCCN1)C1=CC=C(C=C1)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Validating SMILES: COC1=CC=C(CC(N)CC2=CC(OC)=C(OC)C=C2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Successfully validated SMILES: COC1=CC=C(CC(N)CC2=CC(OC)=C(OC)C=C2)C=C1","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"info","message":"Validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-15 01:40:43"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 01:58:16"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"error","message":"Error in molecule generation: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:04:11"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"info","message":"Created request ID: 4188bbd8-e522-42c8-a711-03547da661ec","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:12:06"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"error","message":"Error in molecule generation: Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:12:15"}
{"level":"info","message":"Received molecule generation request with requirements: Design a non-stimulant ADHD medication that targets dopamine transporters with minimal side effects.","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"info","message":"Created request ID: f85b9484-cd97-4a98-bc83-33f104f2686f","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:13:15"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"error","message":"Error in molecule generation: Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:13:18"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"info","message":"Created request ID: e8c2a69e-ac76-4b5f-9150-2debb94408c5","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 02:18:00"}
{"level":"error","message":"Claude API error: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"overloaded_error\",\"message\":\"Overloaded\"}}","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 529","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Generating fallback molecules due to Claude API error","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Successfully created fallback response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CN1C=NC2=C1C(=O)N(C(=O)N2C)C: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error validating SMILES CC(CS)C(=O)N1CCCC1C(=O)O: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 02:18:03"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Created request ID: 3553c4d5-d592-4032-bf56-0d9ea1600903","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 11:52:14"}
{"level":"info","message":"Received Claude response with ID: msg_01GaAHpBm1e26niU6V2irMrS","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Extracted 7593 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N(C)Cc1cccc(c1)C(=O)NC(C)(C)CS(=O)(=O)c1ccccc1","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES COC(=O)C(C1CCCC1)N(C)Cc1cccc(c1)C(=O)NC(C)(C)CS(=O)(=O)c1ccccc1: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: COC(=O)C(C1CCCC1)N(C)Cc1ccc(F)c(c1)C(O)C#N","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES COC(=O)C(C1CCCC1)N(C)Cc1ccc(F)c(c1)C(O)C#N: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)OC(C)(C)C)C(=O)NCCc1ccc(OC)c(OC)c1","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error validating SMILES CC(NC(=O)OC(C)(C)C)C(=O)NCCc1ccc(OC)c(OC)c1: Invalid URL","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 11:52:53"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Created request ID: 6ae9bbb0-99e6-4fd9-a965-420ed10695e8","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-15 14:00:27"}
{"level":"info","message":"Received Claude response with ID: msg_012vm6UqPzEf21xbfZNCNW1M","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Extracted 8547 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Validating SMILES: COC(=O)c1cc2ccccc2cc1N1CCC(c2ccc(F)cc2)(C)C(C)C1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Successfully validated SMILES: COC(=O)c1cc2ccccc2cc1N1CCC(c2ccc(F)cc2)(C)C(C)C1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Validating SMILES: CC1(C)OCC(CN(C)C(=O)c2ccc(C)cc2)C(c2ccc(Cl)c(Cl)cc2)N1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:08"}
{"level":"info","message":"Successfully validated SMILES: CC1(C)OCC(CN(C)C(=O)c2ccc(C)cc2)C(c2ccc(Cl)c(Cl)cc2)N1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Validating SMILES: CCN(CC)CCOc1ccc(N2CCN(c3ccc4oc(c5c(F)cccc5F)nc4c3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Successfully validated SMILES: CCN(CC)CCOc1ccc(N2CCN(c3ccc4oc(c5c(F)cccc5F)nc4c3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Successfully extracted 3 molecules","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Saving results to file for request 6ae9bbb0-99e6-4fd9-a965-420ed10695e8","service":"breaking-good-api","timestamp":"2025-04-15 14:01:09"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Created request ID: b69bdc80-fbeb-4c3e-a27b-5e2981a12263","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 18:56:05"}
{"level":"info","message":"Received Claude response with ID: msg_01YUdrsGwycmeLTAhKXSR9mN","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Extracted 7439 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CC(NC)C(=O)c1ccc(cc1)OC(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CC(NC)C(=O)c1ccc(cc1)OC(F)(F)F: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(c(c1)OC)NS(=O)(=O)C(F)(F)F","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CC(N)Cc1ccc(c(c1)OC)NS(=O)(=O)C(F)(F)F: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validating SMILES: CCCN1CCN(CC1)C(=O)c1ccc(cc1)C(C)NC","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error validating SMILES CCCN1CCN(CC1)C(=O)c1ccc(cc1)C(C)NC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:56:39"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Created request ID: 3668773d-b529-490c-88dd-efef149d4a47","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 18:56:49"}
{"level":"info","message":"Received Claude response with ID: msg_01N1r6wdXkUEq3FtCMKEJCJ6","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Extracted 9618 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Found 3 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C2C(C2)C3=CC=C(C=C3)OC4=CC=C(N)C=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES C(=O)(NS(=O)(=O)C1=CC=C(C=C1)OC)C2C(C2)C3=CC=C(C=C3)OC4=CC=C(N)C=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: COC1=CC(=CC=C1)C2CCCN2CC(=O)C3=CC=C(F)C=C3NC4=CC=CC=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES COC1=CC(=CC=C1)C2CCCN2CC(=O)C3=CC=C(F)C=C3NC4=CC=CC=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validating SMILES: CC1=C(C(=O)N(C)C2=CC=CC=C12)CC3CCNCC3C4=CC=C(OC)C=C4","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error validating SMILES CC1=C(C(=O)N(C)C2=CC=CC=C12)CC3CCNCC3C4=CC=C(OC)C=C4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 18:57:34"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someone's productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Created request ID: fc360418-703a-42a1-ba9e-ad04c4002201","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:01:16"}
{"level":"info","message":"Received Claude response with ID: msg_012uSaZfvoG8mnj1oWAoZ12r","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Claude response has array content with 1 items","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Content item 0 type: text","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Extracted 8020 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Found 5 SMILES candidates","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: FC(F)(F)c1ccc(cc1)C(=O)NC2CCN(CC2)CCCOc3ccc(F)cc3","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES FC(F)(F)c1ccc(cc1)C(=O)NC2CCN(CC2)CCCOc3ccc(F)cc3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: N-(4-(trifluoromethyl)phenyl)-1-(3-(4-fluorophenoxy)propyl)piperidine-4-carboxamide","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES N-(4-(trifluoromethyl)phenyl)-1-(3-(4-fluorophenoxy)propyl)piperidine-4-carboxamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: N-{1-[3-(3-fluoro-phenyl)-propyl]-piperidin-4-yl}-N-phenyl-propionamide","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES N-{1-[3-(3-fluoro-phenyl)-propyl]-piperidin-4-yl}-N-phenyl-propionamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: COc1ccc2c(c1)C(=O)N(C2)CCCN3CCN(CC3)c4cccc(Cl)c4","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES COc1ccc2c(c1)C(=O)N(C2)CCCN3CCN(CC3)c4cccc(Cl)c4: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validating SMILES: Cc1nc(sc1C(=O)NCCN2CCN(CC2)c3ccc(F)cc3F)N4CCN(CC4)CC(=O)O","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error validating SMILES Cc1nc(sc1C(=O)NCCN2CCN(CC2)c3ccc(F)cc3F)N4CCN(CC4)CC(=O)O: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Validated 0 molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"No valid molecules could be validated","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"error","message":"Error in molecule generation: Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:01:56"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Created request ID: 3554d0ee-534e-48b8-b602-352f19735c70","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:14:02"}
{"level":"info","message":"Received Claude response with ID: msg_01LCnyk5nWn3PHQkfamaSM9e","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Extracted 7170 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Validating SMILES: CC(N)C(=O)NC1CCCC(C1)C(C)NC(=O)C2=CC=CC=C2OC","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error during validation/property call for SMILES CC(N)C(=O)NC1CCCC(C1)C(C)NC(=O)C2=CC=CC=C2OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"info","message":"Validating SMILES: S)-2-amino-N-((R)-1-cyclohexyl-2-(methylamino)-2-oxoethyl)-3-(4-methoxyphenyl)propanamide","service":"breaking-good-api","timestamp":"2025-04-19 19:14:38"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES S)-2-amino-N-((R)-1-cyclohexyl-2-(methylamino)-2-oxoethyl)-3-(4-methoxyphenyl)propanamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: CNCC1=CC(OC)=C(OC)C=C1CC(=O)NC2CCCCC2N","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES CNCC1=CC(OC)=C(OC)C=C1CC(=O)NC2CCCCC2N: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: 3-(3,4-dimethoxyphenyl)-N-(2-aminocyclohexyl)-N-methylpropanamide","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES 3-(3,4-dimethoxyphenyl)-N-(2-aminocyclohexyl)-N-methylpropanamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validating SMILES: FC(F)(F)C1=CC=C(C=C1)C2CCCN2CC3=CC=C(O)C=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error during validation/property call for SMILES FC(F)(F)C1=CC=C(C=C1)C2CCCN2CC3=CC=C(O)C=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:14:39"}
{"level":"error","message":"Error in Claude Chat: Request failed with status code 400","service":"breaking-good-api","timestamp":"2025-04-19 19:26:12"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"invalid_request_error\",\"message\":\"anthropic_version: Extra inputs are not permitted\"}}","service":"breaking-good-api","timestamp":"2025-04-19 19:26:12"}
{"level":"info","message":"Received molecule generation request with requirements: Generate","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Created request ID: 2dbcf70c-dcfd-4a4b-85e5-53a9b2ec19a8","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:26:22"}
{"level":"info","message":"Received Claude response with ID: msg_01P2FZUTGnX5siweKDvz4aDH","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Extracted 7240 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: CC(NC)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES CC(NC)Cc1ccc(OC(=O)N2CCN(C)CC2)cc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: 2-(4-(4-methylpiperazine-1-carbonyloxy)phenyl)-N-methylethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES 2-(4-(4-methylpiperazine-1-carbonyloxy)phenyl)-N-methylethan-1-amine: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)N2CCN(CCCc3ccccc3)CC2)ccc1OC","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES COc1cc(CC(=O)N2CCN(CCCc3ccccc3)CC2)ccc1OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: CNC(=O)c1ccc(N2CCN(CC(O)c3ccc(F)cc3)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES CNC(=O)c1ccc(N2CCN(CC(O)c3ccc(F)cc3)CC2)cc1: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validating SMILES: 4-(4-(1-hydroxy-2-(4-fluorophenyl)ethyl)piperazin-1-yl)-N-methylbenzamide","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error during validation/property call for SMILES 4-(4-(1-hydroxy-2-(4-fluorophenyl)ethyl)piperazin-1-yl)-N-methylbenzamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:26:59"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Created request ID: 4ed02fe6-df96-4c53-8b6f-0891a6a134f5","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-19 19:30:52"}
{"level":"info","message":"Received Claude response with ID: msg_013dTVi7zucwmW6kYbYyyW21","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Extracted 6959 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Validating SMILES: CC(NC(=O)C1CCCCC1)C(=O)NCCC2=CNC3=C2C=C(OC)C=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error during validation/property call for SMILES CC(NC(=O)C1CCCCC1)C(=O)NCCC2=CNC3=C2C=C(OC)C=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"info","message":"Validating SMILES: N-(1-(1H-indol-4-yloxy)propan-2-yl)-cyclohexanecarboxamide","service":"breaking-good-api","timestamp":"2025-04-19 19:31:26"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES N-(1-(1H-indol-4-yloxy)propan-2-yl)-cyclohexanecarboxamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: CC(C)NC(=O)C1=CC(=C(C=C1)OC)OCC2CCCN2CC3=CC=CC=C3","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES CC(C)NC(=O)C1=CC(=C(C=C1)OC)OCC2CCCN2CC3=CC=CC=C3: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: N-isopropyl-4-methoxy-3-((1-phenethylpyrrolidin-3-yl)methoxy)benzamide","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES N-isopropyl-4-methoxy-3-((1-phenethylpyrrolidin-3-yl)methoxy)benzamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validating SMILES: CCCN1CCN(CC1)C(=O)C2=CN=C(N)S2.Cl","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\r\n  File \"C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\utils\\rdkit\\molecular_properties.py\", line 6, in <module>\r\n    from rdkit import Chem\r\nModuleNotFoundError: No module named 'rdkit'\r\n","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error during validation/property call for SMILES CCCN1CCN(CC1)C(=O)C2=CN=C(N)S2.Cl: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Validated 0 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"No valid molecules could be validated from response or fallback.","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Error processing molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"error","message":"Failed to process Claude response: Failed to process molecule design: No valid molecules could be validated from Claude response or fallbacks","service":"breaking-good-api","timestamp":"2025-04-19 19:31:27"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Created request ID: 76c6829f-e83f-44bd-bb28-42b56f6865ee","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 13:25:26"}
{"level":"info","message":"Received Claude response with ID: msg_012i67F1HcGgCT6CWTYxwuJr","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Extracted 7231 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Validating SMILES: 2-[(4-fluorophenyl)(1-methylpiperidin-4-yl)methoxy]-N-methyl-N-(2-phenylethyl)ethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-20 13:26:03"}
{"level":"info","message":"Successfully validated SMILES: 2-[(4-fluorophenyl)(1-methylpiperidin-4-yl)methoxy]-N-methyl-N-(2-phenylethyl)ethan-1-amine","service":"breaking-good-api","timestamp":"2025-04-20 13:28:13"}
{"level":"info","message":"Validating SMILES: FC1=CC=C(C(OCCN(C)CCC2=CC=CC=C2)C2CCN(C)CC2)C=C1","service":"breaking-good-api","timestamp":"2025-04-20 13:28:13"}
{"level":"error","message":"Error comparing molecules: RDKit script exited with code 2: usage: molecule_operations.py [-h] [--smiles SMILES] --operation\r\n                              {validate,descriptors,svg,optimize_3d,fingerprint}\r\n                              [--output {json,text}]\r\nmolecule_operations.py: error: the following arguments are required: --operation\r\n","service":"breaking-good-api","timestamp":"2025-04-20 17:05:14"}
{"level":"info","message":"Searching PubMed for: adhd AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:05:40"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:05:41"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:05:41"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:45"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:46"}
{"level":"info","message":"Fetching details for ID: 32938246","service":"breaking-good-api","timestamp":"2025-04-20 17:05:47"}
{"level":"info","message":"Searching PubMed for: Adderall AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:14"}
{"level":"info","message":"Found 10 IDs (total 44853)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:15"}
{"level":"error","message":"Literature search error: pubmedData?.ArticleIdList?.ArticleId?.find is not a function","service":"breaking-good-api","stack":"TypeError: pubmedData?.ArticleIdList?.ArticleId?.find is not a function\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:87:59\n    at Array.map (<anonymous>)\n    at C:\\Users\\nicks\\Downloads\\breakinggood\\backend\\api\\literature.js:62:40\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","timestamp":"2025-04-20 17:06:16"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:19"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:19"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:20"}
{"level":"info","message":"Searching PubMed for: Aderall AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:26"}
{"level":"info","message":"Found 0 IDs (total 0)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:26"}
{"level":"info","message":"Searching PubMed for: Neuro AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:35"}
{"level":"info","message":"Found 10 IDs (total 56201)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:35"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:36"}
{"level":"info","message":"Searching PubMed for: ADHD AND (ADHD OR attention deficit hyperactivity disorder OR neuropharmacology OR stimulant OR neurotransmitter), limit: 10, start: 0","service":"breaking-good-api","timestamp":"2025-04-20 17:06:43"}
{"level":"info","message":"Found 10 IDs (total 53951)","service":"breaking-good-api","timestamp":"2025-04-20 17:06:44"}
{"level":"info","message":"Formatted 10 articles","service":"breaking-good-api","timestamp":"2025-04-20 17:06:44"}
{"level":"info","message":"Fetching details for ID: 29428394","service":"breaking-good-api","timestamp":"2025-04-20 17:06:46"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Created request ID: c9b61eb2-3679-4fc0-b7aa-56ce285360c7","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:19:04"}
{"level":"info","message":"Received Claude response with ID: msg_01XLXUNvmwUNkeKR9xMm1B5R","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Extracted 6700 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: CC(C)(OCC(=O)N(C)CS(=O)(=O)c1ccc(cc1)C(=O)NC2C(=O)N(CC(c3ccccc3)C2)C","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(OCC(=O)N(C)CS(=O)(=O)c1ccc(cc1)C(=O)NC2C(=O)N(CC(c3ccccc3)C2)C","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: 2-[(Diphenylmethyl)sulfinyl]-N-[2-(1-oxo-4-phenyl-2-pyrrolidinyl)acetamide]methylacetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Successfully validated SMILES: 2-[(Diphenylmethyl)sulfinyl]-N-[2-(1-oxo-4-phenyl-2-pyrrolidinyl)acetamide]methylacetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Validating SMILES: C1CC(CNC(=O)C2CCN(CC2)c3nc4c(cnn4)c(n3)C(F)(F)F)C(=O)N1CCc5ccccc5OC","service":"breaking-good-api","timestamp":"2025-04-20 17:19:41"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Created request ID: a82d4b9c-4c4f-4b0d-8a32-4969f7af9fac","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:27:23"}
{"level":"info","message":"Received Claude response with ID: msg_01RJH8r4DhAKVYi5Tbd3iYr3","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Extracted 8554 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Found 6 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(cc1)Oc1ccc(cc1)C(=O)NC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-20 17:28:05"}
{"level":"info","message":"Successfully validated SMILES: CC(N)Cc1ccc(cc1)Oc1ccc(cc1)C(=O)NC(C)(C)C","service":"breaking-good-api","timestamp":"2025-04-20 17:28:08"}
{"level":"info","message":"Validating SMILES: 2-(4-(4-(2-aminopropyl)phenoxy)phenyl)-N-tert-butyl-acetamide","service":"breaking-good-api","timestamp":"2025-04-20 17:28:08"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Created request ID: 7cd5360a-ac3e-4314-b341-9ffca932ff97","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-20 17:44:50"}
{"level":"info","message":"Received Claude response with ID: msg_01TxuvMqtuhgTNRGyWMCNLEU","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Extracted 7240 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Validating SMILES: 2-[(R)-1-amino-2-methylpropyl]-N-methyl-benzhydrylsulfinamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:24"}
{"level":"info","message":"Successfully validated SMILES: 2-[(R)-1-amino-2-methylpropyl]-N-methyl-benzhydrylsulfinamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Validating SMILES: CC(C)[C@H](N)C1=CC=CC=C1C(C2=CC=CC=C2)S(=O)NCH3","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Successfully validated SMILES: CC(C)[C@H](N)C1=CC=CC=C1C(C2=CC=CC=C2)S(=O)NCH3","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Validating SMILES: S)-N-(4-fluorophenethyl)-3-(1H-imidazol-5-yl)-2-methyl-propanamide","service":"breaking-good-api","timestamp":"2025-04-20 17:45:25"}
{"level":"info","message":"Received molecule generation request with requirements: \nI want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Created request ID: 8f7c476b-07f4-46a0-940d-2eeccce0db79","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:21"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Saving results to file for request 8f7c476b-07f4-46a0-940d-2eeccce0db79","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:03:22"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:03:23"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"info","message":"Created request ID: 94660d83-dd94-4b2c-80e2-673cc7797043","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:05:52"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:53"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Saving results to file for request 94660d83-dd94-4b2c-80e2-673cc7797043","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:05:54"}
{"level":"info","message":"Received molecule generation request with requirements: I want you to help me develop an alternative neuro-stimulant (that simulates Adderall) that will boost someones productivity and performance consistently without the downsides as possible.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"info","message":"Created request ID: 41eb4027-95a7-417d-94bb-8aae4f0d3401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-22 15:07:44"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401. Using fallback molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Extracted 509 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CN1C2=C(C=C(C=C2)Cl)N(C(=O)CC1=O)CC3=CC=C(C=C3)F","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: C1=CC=C(C=C1)C2=COC3=CC(=CC(=C3)OC4=CC=CC=C4)C2=O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CC(C)(C)NCC(COC1=CC=CC2=CC=CC=C21)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Validating SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:07:45"}
{"level":"info","message":"Successfully validated SMILES: CN1C=NC2=C1C(=O)N(C(=O)N2C)C","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Validating SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Successfully validated SMILES: CC(CS)C(=O)N1CCCC1C(=O)O","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Validated 5 molecules out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Saving results to file for request 41eb4027-95a7-417d-94bb-8aae4f0d3401","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-22 15:07:46"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 11:56:21"}
{"level":"info","message":"Received molecule generation request with requirements: gg","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"info","message":"Created request ID: e998a3e7-29ac-4048-9bf5-65a2404c5a3f","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"info","message":"User prompt length: 627 characters","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"error","message":"Claude API error: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"error","message":"Claude API response: {\"type\":\"error\",\"error\":{\"type\":\"authentication_error\",\"message\":\"invalid x-api-key\"}}","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"error","message":"Claude API call failed: Error calling Claude API: Request failed with status code 401","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"error","message":"Error details: {}","service":"breaking-good-api","timestamp":"2025-04-26 11:57:13"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 11:58:39"}
{"level":"info","message":"Received molecule generation request with requirements: ADHD gen","service":"breaking-good-api","timestamp":"2025-04-26 11:59:07"}
{"level":"info","message":"Created request ID: 00681153-a2c6-4f4e-b25d-98509316fd4d","service":"breaking-good-api","timestamp":"2025-04-26 11:59:07"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-26 11:59:07"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-26 11:59:07"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-26 11:59:07"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-26 11:59:07"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-26 11:59:07"}
{"level":"info","message":"User prompt length: 633 characters","service":"breaking-good-api","timestamp":"2025-04-26 11:59:07"}
{"level":"info","message":"Claude API response received: msg_01RupSKDf6qjehuAeLskv14E","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Received Claude response with ID: msg_01RupSKDf6qjehuAeLskv14E","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Using string content directly, length: 8657","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Extracted 8657 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Validating SMILES: CC(N)Cc1ccc(O)c(O)c1C(=O)NC2CCCCC2","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/molecular_properties.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"warn","message":"Error calculating properties for SMILES: CC(N)Cc1ccc(O)c(O)c1C(=O)NC2CCCCC2. Error: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Using basic validation for SMILES since RDKit failed: CC(N)Cc1ccc(O)c(O)c1C(=O)NC2CCCCC2","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Added molecule with basic validation (RDKit unavailable): CC(N)Cc1ccc(O)c(O)c1C(=O)NC2CCCCC2","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Validating SMILES: N-cyclohexyl-4,5-dihydroxy-2-(2-aminopropyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/molecular_properties.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"warn","message":"Error calculating properties for SMILES: N-cyclohexyl-4,5-dihydroxy-2-(2-aminopropyl)benzamide. Error: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Using basic validation for SMILES since RDKit failed: N-cyclohexyl-4,5-dihydroxy-2-(2-aminopropyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Added molecule with basic validation (RDKit unavailable): N-cyclohexyl-4,5-dihydroxy-2-(2-aminopropyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Validating SMILES: COc1cc(CC(=O)NCC2CCN(CC3=CNC=N3)CC2)c(OC)cc1Br","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/molecular_properties.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"warn","message":"Error calculating properties for SMILES: COc1cc(CC(=O)NCC2CCN(CC3=CNC=N3)CC2)c(OC)cc1Br. Error: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Using basic validation for SMILES since RDKit failed: COc1cc(CC(=O)NCC2CCN(CC3=CNC=N3)CC2)c(OC)cc1Br","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Added molecule with basic validation (RDKit unavailable): COc1cc(CC(=O)NCC2CCN(CC3=CNC=N3)CC2)c(OC)cc1Br","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Validating SMILES: 3-bromo-2,5-dimethoxy-N-(1-(imidazol-4-ylmethyl)piperidin-4-yl)methylphenylacetamide","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/molecular_properties.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"warn","message":"Error calculating properties for SMILES: 3-bromo-2,5-dimethoxy-N-(1-(imidazol-4-ylmethyl)piperidin-4-yl)methylphenylacetamide. Error: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Using basic validation for SMILES since RDKit failed: 3-bromo-2,5-dimethoxy-N-(1-(imidazol-4-ylmethyl)piperidin-4-yl)methylphenylacetamide","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Added molecule with basic validation (RDKit unavailable): 3-bromo-2,5-dimethoxy-N-(1-(imidazol-4-ylmethyl)piperidin-4-yl)methylphenylacetamide","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Validating SMILES: COC(=O)c1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calculating molecular properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/molecular_properties.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"warn","message":"Error calculating properties for SMILES: COC(=O)c1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC. Error: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Using basic validation for SMILES since RDKit failed: COC(=O)c1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Added molecule with basic validation (RDKit unavailable): COC(=O)c1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Saving results to file for request 00681153-a2c6-4f4e-b25d-98509316fd4d","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error predicting ADMET properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/admet_prediction.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calling ADMET endpoint for CC(N)Cc1ccc(O)c(O)c1C(=O)NC2CCCCC2: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error predicting ADMET properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/admet_prediction.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calling ADMET endpoint for N-cyclohexyl-4,5-dihydroxy-2-(2-aminopropyl)benzamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error predicting ADMET properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/admet_prediction.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calling ADMET endpoint for COc1cc(CC(=O)NCC2CCN(CC3=CNC=N3)CC2)c(OC)cc1Br: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error predicting ADMET properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/admet_prediction.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calling ADMET endpoint for 3-bromo-2,5-dimethoxy-N-(1-(imidazol-4-ylmethyl)piperidin-4-yl)methylphenylacetamide: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error predicting ADMET properties: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/admet_prediction.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error calling ADMET endpoint for COC(=O)c1cc(OC)c(OCCN2CCN(C(=O)c3ccc(F)cc3)CC2)cc1OC: Request failed with status code 500","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error generating 3D structure: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/structure_generation.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:49"}
{"level":"error","message":"Error generating 3D structure: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/structure_generation.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:50"}
{"level":"error","message":"Error generating 3D structure: RDKit script exited with code 1: Traceback (most recent call last):\n  File \"/Users/siddhantpatel/bga/backend/utils/rdkit/structure_generation.py\", line 6, in <module>\n    from rdkit import Chem\nModuleNotFoundError: No module named 'rdkit'\n","service":"breaking-good-api","timestamp":"2025-04-26 11:59:50"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 12:01:02"}
{"level":"info","message":"Received molecule generation request with requirements: work \n","service":"breaking-good-api","timestamp":"2025-04-26 12:01:21"}
{"level":"info","message":"Created request ID: fcd8580a-edfe-406d-bf77-cfda3a3f4460","service":"breaking-good-api","timestamp":"2025-04-26 12:01:21"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-26 12:01:21"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-26 12:01:21"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-26 12:01:21"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-26 12:01:21"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-26 12:01:21"}
{"level":"info","message":"User prompt length: 631 characters","service":"breaking-good-api","timestamp":"2025-04-26 12:01:21"}
{"level":"info","message":"Claude API response received: msg_01WrqgZPjgEDgbN2w6WbvX37","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Received Claude response with ID: msg_01WrqgZPjgEDgbN2w6WbvX37","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Using string content directly, length: 8658","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Extracted 8658 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Validating SMILES: FC(F)(F)c1ccc(cc1)C(=O)N1CCNC(C1)C1CCN(CC1)c1ncnc2[nH]ccc12","service":"breaking-good-api","timestamp":"2025-04-26 12:02:04"}
{"level":"info","message":"Attempting 3D structure generation for: FC(F)(F)c1ccc(cc1)C(=O)N1CCNC(C1)C1CCN(CC1)c1ncnc2[nH]ccc12","service":"breaking-good-api","timestamp":"2025-04-26 12:02:31"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): FC(F)(F)c1ccc(cc1)C(=O)N1CCNC(C1)C1CCN(CC1)c1ncnc2[nH]ccc12","service":"breaking-good-api","timestamp":"2025-04-26 12:02:31"}
{"level":"info","message":"Validating SMILES: 4-[4-(1H-pyrrolo[2,3-d]pyrimidin-4-yl)piperazin-1-yl]piperidin-2-yl-N-(4-trifluoromethylphenyl)formamide","service":"breaking-good-api","timestamp":"2025-04-26 12:02:31"}
{"level":"info","message":"Attempting 3D structure generation for: 4-[4-(1H-pyrrolo[2,3-d]pyrimidin-4-yl)piperazin-1-yl]piperidin-2-yl-N-(4-trifluoromethylphenyl)formamide","service":"breaking-good-api","timestamp":"2025-04-26 12:02:32"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 4-[4-(1H-pyrrolo[2,3-d]pyrimidin-4-yl)piperazin-1-yl]piperidin-2-yl-N-(4-trifluoromethylphenyl)formamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 12:02:32"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 4-[4-(1H-pyrrolo[2,3-d]pyrimidin-4-yl)piperazin-1-yl]piperidin-2-yl-N-(4-trifluoromethylphenyl)formamide","service":"breaking-good-api","timestamp":"2025-04-26 12:02:32"}
{"level":"info","message":"Validating SMILES: CC(C)N1CCN(CC1)c1cc(nc2c1ccnc2)c1cccc(c1)C(=O)N1CCC(CC1)N1CCOCC1","service":"breaking-good-api","timestamp":"2025-04-26 12:02:32"}
{"level":"info","message":"Attempting 3D structure generation for: CC(C)N1CCN(CC1)c1cc(nc2c1ccnc2)c1cccc(c1)C(=O)N1CCC(CC1)N1CCOCC1","service":"breaking-good-api","timestamp":"2025-04-26 12:02:32"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): CC(C)N1CCN(CC1)c1cc(nc2c1ccnc2)c1cccc(c1)C(=O)N1CCC(CC1)N1CCOCC1","service":"breaking-good-api","timestamp":"2025-04-26 12:02:33"}
{"level":"info","message":"Validating SMILES: 4-(4-morpholinylpiperidin-1-yl)-N-isopropyl-N-(4-(quinazolin-6-yl)benzoyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-26 12:02:33"}
{"level":"info","message":"Attempting 3D structure generation for: 4-(4-morpholinylpiperidin-1-yl)-N-isopropyl-N-(4-(quinazolin-6-yl)benzoyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-26 12:02:33"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 4-(4-morpholinylpiperidin-1-yl)-N-isopropyl-N-(4-(quinazolin-6-yl)benzoyl)piperazine - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 12:02:34"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 4-(4-morpholinylpiperidin-1-yl)-N-isopropyl-N-(4-(quinazolin-6-yl)benzoyl)piperazine","service":"breaking-good-api","timestamp":"2025-04-26 12:02:34"}
{"level":"info","message":"Validating SMILES: COc1ccc(cc1OC)CCN1CCN(CC1)C(=O)c1cc(on1)c1ccc(F)cc1F.Cl","service":"breaking-good-api","timestamp":"2025-04-26 12:02:34"}
{"level":"info","message":"Attempting 3D structure generation for: COc1ccc(cc1OC)CCN1CCN(CC1)C(=O)c1cc(on1)c1ccc(F)cc1F.Cl","service":"breaking-good-api","timestamp":"2025-04-26 12:02:34"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1ccc(cc1OC)CCN1CCN(CC1)C(=O)c1cc(on1)c1ccc(F)cc1F.Cl","service":"breaking-good-api","timestamp":"2025-04-26 12:02:34"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-26 12:02:34"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-26 12:02:34"}
{"level":"info","message":"Saving results to file for request fcd8580a-edfe-406d-bf77-cfda3a3f4460","service":"breaking-good-api","timestamp":"2025-04-26 12:02:34"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-26 12:02:34"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-26 12:02:35"}
{"level":"info","message":"Received /chat request. Model: claude-3-7-sonnet-20250219, Temp: 1, MaxTokens: 4096","service":"breaking-good-api","timestamp":"2025-04-26 12:03:37"}
{"0":"[","1":"\n","10":"\"","100":"l","101":"o","102":"!","103":" ","104":"H","105":"o","106":"w","107":" ","108":"c","109":"a","11":"r","110":"n","111":" ","112":"I","113":" ","114":"h","115":"e","116":"l","117":"p","118":" ","119":"w","12":"o","120":"i","121":"t","122":"h","123":" ","124":"d","125":"r","126":"u","127":"g","128":" ","129":"d","13":"l","130":"e","131":"s","132":"i","133":"g","134":"n","135":" ","136":"t","137":"o","138":"d","139":"a","14":"e","140":"y","141":"?","142":"\"","143":"\n","144":" ","145":" ","146":" ","147":" ","148":" ","149":" ","15":"\"","150":"}","151":"\n","152":" ","153":" ","154":" ","155":" ","156":"]","157":"\n","158":" ","159":" ","16":":","160":"}","161":",","162":"\n","163":" ","164":" ","165":"{","166":"\n","167":" ","168":" ","169":" ","17":" ","170":" ","171":"\"","172":"r","173":"o","174":"l","175":"e","176":"\"","177":":","178":" ","179":"\"","18":"\"","180":"u","181":"s","182":"e","183":"r","184":"\"","185":",","186":"\n","187":" ","188":" ","189":" ","19":"a","190":" ","191":"\"","192":"c","193":"o","194":"n","195":"t","196":"e","197":"n","198":"t","199":"\"","2":" ","20":"s","200":":","201":" ","202":"[","203":"\n","204":" ","205":" ","206":" ","207":" ","208":" ","209":" ","21":"s","210":"{","211":"\n","212":" ","213":" ","214":" ","215":" ","216":" ","217":" ","218":" ","219":" ","22":"i","220":"\"","221":"t","222":"y","223":"p","224":"e","225":"\"","226":":","227":" ","228":"\"","229":"t","23":"s","230":"e","231":"x","232":"t","233":"\"","234":",","235":"\n","236":" ","237":" ","238":" ","239":" ","24":"t","240":" ","241":" ","242":" ","243":" ","244":"\"","245":"t","246":"e","247":"x","248":"t","249":"\"","25":"a","250":":","251":" ","252":"\"","253":"[","254":"F","255":"o","256":"c","257":"u","258":"s","259":" ","26":"n","260":"o","261":"n","262":" ","263":"M","264":"o","265":"l","266":"e","267":"c","268":"u","269":"l","27":"t","270":"e","271":":","272":" ","273":"M","274":"o","275":"l","276":"e","277":"c","278":"u","279":"l","28":"\"","280":"e","281":" ","282":"C","283":"a","284":"n","285":"d","286":"i","287":"d","288":"a","289":"t","29":",","290":"e","291":" ","292":"1","293":",","294":" ","295":"S","296":"M","297":"I","298":"L","299":"E","3":" ","30":"\n","300":"S","301":":","302":" ","303":"F","304":"C","305":"(","306":"F","307":")","308":"(","309":"F","31":" ","310":")","311":"c","312":"1","313":"c","314":"c","315":"c","316":"(","317":"c","318":"c","319":"1","32":" ","320":")","321":"C","322":"(","323":"=","324":"O","325":")","326":"N","327":"1","328":"C","329":"C","33":" ","330":"N","331":"C","332":"(","333":"C","334":"1","335":")","336":"C","337":"1","338":"C","339":"C","34":" ","340":"N","341":"(","342":"C","343":"C","344":"1","345":")","346":"c","347":"1","348":"n","349":"c","35":"\"","350":"n","351":"c","352":"2","353":"[","354":"n","355":"H","356":"]","357":"c","358":"c","359":"c","36":"c","360":"1","361":"2","362":"]","363":"\"","364":"\n","365":" ","366":" ","367":" ","368":" ","369":" ","37":"o","370":" ","371":"}","372":"\n","373":" ","374":" ","375":" ","376":" ","377":"]","378":"\n","379":" ","38":"n","380":" ","381":"}","382":",","383":"\n","384":" ","385":" ","386":"{","387":"\n","388":" ","389":" ","39":"t","390":" ","391":" ","392":"\"","393":"r","394":"o","395":"l","396":"e","397":"\"","398":":","399":" ","4":"{","40":"e","400":"\"","401":"u","402":"s","403":"e","404":"r","405":"\"","406":",","407":"\n","408":" ","409":" ","41":"n","410":" ","411":" ","412":"\"","413":"c","414":"o","415":"n","416":"t","417":"e","418":"n","419":"t","42":"t","420":"\"","421":":","422":" ","423":"[","424":"\n","425":" ","426":" ","427":" ","428":" ","429":" ","43":"\"","430":" ","431":"{","432":"\n","433":" ","434":" ","435":" ","436":" ","437":" ","438":" ","439":" ","44":":","440":" ","441":"\"","442":"t","443":"y","444":"p","445":"e","446":"\"","447":":","448":" ","449":"\"","45":" ","450":"t","451":"e","452":"x","453":"t","454":"\"","455":",","456":"\n","457":" ","458":" ","459":" ","46":"[","460":" ","461":" ","462":" ","463":" ","464":" ","465":"\"","466":"t","467":"e","468":"x","469":"t","47":"\n","470":"\"","471":":","472":" ","473":"\"","474":"e","475":"x","476":"p","477":"l","478":"a","479":"i","48":" ","480":"n","481":" ","482":"t","483":"h","484":"i","485":"s","486":" ","487":"c","488":"a","489":"n","49":" ","490":"d","491":"i","492":"d","493":"a","494":"t","495":"e","496":"\"","497":"\n","498":" ","499":" ","5":"\n","50":" ","500":" ","501":" ","502":" ","503":" ","504":"}","505":"\n","506":" ","507":" ","508":" ","509":" ","51":" ","510":"]","511":"\n","512":" ","513":" ","514":"}","515":"\n","516":"]","52":" ","53":" ","54":"{","55":"\n","56":" ","57":" ","58":" ","59":" ","6":" ","60":" ","61":" ","62":" ","63":" ","64":"\"","65":"t","66":"y","67":"p","68":"e","69":"\"","7":" ","70":":","71":" ","72":"\"","73":"t","74":"e","75":"x","76":"t","77":"\"","78":",","79":"\n","8":" ","80":" ","81":" ","82":" ","83":" ","84":" ","85":" ","86":" ","87":" ","88":"\"","89":"t","9":" ","90":"e","91":"x","92":"t","93":"\"","94":":","95":" ","96":"\"","97":"H","98":"e","99":"l","level":"debug","message":"Chat Messages Payload:","service":"breaking-good-api","timestamp":"2025-04-26 12:03:37"}
{"level":"info","message":"Sending messages to Anthropic API via claudeClient...","service":"breaking-good-api","timestamp":"2025-04-26 12:03:37"}
{"level":"info","message":"Received response from Anthropic API.","service":"breaking-good-api","timestamp":"2025-04-26 12:03:46"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 12:16:48"}
{"level":"info","message":"Received molecule generation request with requirements: ADHD thing make","service":"breaking-good-api","timestamp":"2025-04-26 12:17:15"}
{"level":"info","message":"Created request ID: 67ee80bf-579e-4b8a-bf54-2f3e1e91bf0f","service":"breaking-good-api","timestamp":"2025-04-26 12:17:15"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-26 12:17:15"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-26 12:17:15"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-26 12:17:15"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-26 12:17:15"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-26 12:17:15"}
{"level":"info","message":"User prompt length: 640 characters","service":"breaking-good-api","timestamp":"2025-04-26 12:17:15"}
{"level":"info","message":"Claude API response received: msg_01PPo5M58A7rvBHM4UW2ygbm","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Received Claude response with ID: msg_01PPo5M58A7rvBHM4UW2ygbm","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Using string content directly, length: 8166","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Extracted 8166 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Found 3 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Validating SMILES: C1CC(C(=O)NCCN2CCN(CC2)c3cccc(Cl)c3)CN(C1)C(=O)C4CCC4","service":"breaking-good-api","timestamp":"2025-04-26 12:17:59"}
{"level":"info","message":"Attempting 3D structure generation for: C1CC(C(=O)NCCN2CCN(CC2)c3cccc(Cl)c3)CN(C1)C(=O)C4CCC4","service":"breaking-good-api","timestamp":"2025-04-26 12:18:00"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): C1CC(C(=O)NCCN2CCN(CC2)c3cccc(Cl)c3)CN(C1)C(=O)C4CCC4","service":"breaking-good-api","timestamp":"2025-04-26 12:18:00"}
{"level":"info","message":"Validating SMILES: COc1cc(OC)c(cc1NC(=O)C2CCN(CC2)Cc3c(OC)cc4c(c3)OCO4)C(=O)N5CCCN(C)CC5","service":"breaking-good-api","timestamp":"2025-04-26 12:18:00"}
{"level":"info","message":"Attempting 3D structure generation for: COc1cc(OC)c(cc1NC(=O)C2CCN(CC2)Cc3c(OC)cc4c(c3)OCO4)C(=O)N5CCCN(C)CC5","service":"breaking-good-api","timestamp":"2025-04-26 12:18:01"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1cc(OC)c(cc1NC(=O)C2CCN(CC2)Cc3c(OC)cc4c(c3)OCO4)C(=O)N5CCCN(C)CC5","service":"breaking-good-api","timestamp":"2025-04-26 12:18:01"}
{"level":"info","message":"Validating SMILES: C1CN(CCN1CCCOc2ccc(F)cc2F)C(=O)c3cncc(c3)C#Cc4cccnc4N","service":"breaking-good-api","timestamp":"2025-04-26 12:18:01"}
{"level":"info","message":"Attempting 3D structure generation for: C1CN(CCN1CCCOc2ccc(F)cc2F)C(=O)c3cncc(c3)C#Cc4cccnc4N","service":"breaking-good-api","timestamp":"2025-04-26 12:18:02"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): C1CN(CCN1CCCOc2ccc(F)cc2F)C(=O)c3cncc(c3)C#Cc4cccnc4N","service":"breaking-good-api","timestamp":"2025-04-26 12:18:02"}
{"level":"info","message":"Validated 3 molecules (Props & 3D) out of 3 candidates.","service":"breaking-good-api","timestamp":"2025-04-26 12:18:02"}
{"level":"info","message":"Successfully extracted and validated 3 molecules","service":"breaking-good-api","timestamp":"2025-04-26 12:18:02"}
{"level":"info","message":"Saving results to file for request 67ee80bf-579e-4b8a-bf54-2f3e1e91bf0f","service":"breaking-good-api","timestamp":"2025-04-26 12:18:02"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-26 12:18:02"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-26 12:18:02"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 12:22:38"}
{"level":"info","message":"Comparing molecules - SMILES1: C1CC(C(=O)NCCN2CCN(CC2)c3cccc(Cl)c3)CN(C1)C(=O)C4CCC4, SMILES2: COc1cc(OC)c(cc1NC(=O)C2CCN(CC2)Cc3c(OC)cc4c(c3)OCO4)C(=O)N5CCCN(C)CC5, Method: tanimoto","service":"breaking-good-api","timestamp":"2025-04-26 12:23:46"}
{"0":"D","1":"e","10":"p","100":":","1000":"c","1001":"3","1002":")","1003":"O","1004":"C","1005":"O","1006":"4","1007":")","1008":"C","1009":"(","101":" ","1010":"=","1011":"O","1012":")","1013":"N","1014":"5","1015":"C","1016":"C","1017":"C","1018":"N","1019":"(","102":"C","1020":"C","1021":")","1022":"C","1023":"C","1024":"5","1025":"\"","1026":",","1027":" ","1028":"\"","1029":"p","103":"O","1030":"r","1031":"o","1032":"p","1033":"e","1034":"r","1035":"t","1036":"i","1037":"e","1038":"s","1039":"\"","104":"c","1040":":","1041":" ","1042":"{","1043":"\"","1044":"m","1045":"o","1046":"l","1047":"e","1048":"c","1049":"u","105":"1","1050":"l","1051":"a","1052":"r","1053":"_","1054":"w","1055":"e","1056":"i","1057":"g","1058":"h","1059":"t","106":"c","1060":"\"","1061":":","1062":" ","1063":"5","1064":"6","1065":"8","1066":".","1067":"6","1068":"7","1069":"1","107":"c","1070":"0","1071":"0","1072":"0","1073":"0","1074":"0","1075":"0","1076":"0","1077":"0","1078":"1","1079":"9","108":"(","1080":",","1081":" ","1082":"\"","1083":"l","1084":"o","1085":"g","1086":"p","1087":"\"","1088":":","1089":" ","109":"O","1090":"3","1091":".","1092":"0","1093":"6","1094":"9","1095":"5","1096":"0","1097":"0","1098":"0","1099":"0","11":"a","110":"C","1100":"0","1101":"0","1102":"0","1103":"0","1104":"0","1105":"0","1106":"1","1107":"4","1108":",","1109":" ","111":")","1110":"\"","1111":"n","1112":"u","1113":"m","1114":"_","1115":"h","1116":"_","1117":"d","1118":"o","1119":"n","112":"c","1120":"o","1121":"r","1122":"s","1123":"\"","1124":":","1125":" ","1126":"1","1127":",","1128":" ","1129":"\"","113":"(","1130":"n","1131":"u","1132":"m","1133":"_","1134":"h","1135":"_","1136":"a","1137":"c","1138":"c","1139":"e","114":"c","1140":"p","1141":"t","1142":"o","1143":"r","1144":"s","1145":"\"","1146":":","1147":" ","1148":"9","1149":",","115":"c","1150":" ","1151":"\"","1152":"n","1153":"u","1154":"m","1155":"_","1156":"r","1157":"o","1158":"t","1159":"a","116":"1","1160":"t","1161":"a","1162":"b","1163":"l","1164":"e","1165":"_","1166":"b","1167":"o","1168":"n","1169":"d","117":"N","1170":"s","1171":"\"","1172":":","1173":" ","1174":"1","1175":"2","1176":",","1177":" ","1178":"\"","1179":"n","118":"C","1180":"u","1181":"m","1182":"_","1183":"r","1184":"i","1185":"n","1186":"g","1187":"s","1188":"\"","1189":":","119":"(","1190":" ","1191":"5","1192":",","1193":" ","1194":"\"","1195":"t","1196":"p","1197":"s","1198":"a","1199":"\"","12":"r","120":"=","1200":":","1201":" ","1202":"1","1203":"0","1204":"2","1205":".","1206":"0","1207":"3","1208":"9","1209":"9","121":"O","1210":"9","1211":"9","1212":"9","1213":"9","1214":"9","1215":"9","1216":"9","1217":"9","1218":"9","1219":"9","122":")","1220":",","1221":" ","1222":"\"","1223":"q","1224":"e","1225":"d","1226":"\"","1227":":","1228":" ","1229":"0","123":"C","1230":".","1231":"5","1232":"1","1233":"4","1234":"8","1235":"7","1236":"5","1237":"5","1238":"2","1239":"3","124":"2","1240":"1","1241":"7","1242":"5","1243":"7","1244":"3","1245":"1","1246":"2","1247":",","1248":" ","1249":"\"","125":"C","1250":"f","1251":"o","1252":"r","1253":"m","1254":"u","1255":"l","1256":"a","1257":"\"","1258":":","1259":" ","126":"C","1260":"\"","1261":"C","1262":"3","1263":"0","1264":"H","1265":"4","1266":"0","1267":"N","1268":"4","1269":"O","127":"N","1270":"7","1271":"\"","1272":",","1273":" ","1274":"\"","1275":"l","1276":"i","1277":"p","1278":"i","1279":"n","128":"(","1280":"s","1281":"k","1282":"i","1283":"_","1284":"v","1285":"i","1286":"o","1287":"l","1288":"a","1289":"t","129":"C","1290":"i","1291":"o","1292":"n","1293":"s","1294":"\"","1295":":","1296":" ","1297":"1","1298":"}","1299":"}","13":"i","130":"C","1300":",","1301":" ","1302":"\"","1303":"m","1304":"c","1305":"s","1306":"\"","1307":":","1308":" ","1309":"{","131":"2","1310":"\"","1311":"s","1312":"m","1313":"a","1314":"r","1315":"t","1316":"s","1317":"\"","1318":":","1319":" ","132":")","1320":"\"","1321":"[","1322":"#","1323":"6","1324":"]","1325":"(","1326":"-","1327":",","1328":":","1329":"[","133":"C","1330":"#","1331":"6","1332":"]","1333":"-","1334":",","1335":":","1336":"[","1337":"#","1338":"6","1339":"]","134":"c","1340":"(","1341":"-","1342":"[","1343":"#","1344":"6","1345":"]","1346":"(","1347":"=","1348":"[","1349":"#","135":"3","1350":"8","1351":"]","1352":")","1353":"-","1354":"[","1355":"#","1356":"7","1357":"]","1358":"-","1359":"[","136":"c","1360":"#","1361":"6","1362":"]","1363":"-","1364":"[","1365":"#","1366":"6","1367":"]","1368":"-","1369":"[","137":"(","1370":"#","1371":"7","1372":"]","1373":"(","1374":"-","1375":"[","1376":"#","1377":"6","1378":"]","1379":"-","138":"O","1380":"[","1381":"#","1382":"6","1383":"]","1384":")","1385":"-","1386":"[","1387":"#","1388":"6","1389":"]","139":"C","1390":")","1391":"-","1392":",","1393":":","1394":"[","1395":"#","1396":"6","1397":"]","1398":")","1399":"-","14":"n","140":")","1400":",","1401":":","1402":"[","1403":"#","1404":"6","1405":"]","1406":"\"","1407":",","1408":" ","1409":"\"","141":"c","1410":"n","1411":"u","1412":"m","1413":"_","1414":"a","1415":"t","1416":"o","1417":"m","1418":"s","1419":"\"","142":"c","1420":":","1421":" ","1422":"1","1423":"4","1424":",","1425":" ","1426":"\"","1427":"n","1428":"u","1429":"m","143":"4","1430":"_","1431":"b","1432":"o","1433":"n","1434":"d","1435":"s","1436":"\"","1437":":","1438":" ","1439":"1","144":"c","1440":"3","1441":"}","1442":"}","1443":"\n","145":"(","146":"c","147":"3","148":")","149":"O","15":"g","150":"C","151":"O","152":"4","153":")","154":"C","155":"(","156":"=","157":"O","158":")","159":"N","16":" ","160":"5","161":"C","162":"C","163":"C","164":"N","165":"(","166":"C","167":")","168":"C","169":"C","17":"m","170":"5","171":",","172":" ","173":"M","174":"e","175":"t","176":"h","177":"o","178":"d","179":":","18":"o","180":" ","181":"t","182":"a","183":"n","184":"i","185":"m","186":"o","187":"t","188":"o","189":"\n","19":"l","190":"D","191":"e","192":"b","193":"u","194":"g","195":":","196":" ","197":"S","198":"u","199":"c","2":"b","20":"e","200":"c","201":"e","202":"s","203":"s","204":"f","205":"u","206":"l","207":"l","208":"y","209":" ","21":"c","210":"p","211":"a","212":"r","213":"s","214":"e","215":"d","216":" ","217":"b","218":"o","219":"t","22":"u","220":"h","221":" ","222":"m","223":"o","224":"l","225":"e","226":"c","227":"u","228":"l","229":"e","23":"l","230":"s","231":"\n","232":"D","233":"e","234":"b","235":"u","236":"g","237":":","238":" ","239":"G","24":"e","240":"e","241":"n","242":"e","243":"r","244":"a","245":"t","246":"e","247":"d","248":" ","249":"f","25":"s","250":"i","251":"n","252":"g","253":"e","254":"r","255":"p","256":"r","257":"i","258":"n","259":"t","26":" ","260":"s","261":" ","262":"-","263":" ","264":"F","265":"P","266":"1","267":" ","268":"b","269":"i","27":"-","270":"t","271":"s","272":":","273":" ","274":"5","275":"2","276":",","277":" ","278":"F","279":"P","28":" ","280":"2","281":" ","282":"b","283":"i","284":"t","285":"s","286":":","287":" ","288":"6","289":"2","29":"S","290":"\n","291":"D","292":"e","293":"b","294":"u","295":"g","296":":","297":" ","298":"C","299":"a","3":"u","30":"M","300":"l","301":"c","302":"u","303":"l","304":"a","305":"t","306":"e","307":"d","308":" ","309":"s","31":"I","310":"i","311":"m","312":"i","313":"l","314":"a","315":"r","316":"i","317":"t","318":"y","319":" ","32":"L","320":"u","321":"s","322":"i","323":"n","324":"g","325":" ","326":"t","327":"a","328":"n","329":"i","33":"E","330":"m","331":"o","332":"t","333":"o","334":":","335":" ","336":"0","337":".","338":"2","339":"1","34":"S","340":"2","341":"7","342":"6","343":"5","344":"9","345":"5","346":"7","347":"4","348":"4","349":"6","35":"1","350":"8","351":"0","352":"8","353":"5","354":"\n","355":"D","356":"e","357":"b","358":"u","359":"g","36":":","360":":","361":" ","362":"C","363":"a","364":"l","365":"c","366":"u","367":"l","368":"a","369":"t","37":" ","370":"e","371":"d","372":" ","373":"p","374":"r","375":"o","376":"p","377":"e","378":"r","379":"t","38":"C","380":"i","381":"e","382":"s","383":" ","384":"f","385":"o","386":"r","387":" ","388":"b","389":"o","39":"1","390":"t","391":"h","392":" ","393":"m","394":"o","395":"l","396":"e","397":"c","398":"u","399":"l","4":"g","40":"C","400":"e","401":"s","402":"\n","403":"D","404":"e","405":"b","406":"u","407":"g","408":":","409":" ","41":"C","410":"F","411":"o","412":"u","413":"n","414":"d","415":" ","416":"M","417":"C","418":"S","419":" ","42":"(","420":"-","421":" ","422":"A","423":"t","424":"o","425":"m","426":"s","427":":","428":" ","429":"1","43":"C","430":"4","431":",","432":" ","433":"B","434":"o","435":"n","436":"d","437":"s","438":":","439":" ","44":"(","440":"1","441":"3","442":"\n","443":"D","444":"e","445":"b","446":"u","447":"g","448":":","449":" ","45":"=","450":"R","451":"e","452":"t","453":"u","454":"r","455":"n","456":"i","457":"n","458":"g","459":" ","46":"O","460":"r","461":"e","462":"s","463":"u","464":"l","465":"t","466":" ","467":"w","468":"i","469":"t","47":")","470":"h","471":" ","472":"s","473":"i","474":"m","475":"i","476":"l","477":"a","478":"r","479":"i","48":"N","480":"t","481":"y","482":" ","483":"s","484":"c","485":"o","486":"r","487":"e","488":":","489":" ","49":"C","490":"0","491":".","492":"2","493":"1","494":"2","495":"7","496":"6","497":"5","498":"9","499":"5","5":":","50":"C","500":"7","501":"4","502":"4","503":"6","504":"8","505":"0","506":"8","507":"5","508":"\n","509":"{","51":"N","510":"\"","511":"s","512":"i","513":"m","514":"i","515":"l","516":"a","517":"r","518":"i","519":"t","52":"2","520":"y","521":"\"","522":":","523":" ","524":"{","525":"\"","526":"m","527":"e","528":"t","529":"h","53":"C","530":"o","531":"d","532":"\"","533":":","534":" ","535":"\"","536":"t","537":"a","538":"n","539":"i","54":"C","540":"m","541":"o","542":"t","543":"o","544":"\"","545":",","546":" ","547":"\"","548":"s","549":"c","55":"N","550":"o","551":"r","552":"e","553":"\"","554":":","555":" ","556":"0","557":".","558":"2","559":"1","56":"(","560":"2","561":"7","562":"6","563":"5","564":"9","565":"5","566":"7","567":"4","568":"4","569":"6","57":"C","570":"8","571":"0","572":"8","573":"5","574":"}","575":",","576":" ","577":"\"","578":"m","579":"o","58":"C","580":"l","581":"e","582":"c","583":"u","584":"l","585":"e","586":"1","587":"\"","588":":","589":" ","59":"2","590":"{","591":"\"","592":"s","593":"m","594":"i","595":"l","596":"e","597":"s","598":"\"","599":":","6":" ","60":")","600":" ","601":"\"","602":"C","603":"1","604":"C","605":"C","606":"(","607":"C","608":"(","609":"=","61":"c","610":"O","611":")","612":"N","613":"C","614":"C","615":"N","616":"2","617":"C","618":"C","619":"N","62":"3","620":"(","621":"C","622":"C","623":"2","624":")","625":"c","626":"3","627":"c","628":"c","629":"c","63":"c","630":"c","631":"(","632":"C","633":"l","634":")","635":"c","636":"3","637":")","638":"C","639":"N","64":"c","640":"(","641":"C","642":"1","643":")","644":"C","645":"(","646":"=","647":"O","648":")","649":"C","65":"c","650":"4","651":"C","652":"C","653":"C","654":"4","655":"\"","656":",","657":" ","658":"\"","659":"p","66":"c","660":"r","661":"o","662":"p","663":"e","664":"r","665":"t","666":"i","667":"e","668":"s","669":"\"","67":"(","670":":","671":" ","672":"{","673":"\"","674":"m","675":"o","676":"l","677":"e","678":"c","679":"u","68":"C","680":"l","681":"a","682":"r","683":"_","684":"w","685":"e","686":"i","687":"g","688":"h","689":"t","69":"l","690":"\"","691":":","692":" ","693":"4","694":"3","695":"2","696":".","697":"9","698":"9","699":"5","7":"C","70":")","700":"9","701":"9","702":"9","703":"9","704":"9","705":"9","706":"9","707":"9","708":"9","709":"6","71":"c","710":",","711":" ","712":"\"","713":"l","714":"o","715":"g","716":"p","717":"\"","718":":","719":" ","72":"3","720":"2","721":".","722":"6","723":"1","724":"6","725":"9","726":"0","727":"0","728":"0","729":"0","73":")","730":"0","731":"0","732":"0","733":"0","734":"0","735":"0","736":"1","737":",","738":" ","739":"\"","74":"C","740":"n","741":"u","742":"m","743":"_","744":"h","745":"_","746":"d","747":"o","748":"n","749":"o","75":"N","750":"r","751":"s","752":"\"","753":":","754":" ","755":"1","756":",","757":" ","758":"\"","759":"n","76":"(","760":"u","761":"m","762":"_","763":"h","764":"_","765":"a","766":"c","767":"c","768":"e","769":"p","77":"C","770":"t","771":"o","772":"r","773":"s","774":"\"","775":":","776":" ","777":"4","778":",","779":" ","78":"1","780":"\"","781":"n","782":"u","783":"m","784":"_","785":"r","786":"o","787":"t","788":"a","789":"t","79":")","790":"a","791":"b","792":"l","793":"e","794":"_","795":"b","796":"o","797":"n","798":"d","799":"s","8":"o","80":"C","800":"\"","801":":","802":" ","803":"6","804":",","805":" ","806":"\"","807":"n","808":"u","809":"m","81":"(","810":"_","811":"r","812":"i","813":"n","814":"g","815":"s","816":"\"","817":":","818":" ","819":"4","82":"=","820":",","821":" ","822":"\"","823":"t","824":"p","825":"s","826":"a","827":"\"","828":":","829":" ","83":"O","830":"5","831":"5","832":".","833":"8","834":"9","835":"0","836":"0","837":"0","838":"0","839":"0","84":")","840":"0","841":"0","842":"0","843":"0","844":"0","845":"0","846":"1","847":",","848":" ","849":"\"","85":"C","850":"q","851":"e","852":"d","853":"\"","854":":","855":" ","856":"0","857":".","858":"7","859":"5","86":"4","860":"0","861":"3","862":"2","863":"0","864":"7","865":"9","866":"2","867":"3","868":"3","869":"2","87":"C","870":"5","871":"8","872":"0","873":"2","874":",","875":" ","876":"\"","877":"f","878":"o","879":"r","88":"C","880":"m","881":"u","882":"l","883":"a","884":"\"","885":":","886":" ","887":"\"","888":"C","889":"2","89":"C","890":"3","891":"H","892":"3","893":"3","894":"C","895":"l","896":"N","897":"4","898":"O","899":"2","9":"m","90":"4","900":"\"","901":",","902":" ","903":"\"","904":"l","905":"i","906":"p","907":"i","908":"n","909":"s","91":",","910":"k","911":"i","912":"_","913":"v","914":"i","915":"o","916":"l","917":"a","918":"t","919":"i","92":" ","920":"o","921":"n","922":"s","923":"\"","924":":","925":" ","926":"0","927":"}","928":"}","929":",","93":"S","930":" ","931":"\"","932":"m","933":"o","934":"l","935":"e","936":"c","937":"u","938":"l","939":"e","94":"M","940":"2","941":"\"","942":":","943":" ","944":"{","945":"\"","946":"s","947":"m","948":"i","949":"l","95":"I","950":"e","951":"s","952":"\"","953":":","954":" ","955":"\"","956":"C","957":"O","958":"c","959":"1","96":"L","960":"c","961":"c","962":"(","963":"O","964":"C","965":")","966":"c","967":"(","968":"c","969":"c","97":"E","970":"1","971":"N","972":"C","973":"(","974":"=","975":"O","976":")","977":"C","978":"2","979":"C","98":"S","980":"C","981":"N","982":"(","983":"C","984":"C","985":"2","986":")","987":"C","988":"c","989":"3","99":"2","990":"c","991":"(","992":"O","993":"C","994":")","995":"c","996":"c","997":"4","998":"c","999":"(","level":"error","message":"Invalid similarity score in comparison result:","service":"breaking-good-api","timestamp":"2025-04-26 12:23:47"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 12:25:27"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 12:27:26"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 12:29:10"}
{"level":"info","message":"Received molecule generation request with requirements: help me with depression ","service":"breaking-good-api","timestamp":"2025-04-26 12:31:53"}
{"level":"info","message":"Created request ID: 4055c269-6e08-44f4-a26d-e16f29f2c4a7","service":"breaking-good-api","timestamp":"2025-04-26 12:31:53"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-26 12:31:53"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-26 12:31:53"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-26 12:31:53"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-26 12:31:53"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-26 12:31:53"}
{"level":"info","message":"User prompt length: 649 characters","service":"breaking-good-api","timestamp":"2025-04-26 12:31:53"}
{"level":"info","message":"Claude API response received: msg_01QpyGjzmn1HqmW1azvx25mv","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Received Claude response with ID: msg_01QpyGjzmn1HqmW1azvx25mv","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Using string content directly, length: 7340","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Extracted 7340 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Found 4 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Validating SMILES: Clc1ccc(cc1Cl)C2=CCN(CC2)CCCN(C)C","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Attempting 3D structure generation for: Clc1ccc(cc1Cl)C2=CCN(CC2)CCCN(C)C","service":"breaking-good-api","timestamp":"2025-04-26 12:32:30"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): Clc1ccc(cc1Cl)C2=CCN(CC2)CCCN(C)C","service":"breaking-good-api","timestamp":"2025-04-26 12:32:31"}
{"level":"info","message":"Validating SMILES: R)-4-(2-(4-fluorophenyl)-4-methyl-5-oxo-4,5-dihydro-1H-imidazol-1-yl)-N-(3-(pyridin-3-yl)phenyl)butanamide","service":"breaking-good-api","timestamp":"2025-04-26 12:32:31"}
{"level":"info","message":"Attempting 3D structure generation for: R)-4-(2-(4-fluorophenyl)-4-methyl-5-oxo-4,5-dihydro-1H-imidazol-1-yl)-N-(3-(pyridin-3-yl)phenyl)butanamide","service":"breaking-good-api","timestamp":"2025-04-26 12:32:31"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: R)-4-(2-(4-fluorophenyl)-4-methyl-5-oxo-4,5-dihydro-1H-imidazol-1-yl)-N-(3-(pyridin-3-yl)phenyl)butanamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 12:32:31"}
{"level":"info","message":"Added molecule with properties but without 3D structure: R)-4-(2-(4-fluorophenyl)-4-methyl-5-oxo-4,5-dihydro-1H-imidazol-1-yl)-N-(3-(pyridin-3-yl)phenyl)butanamide","service":"breaking-good-api","timestamp":"2025-04-26 12:32:31"}
{"level":"info","message":"Validating SMILES: Fc1ccc(cc1)C2=NC(=O)C(C)(N2CCCC(=O)Nc3cccc(c3)c4cccnc4)C","service":"breaking-good-api","timestamp":"2025-04-26 12:32:31"}
{"level":"info","message":"Attempting 3D structure generation for: Fc1ccc(cc1)C2=NC(=O)C(C)(N2CCCC(=O)Nc3cccc(c3)c4cccnc4)C","service":"breaking-good-api","timestamp":"2025-04-26 12:32:32"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): Fc1ccc(cc1)C2=NC(=O)C(C)(N2CCCC(=O)Nc3cccc(c3)c4cccnc4)C","service":"breaking-good-api","timestamp":"2025-04-26 12:32:32"}
{"level":"info","message":"Validating SMILES: Oc1ccc(cc1O)C2=CC(=O)c3ccc(NCCN)cc3O2","service":"breaking-good-api","timestamp":"2025-04-26 12:32:32"}
{"level":"info","message":"Attempting 3D structure generation for: Oc1ccc(cc1O)C2=CC(=O)c3ccc(NCCN)cc3O2","service":"breaking-good-api","timestamp":"2025-04-26 12:32:33"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): Oc1ccc(cc1O)C2=CC(=O)c3ccc(NCCN)cc3O2","service":"breaking-good-api","timestamp":"2025-04-26 12:32:33"}
{"level":"info","message":"Validated 4 molecules (Props & 3D) out of 4 candidates.","service":"breaking-good-api","timestamp":"2025-04-26 12:32:33"}
{"level":"info","message":"Successfully extracted and validated 4 molecules","service":"breaking-good-api","timestamp":"2025-04-26 12:32:33"}
{"level":"info","message":"Saving results to file for request 4055c269-6e08-44f4-a26d-e16f29f2c4a7","service":"breaking-good-api","timestamp":"2025-04-26 12:32:33"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-26 12:32:33"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-26 12:32:33"}
{"level":"info","message":"Received molecule generation request with requirements: help with depression","service":"breaking-good-api","timestamp":"2025-04-26 12:33:50"}
{"level":"info","message":"Created request ID: ac78feba-1c32-43c8-910a-eb1641905fbc","service":"breaking-good-api","timestamp":"2025-04-26 12:33:50"}
{"level":"info","message":"API Key Status: Key is set","service":"breaking-good-api","timestamp":"2025-04-26 12:33:50"}
{"level":"info","message":"API endpoint URL: https://api.anthropic.com/v1/messages","service":"breaking-good-api","timestamp":"2025-04-26 12:33:50"}
{"level":"info","message":"Sending request to Claude API","service":"breaking-good-api","timestamp":"2025-04-26 12:33:50"}
{"level":"info","message":"Sending request to Claude API with model: claude-3-7-sonnet-20250219","service":"breaking-good-api","timestamp":"2025-04-26 12:33:50"}
{"level":"info","message":"System prompt length: 1130 characters","service":"breaking-good-api","timestamp":"2025-04-26 12:33:50"}
{"level":"info","message":"User prompt length: 645 characters","service":"breaking-good-api","timestamp":"2025-04-26 12:33:50"}
{"level":"info","message":"Claude API response received: msg_01HgX5PEHY4UrFCnRuyFgc3p","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Response content type: object","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Content is array with 1 items","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Received Claude response with ID: msg_01HgX5PEHY4UrFCnRuyFgc3p","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Processing Claude response to extract molecules","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Processing Claude response for molecule design","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Using string content directly, length: 8552","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Extracted 8552 characters of text from Claude response","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Found 5 SMILES candidates via regex.","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Validating SMILES: COc1ccc2[nH]cc(CCN3CCN(c4cccc(F)c4)CC3)c2c1","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Attempting 3D structure generation for: COc1ccc2[nH]cc(CCN3CCN(c4cccc(F)c4)CC3)c2c1","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COc1ccc2[nH]cc(CCN3CCN(c4cccc(F)c4)CC3)c2c1","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Validating SMILES: COCCNC(=O)C1(c2ccc(Cl)cc2)CCC(NCCc2ccccc2)CC1","service":"breaking-good-api","timestamp":"2025-04-26 12:34:37"}
{"level":"info","message":"Attempting 3D structure generation for: COCCNC(=O)C1(c2ccc(Cl)cc2)CCC(NCCc2ccccc2)CC1","service":"breaking-good-api","timestamp":"2025-04-26 12:34:38"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): COCCNC(=O)C1(c2ccc(Cl)cc2)CCC(NCCc2ccccc2)CC1","service":"breaking-good-api","timestamp":"2025-04-26 12:34:38"}
{"level":"info","message":"Validating SMILES: 1-(4-chlorophenyl)-4-(phenethylamino)cyclohexanecarboxamide-N-(2-methoxyethyl","service":"breaking-good-api","timestamp":"2025-04-26 12:34:38"}
{"level":"info","message":"Attempting 3D structure generation for: 1-(4-chlorophenyl)-4-(phenethylamino)cyclohexanecarboxamide-N-(2-methoxyethyl","service":"breaking-good-api","timestamp":"2025-04-26 12:34:39"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 1-(4-chlorophenyl)-4-(phenethylamino)cyclohexanecarboxamide-N-(2-methoxyethyl - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 12:34:39"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 1-(4-chlorophenyl)-4-(phenethylamino)cyclohexanecarboxamide-N-(2-methoxyethyl","service":"breaking-good-api","timestamp":"2025-04-26 12:34:39"}
{"level":"info","message":"Validating SMILES: Cc1ccc(C(=O)NCCN2CCC(c3cccc(F)c3)(CC(=O)N)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-26 12:34:39"}
{"level":"info","message":"Attempting 3D structure generation for: Cc1ccc(C(=O)NCCN2CCC(c3cccc(F)c3)(CC(=O)N)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-26 12:34:39"}
{"level":"info","message":"Successfully validated SMILES (Props & 3D): Cc1ccc(C(=O)NCCN2CCC(c3cccc(F)c3)(CC(=O)N)CC2)cc1","service":"breaking-good-api","timestamp":"2025-04-26 12:34:40"}
{"level":"info","message":"Validating SMILES: 4-methyl-N-(2-(4-(3-fluorophenyl)-4-(carbamoylmethyl)piperidin-1-yl)ethyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-26 12:34:40"}
{"level":"info","message":"Attempting 3D structure generation for: 4-methyl-N-(2-(4-(3-fluorophenyl)-4-(carbamoylmethyl)piperidin-1-yl)ethyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-26 12:34:40"}
{"level":"warn","message":"Failed 3D structure generation for valid SMILES: 4-methyl-N-(2-(4-(3-fluorophenyl)-4-(carbamoylmethyl)piperidin-1-yl)ethyl)benzamide - Unknown structure error","service":"breaking-good-api","timestamp":"2025-04-26 12:34:40"}
{"level":"info","message":"Added molecule with properties but without 3D structure: 4-methyl-N-(2-(4-(3-fluorophenyl)-4-(carbamoylmethyl)piperidin-1-yl)ethyl)benzamide","service":"breaking-good-api","timestamp":"2025-04-26 12:34:40"}
{"level":"info","message":"Validated 5 molecules (Props & 3D) out of 5 candidates.","service":"breaking-good-api","timestamp":"2025-04-26 12:34:40"}
{"level":"info","message":"Successfully extracted and validated 5 molecules","service":"breaking-good-api","timestamp":"2025-04-26 12:34:40"}
{"level":"info","message":"Saving results to file for request ac78feba-1c32-43c8-910a-eb1641905fbc","service":"breaking-good-api","timestamp":"2025-04-26 12:34:40"}
{"level":"info","message":"Enhancing molecules with ADMET predictions...","service":"breaking-good-api","timestamp":"2025-04-26 12:34:40"}
{"level":"info","message":"Finished enhancing molecules.","service":"breaking-good-api","timestamp":"2025-04-26 12:34:41"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262512362D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-26 12:36:41"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 12:36:41"}
{"0":"\n  -INDIGO-04262512362D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 12:36:41"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262512362D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","service":"breaking-good-api","timestamp":"2025-04-26 12:36:55"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 12:36:55"}
{"0":"\n  -INDIGO-04262512362D\n\n  0  0  0  0  0  0  0  0  0  0999 V2000\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 12:36:55"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: C1CC(C(=O)NCCN2CCN(CC2)c3cccc(Cl)c3)CN(C1)C(=O)C4CCC4","service":"breaking-good-api","timestamp":"2025-04-26 12:36:55"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 12:36:55"}
{"0":"C1CC(C(=O)NCCN2CCN(CC2)c3cccc(Cl)c3)CN(C1)C(=O)C4CCC4","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 12:36:55"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262512362D\n\n 30 33  0  0  0  0  0  0  0  0999 V2000\n   14.6750   -1.5125    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.1750   -2.3785    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-26 12:36:55"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 12:36:55"}
{"0":"\n  -INDIGO-04262512362D\n\n 30 33  0  0  0  0  0  0  0  0999 V2000\n   14.6750   -1.5125    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.1750   -2.3785    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.1750   -2.3785    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6750   -3.2446    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.1750   -4.1106    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6750   -3.2446    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   11.1750   -4.1106    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1750   -4.1106    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.6750   -4.9767    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6750   -4.9767    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.1750   -5.8427    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6750   -6.7087    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.6750   -6.7087    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.1750   -5.8427    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.1750   -7.5747    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.1750   -7.5747    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.6750   -8.4407    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.1750   -9.3067    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.1750   -9.3067    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.6750  -10.1728    0.0000 Cl  0  0  0  0  0  0  0  0  0  0  0  0\n    8.6750   -8.4407    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6750   -1.5125    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.1750   -0.6465    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   14.1750   -0.6465    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.6750    0.2196    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.6750    0.2196    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   13.1750    1.0856    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.1409    1.3444    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.8821    2.3103    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.9162    2.0515    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  4  6  1  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  1  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  1  0  0  0  0\n 13 14  1  0  0  0  0\n 12 15  1  0  0  0  0\n 15 16  2  0  0  0  0\n 16 17  1  0  0  0  0\n 17 18  2  0  0  0  0\n 18 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 19 21  2  0  0  0  0\n  3 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  1  0  0  0  0\n 23 25  1  0  0  0  0\n 25 26  2  0  0  0  0\n 25 27  1  0  0  0  0\n 27 28  1  0  0  0  0\n 28 29  1  0  0  0  0\n 29 30  1  0  0  0  0\n 24  1  1  0  0  0  0\n 14  9  1  0  0  0  0\n 21 15  1  0  0  0  0\n 30 27  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 12:36:55"}
{"level":"debug","message":"Received /convert request. Format: smiles -> mol. Preview: O=C(NCCN1CCN(c2cccc(Cl)c2)CC1)C1CCCN(C(=O)C2CCC2)C1","service":"breaking-good-api","timestamp":"2025-04-26 12:36:58"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 12:36:58"}
{"0":"O=C(NCCN1CCN(c2cccc(Cl)c2)CC1)C1CCCN(C(=O)C2CCC2)C1","1":"smiles","2":"mol","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 12:36:58"}
{"level":"debug","message":"Received /convert request. Format: mol -> smiles. Preview: \n  -INDIGO-04262512362D\n\n 30 33  0  0  0  0  0  0  0  0999 V2000\n    9.4688   -8.5207    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4688   -8.5207    0.0000 C   0  0  0  0  0  0  0  0  0  0  ...","service":"breaking-good-api","timestamp":"2025-04-26 12:36:58"}
{"level":"info","message":"Running format converter script...","service":"breaking-good-api","timestamp":"2025-04-26 12:36:58"}
{"0":"\n  -INDIGO-04262512362D\n\n 30 33  0  0  0  0  0  0  0  0999 V2000\n    9.4688   -8.5207    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4688   -8.5207    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9688   -7.6547    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4688   -6.7887    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9688   -5.9227    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4688   -5.0566    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9688   -4.1906    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4688   -3.3246    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4688   -3.3246    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9688   -2.4585    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4688   -1.5925    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9688   -0.7265    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9688   -0.7265    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4688   -1.5925    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4688   -1.5925    0.0000 Cl  0  0  0  0  0  0  0  0  0  0  0  0\n    7.9688   -2.4585    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    8.9688   -4.1906    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.4688   -5.0566    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9688   -9.3867    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.4688  -10.2528    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.9688  -11.1188    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9688  -11.1188    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   12.4688  -10.2528    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n   13.4688  -10.2528    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.9688   -9.3867    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n   13.9688  -11.1188    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   13.7100  -12.0847    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.6759  -12.3435    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   14.9347  -11.3776    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   11.9688   -9.3867    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  2  0  0  0  0\n  2  3  1  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  1  0  0  0  0\n  5  6  1  0  0  0  0\n  6  7  1  0  0  0  0\n  7  8  1  0  0  0  0\n  8  9  1  0  0  0  0\n  9 10  1  0  0  0  0\n 10 11  2  0  0  0  0\n 11 12  1  0  0  0  0\n 12 13  2  0  0  0  0\n 13 14  1  0  0  0  0\n 14 15  1  0  0  0  0\n 14 16  2  0  0  0  0\n  9 17  1  0  0  0  0\n 17 18  1  0  0  0  0\n  2 19  1  0  0  0  0\n 19 20  1  0  0  0  0\n 20 21  1  0  0  0  0\n 21 22  1  0  0  0  0\n 22 23  1  0  0  0  0\n 23 24  1  0  0  0  0\n 24 25  2  0  0  0  0\n 24 26  1  0  0  0  0\n 26 27  1  0  0  0  0\n 27 28  1  0  0  0  0\n 28 29  1  0  0  0  0\n 23 30  1  0  0  0  0\n 18  6  1  0  0  0  0\n 30 19  1  0  0  0  0\n 16 10  1  0  0  0  0\n 29 26  1  0  0  0  0\nM  END\n","1":"mol","2":"smiles","level":"debug","message":"Script args:","service":"breaking-good-api","timestamp":"2025-04-26 12:36:58"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 12:39:36"}
{"level":"info","message":"Anthropic API Key status: Loaded","service":"breaking-good-api","timestamp":"2025-04-26 12:41:57"}
