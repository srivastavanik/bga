{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicks\\\\Downloads\\\\breakinggood\\\\frontend\\\\src\\\\components\\\\AIChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Paper, TextField, Button, List, ListItem, ListItemText, Typography, makeStyles, CircularProgress, Box, IconButton, Avatar } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport PersonIcon from '@material-ui/icons/Person';\nimport AssistantIcon from '@material-ui/icons/EmojiObjects'; // Using EmojiObjects for AI\nimport Alert from '@material-ui/lab/Alert';\nimport { claudeAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '500px',\n    // Or adjust as needed\n    border: `1px solid ${theme.palette.divider}`,\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: theme.palette.background.paper // Use theme paper background\n  },\n  messageList: {\n    flexGrow: 1,\n    overflowY: 'auto',\n    padding: theme.spacing(2)\n  },\n  messageInputContainer: {\n    display: 'flex',\n    padding: theme.spacing(1),\n    borderTop: `1px solid ${theme.palette.divider}`,\n    alignItems: 'center'\n  },\n  inputField: {\n    flexGrow: 1,\n    marginRight: theme.spacing(1)\n  },\n  userMessage: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginBottom: theme.spacing(1)\n  },\n  assistantMessage: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    marginBottom: theme.spacing(1)\n  },\n  messageBubble: {\n    padding: theme.spacing(1, 2),\n    borderRadius: theme.shape.borderRadius,\n    maxWidth: '80%',\n    wordWrap: 'break-word',\n    boxShadow: theme.shadows[1]\n  },\n  userBubble: {\n    backgroundColor: theme.palette.primary.main,\n    // Restore original primary color\n    color: theme.palette.primary.contrastText,\n    marginLeft: 'auto'\n  },\n  assistantBubble: {\n    backgroundColor: theme.palette.grey[200],\n    // Light grey for assistant\n    color: theme.palette.text.primary,\n    marginRight: 'auto',\n    border: `1px solid ${theme.palette.divider}`\n  },\n  errorBubble: {\n    backgroundColor: theme.palette.error.light,\n    color: theme.palette.error.contrastText,\n    marginRight: 'auto',\n    border: `1px solid ${theme.palette.error.main}`\n  },\n  avatar: {\n    marginRight: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.light,\n    // Use secondary light as before\n    color: theme.palette.secondary.contrastText,\n    width: 32,\n    height: 32\n  },\n  userAvatar: {\n    backgroundColor: theme.palette.primary.light,\n    // Use primary light for user as before\n    color: theme.palette.primary.contrastText\n  }\n}));\nconst AIChatInterface = ({\n  initialContext = 'General drug design',\n  onMoleculeMentioned = () => {},\n  selectedMolecule = null\n}) => {\n  _s();\n  const classes = useStyles();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [currentContext, setCurrentContext] = useState(initialContext);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Update context when initialContext or selectedMolecule changes\n  useEffect(() => {\n    let newContext = initialContext;\n    if (selectedMolecule) {\n      newContext = `Discussing ${selectedMolecule.name || 'selected molecule'} (SMILES: ${selectedMolecule.smiles || 'N/A'})`;\n    }\n    setCurrentContext(newContext);\n    // Add a context update message to the chat if it changed significantly\n    if (newContext !== currentContext && messages.length > 0) {\n      // Avoid adding on initial load\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'system',\n        // Use a system role for context messages\n        content: [{\n          type: 'text',\n          text: `Context updated: ${newContext}`\n        }],\n        isContextUpdate: true // Custom flag\n      }]);\n    }\n  }, [initialContext, selectedMolecule, currentContext, messages.length]); // Added dependencies\n\n  // Add initial assistant message based on the initial context\n  useEffect(() => {\n    setMessages([{\n      role: 'assistant',\n      content: [{\n        type: 'text',\n        text: `Hello! I'm here to help with drug design. Context: ${currentContext}`\n      }]\n    }]);\n    // Depend only on initialContext to set the *very first* message\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialContext]);\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSendMessage = async event => {\n    event.preventDefault();\n    const userMessageContent = input.trim();\n    if (!userMessageContent || isLoading) return;\n    const newUserMessage = {\n      role: 'user',\n      content: [{\n        type: 'text',\n        text: userMessageContent\n      }]\n    };\n    let updatedMessages = [...messages, newUserMessage]; // Start with user message\n\n    // Prepend current context implicitly for the API call *if* a molecule is selected\n    // This helps Claude remember what is being discussed without cluttering the visible chat too much\n    let apiMessages = [...messages, newUserMessage].map(msg => ({\n      role: msg.role,\n      content: msg.content\n    }));\n    if (selectedMolecule) {\n      const contextMessageForApi = {\n        role: 'user',\n        // Pretend user mentioned it for context\n        content: [{\n          type: 'text',\n          text: `[Current Focus: ${selectedMolecule.name}, SMILES: ${selectedMolecule.smiles}]`\n        }]\n      };\n      // Add context *before* the latest user message for better flow\n      apiMessages.splice(apiMessages.length - 1, 0, contextMessageForApi);\n    }\n    setMessages(updatedMessages); // Update UI immediately with user message\n    setInput('');\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Use the apiMessages which might include the implicit context\n      const response = await claudeAPI.continueChat(apiMessages, currentContext);\n      if (response.data && response.data.response) {\n        var _assistantMessage$con;\n        const assistantMessage = {\n          role: 'assistant',\n          // Ensure content is always in the expected array format\n          content: Array.isArray(response.data.response) ? response.data.response : [{\n            type: 'text',\n            text: response.data.response.text || ''\n          }]\n        };\n        setMessages(prevMessages => [...prevMessages, assistantMessage]);\n\n        // Check response for SMILES\n        const responseText = ((_assistantMessage$con = assistantMessage.content[0]) === null || _assistantMessage$con === void 0 ? void 0 : _assistantMessage$con.text) || '';\n        const smilesRegex = /\\b([A-Za-z0-9@+\\-\\[\\]\\(\\)\\\\\\/%=#$!.~{},*]+)\\b/g;\n        const potentialSmiles = responseText.match(smilesRegex);\n        if (potentialSmiles) {\n          potentialSmiles.forEach(smiles => {\n            if (smiles.length > 5 && smiles.includes('C') && (smiles.includes('(') || smiles.includes('='))) {\n              onMoleculeMentioned(smiles);\n            }\n          });\n        }\n      } else {\n        throw new Error('Invalid response format from API');\n      }\n    } catch (err) {\n      console.error('Error sending chat message:', err);\n      const errorText = err.message || 'Failed to get response from AI';\n      setError(errorText);\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: [{\n          type: 'text',\n          text: `Error: ${errorText}`\n        }],\n        isError: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    elevation: 1,\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      className: classes.messageList,\n      children: [messages.map((msg, index) =>\n      // Don't render system context update messages\n      !msg.isContextUpdate && /*#__PURE__*/_jsxDEV(ListItem, {\n        className: msg.role === 'user' ? classes.userMessage : classes.assistantMessage,\n        children: [msg.role === 'assistant' && /*#__PURE__*/_jsxDEV(Avatar, {\n          className: classes.avatar,\n          children: /*#__PURE__*/_jsxDEV(AssistantIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: `${classes.messageBubble} ${msg.role === 'user' ? classes.userBubble : msg.isError ? classes.errorBubble : classes.assistantBubble}`,\n          children: [\" \", Array.isArray(msg.content) ? msg.content.map((part, partIndex) => part.type === 'text' ? /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: part.text\n          }, partIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 44\n          }, this) : null) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: typeof msg.content === 'string' ? msg.content : 'Invalid message format'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this), msg.role === 'user' && /*#__PURE__*/_jsxDEV(Avatar, {\n          className: `${classes.avatar} ${classes.userAvatar}`,\n          children: /*#__PURE__*/_jsxDEV(PersonIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(ListItem, {\n        className: classes.assistantMessage,\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          className: classes.avatar,\n          children: /*#__PURE__*/_jsxDEV(AssistantIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: `${classes.messageBubble} ${classes.assistantBubble}`,\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          style: {\n            width: '100%'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      className: classes.messageInputContainer,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: classes.inputField,\n        variant: \"outlined\",\n        size: \"small\",\n        placeholder: \"Ask Claude about the molecule...\",\n        value: input,\n        onChange: handleInputChange,\n        disabled: isLoading,\n        multiline: true,\n        maxRows: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        type: \"submit\",\n        color: \"primary\",\n        disabled: isLoading || !input.trim(),\n        children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatInterface, \"HnoexjdkQ5Lu6b/azh6nIvwn88g=\", false, function () {\n  return [useStyles];\n});\n_c = AIChatInterface;\nexport default AIChatInterface;\nvar _c;\n$RefreshReg$(_c, \"AIChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Paper","TextField","Button","List","ListItem","ListItemText","Typography","makeStyles","CircularProgress","Box","IconButton","Avatar","SendIcon","PersonIcon","AssistantIcon","Alert","claudeAPI","jsxDEV","_jsxDEV","useStyles","theme","root","display","flexDirection","height","border","palette","divider","borderRadius","shape","backgroundColor","background","paper","messageList","flexGrow","overflowY","padding","spacing","messageInputContainer","borderTop","alignItems","inputField","marginRight","userMessage","justifyContent","marginBottom","assistantMessage","messageBubble","maxWidth","wordWrap","boxShadow","shadows","userBubble","primary","main","color","contrastText","marginLeft","assistantBubble","grey","text","errorBubble","error","light","avatar","secondary","width","userAvatar","AIChatInterface","initialContext","onMoleculeMentioned","selectedMolecule","_s","classes","messages","setMessages","input","setInput","isLoading","setIsLoading","setError","messagesEndRef","currentContext","setCurrentContext","_messagesEndRef$curre","current","scrollIntoView","behavior","newContext","name","smiles","length","prevMessages","role","content","type","isContextUpdate","handleInputChange","event","target","value","handleSendMessage","preventDefault","userMessageContent","trim","newUserMessage","updatedMessages","apiMessages","map","msg","contextMessageForApi","splice","response","continueChat","data","_assistantMessage$con","Array","isArray","responseText","smilesRegex","potentialSmiles","match","forEach","includes","Error","err","console","errorText","message","isError","className","elevation","children","index","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","part","partIndex","variant","size","severity","style","ref","onSubmit","placeholder","onChange","disabled","multiline","maxRows","_c","$RefreshReg$"],"sources":["C:/Users/nicks/Downloads/breakinggood/frontend/src/components/AIChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Box,\r\n  IconButton,\r\n  Avatar\r\n} from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport AssistantIcon from '@material-ui/icons/EmojiObjects'; // Using EmojiObjects for AI\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { claudeAPI } from '../services/api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '500px', // Or adjust as needed\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: theme.palette.background.paper, // Use theme paper background\r\n  },\r\n  messageList: {\r\n    flexGrow: 1,\r\n    overflowY: 'auto',\r\n    padding: theme.spacing(2),\r\n  },\r\n  messageInputContainer: {\r\n    display: 'flex',\r\n    padding: theme.spacing(1),\r\n    borderTop: `1px solid ${theme.palette.divider}`,\r\n    alignItems: 'center',\r\n  },\r\n  inputField: {\r\n    flexGrow: 1,\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  userMessage: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  assistantMessage: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-start',\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  messageBubble: {\r\n    padding: theme.spacing(1, 2),\r\n    borderRadius: theme.shape.borderRadius,\r\n    maxWidth: '80%',\r\n    wordWrap: 'break-word',\r\n    boxShadow: theme.shadows[1],\r\n  },\r\n  userBubble: {\r\n    backgroundColor: theme.palette.primary.main, // Restore original primary color\r\n    color: theme.palette.primary.contrastText,\r\n    marginLeft: 'auto',\r\n  },\r\n  assistantBubble: {\r\n    backgroundColor: theme.palette.grey[200], // Light grey for assistant\r\n    color: theme.palette.text.primary,\r\n    marginRight: 'auto',\r\n    border: `1px solid ${theme.palette.divider}`\r\n  },\r\n  errorBubble: {\r\n    backgroundColor: theme.palette.error.light, \r\n    color: theme.palette.error.contrastText,\r\n    marginRight: 'auto',\r\n    border: `1px solid ${theme.palette.error.main}`,\r\n  },\r\n  avatar: {\r\n    marginRight: theme.spacing(1),\r\n    marginLeft: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.light, // Use secondary light as before\r\n    color: theme.palette.secondary.contrastText,\r\n    width: 32, \r\n    height: 32, \r\n  },\r\n  userAvatar: {\r\n    backgroundColor: theme.palette.primary.light, // Use primary light for user as before\r\n    color: theme.palette.primary.contrastText,\r\n  }\r\n}));\r\n\r\nconst AIChatInterface = ({ initialContext = 'General drug design', onMoleculeMentioned = () => {}, selectedMolecule = null }) => {\r\n  const classes = useStyles();\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n  const [currentContext, setCurrentContext] = useState(initialContext);\r\n\r\n  // Scroll to bottom when messages update\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Update context when initialContext or selectedMolecule changes\r\n  useEffect(() => {\r\n    let newContext = initialContext;\r\n    if (selectedMolecule) {\r\n      newContext = `Discussing ${selectedMolecule.name || 'selected molecule'} (SMILES: ${selectedMolecule.smiles || 'N/A'})`;\r\n    }\r\n    setCurrentContext(newContext);\r\n    // Add a context update message to the chat if it changed significantly\r\n    if (newContext !== currentContext && messages.length > 0) { // Avoid adding on initial load\r\n         setMessages(prevMessages => [...prevMessages, {\r\n             role: 'system', // Use a system role for context messages\r\n             content: [{ type: 'text', text: `Context updated: ${newContext}` }],\r\n             isContextUpdate: true // Custom flag\r\n         }]);\r\n    }\r\n\r\n  }, [initialContext, selectedMolecule, currentContext, messages.length]); // Added dependencies\r\n\r\n  // Add initial assistant message based on the initial context\r\n  useEffect(() => {\r\n    setMessages([\r\n      {\r\n        role: 'assistant',\r\n        content: [{ type: 'text', text: `Hello! I'm here to help with drug design. Context: ${currentContext}` }]\r\n      }\r\n    ]);\r\n  // Depend only on initialContext to set the *very first* message\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [initialContext]);\r\n\r\n  const handleInputChange = (event) => {\r\n    setInput(event.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async (event) => {\r\n    event.preventDefault(); \r\n    const userMessageContent = input.trim();\r\n    if (!userMessageContent || isLoading) return;\r\n\r\n    const newUserMessage = { role: 'user', content: [{ type: 'text', text: userMessageContent }] };\r\n    let updatedMessages = [...messages, newUserMessage]; // Start with user message\r\n\r\n    // Prepend current context implicitly for the API call *if* a molecule is selected\r\n    // This helps Claude remember what is being discussed without cluttering the visible chat too much\r\n    let apiMessages = [...messages, newUserMessage].map(msg => ({ role: msg.role, content: msg.content }));\r\n    if (selectedMolecule) {\r\n        const contextMessageForApi = {\r\n            role: 'user', // Pretend user mentioned it for context\r\n            content: [{ type: 'text', text: `[Current Focus: ${selectedMolecule.name}, SMILES: ${selectedMolecule.smiles}]` }]\r\n        };\r\n        // Add context *before* the latest user message for better flow\r\n        apiMessages.splice(apiMessages.length - 1, 0, contextMessageForApi);\r\n    }\r\n    \r\n    setMessages(updatedMessages); // Update UI immediately with user message\r\n    setInput('');\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Use the apiMessages which might include the implicit context\r\n      const response = await claudeAPI.continueChat(apiMessages, currentContext);\r\n      \r\n      if (response.data && response.data.response) {\r\n        const assistantMessage = { \r\n            role: 'assistant', \r\n            // Ensure content is always in the expected array format\r\n            content: Array.isArray(response.data.response) ? response.data.response : [{ type: 'text', text: response.data.response.text || '' }] \r\n        }; \r\n        setMessages(prevMessages => [...prevMessages, assistantMessage]);\r\n        \r\n        // Check response for SMILES\r\n        const responseText = assistantMessage.content[0]?.text || ''; \r\n        const smilesRegex = /\\b([A-Za-z0-9@+\\-\\[\\]\\(\\)\\\\\\/%=#$!.~{},*]+)\\b/g;\r\n        const potentialSmiles = responseText.match(smilesRegex);\r\n        if (potentialSmiles) {\r\n           potentialSmiles.forEach(smiles => {\r\n             if (smiles.length > 5 && smiles.includes('C') && (smiles.includes('(') || smiles.includes('='))) {\r\n               onMoleculeMentioned(smiles);\r\n             }\r\n           });\r\n        }\r\n\r\n      } else {\r\n        throw new Error('Invalid response format from API');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error sending chat message:', err);\r\n      const errorText = err.message || 'Failed to get response from AI';\r\n      setError(errorText);\r\n      setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: [{ type: 'text', text: `Error: ${errorText}`}], isError: true }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root} elevation={1}>\r\n      <List className={classes.messageList}>\r\n        {messages.map((msg, index) => (\r\n          // Don't render system context update messages\r\n          !msg.isContextUpdate && (\r\n            <ListItem key={index} className={msg.role === 'user' ? classes.userMessage : classes.assistantMessage}>\r\n              {msg.role === 'assistant' && (\r\n                <Avatar className={classes.avatar}>\r\n                  <AssistantIcon fontSize=\"small\"/>\r\n                </Avatar>\r\n              )}\r\n              <Box className={`${classes.messageBubble} ${msg.role === 'user' ? classes.userBubble : msg.isError ? classes.errorBubble : classes.assistantBubble}`}> {/* Added errorBubble style */}\r\n                {Array.isArray(msg.content) ? \r\n                  msg.content.map((part, partIndex) => (\r\n                    part.type === 'text' ? <Typography key={partIndex} variant=\"body1\">{part.text}</Typography> : null\r\n                  ))\r\n                  : <Typography variant=\"body1\">{typeof msg.content === 'string' ? msg.content : 'Invalid message format'}</Typography>\r\n                }\r\n              </Box>\r\n              {msg.role === 'user' && (\r\n                <Avatar className={`${classes.avatar} ${classes.userAvatar}`}>\r\n                  <PersonIcon fontSize=\"small\"/>\r\n                </Avatar>\r\n              )}\r\n            </ListItem>\r\n          )\r\n        ))}\r\n        {isLoading && (\r\n          <ListItem className={classes.assistantMessage}>\r\n            <Avatar className={classes.avatar}>\r\n              <AssistantIcon fontSize=\"small\"/>\r\n            </Avatar>\r\n            <Box className={`${classes.messageBubble} ${classes.assistantBubble}`}>\r\n              <CircularProgress size={20} />\r\n            </Box>\r\n          </ListItem>\r\n        )}\r\n        {error && (\r\n          <ListItem>\r\n            <Alert severity=\"error\" style={{ width: '100%' }}>{error}</Alert>\r\n          </ListItem>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </List>\r\n      <form onSubmit={handleSendMessage} className={classes.messageInputContainer}>\r\n        <TextField\r\n          className={classes.inputField}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          placeholder=\"Ask Claude about the molecule...\"\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          disabled={isLoading}\r\n          multiline\r\n          maxRows={3}\r\n        />\r\n        <IconButton type=\"submit\" color=\"primary\" disabled={isLoading || !input.trim()}>\r\n          <SendIcon />\r\n        </IconButton>\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default AIChatInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}