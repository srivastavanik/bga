{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL and default headers\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for authentication\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  // Handle authentication errors\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('auth_token');\n    window.location.href = '/login';\n    return Promise.reject(new Error('Authentication failed. Please log in again.'));\n  }\n  return Promise.reject(error);\n});\n\n// Authentication API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  logout: () => api.post('/auth/logout'),\n  getCurrentUser: () => api.get('/auth/me')\n};\n\n// Drug Design API\nexport const drugDesignAPI = {\n  // Generate molecule based on requirements\n  generateMolecule: requirements => api.post('/drug-design/generate', requirements),\n  // Refine an existing molecule\n  refineMolecule: data => api.post('/drug-design/refine', data),\n  // Analyze regulatory pathway\n  regulatoryAnalysis: data => api.post('/drug-design/regulatory-analysis', data),\n  // Save molecule to user's collection\n  saveMolecule: molecule => api.post('/drug-design/molecules', molecule),\n  // Get user's saved molecules\n  getSavedMolecules: () => api.get('/drug-design/molecules'),\n  // Get specific molecule by ID\n  getMolecule: id => api.get(`/drug-design/molecules/${id}`),\n  // Update molecule\n  updateMolecule: (id, data) => api.put(`/drug-design/molecules/${id}`, data),\n  // Delete molecule\n  deleteMolecule: id => api.delete(`/drug-design/molecules/${id}`)\n};\n\n// Simulation API\nexport const simulationAPI = {\n  // Run RDKit operations\n  runRDKit: data => api.post('/simulation/rdkit', data),\n  // Generate 3D structure\n  generate3DStructure: smiles => api.post('/simulation/3d-structure', {\n    smiles\n  }),\n  // Compare two molecules\n  compareMolecules: (smiles1, smiles2) => api.post('/simulation/compare', {\n    smiles1,\n    smiles2\n  }),\n  // Calculate binding affinity\n  calculateBindingAffinity: data => api.post('/simulation/binding-affinity', data),\n  // Predict ADMET properties\n  predictADMET: smiles => api.post('/simulation/admet', {\n    smiles\n  }),\n  // Run molecular dynamics simulation\n  runMolecularDynamics: data => api.post('/simulation/molecular-dynamics', data),\n  // Run docking simulation\n  runDocking: data => api.post('/simulation/docking', data),\n  // Get simulation results\n  getSimulationResults: id => api.get(`/simulation/results/${id}`),\n  // Save simulation results\n  saveSimulationResults: data => api.post('/simulation/results', data)\n};\n\n// Literature API\nexport const literatureAPI = {\n  // Search PubMed\n  searchPubMed: (query, options) => api.get('/literature/pubmed', {\n    params: {\n      query,\n      ...options\n    }\n  }),\n  // Get PubMed article details\n  getPubMedArticle: pmid => api.get(`/literature/pubmed/${pmid}`),\n  // Save article to user's collection\n  saveArticle: article => api.post('/literature/articles', article),\n  // Get user's saved articles\n  getSavedArticles: () => api.get('/literature/articles'),\n  // Get article by ID\n  getArticle: id => api.get(`/literature/articles/${id}`),\n  // Delete saved article\n  deleteArticle: id => api.delete(`/literature/articles/${id}`),\n  // Ask Claude to analyze literature\n  analyzeLiterature: (articles, query) => api.post('/literature/analyze', {\n    articles,\n    query\n  })\n};\n\n// Chemical Data API\nexport const chemicalDataAPI = {\n  // Search ChEMBL\n  searchChEMBL: (query, options) => api.get('/chemical-data/chembl', {\n    params: {\n      query,\n      ...options\n    }\n  }),\n  // Get compound details from ChEMBL\n  getChEMBLCompound: chemblId => api.get(`/chemical-data/chembl/${chemblId}`),\n  // Search by structure similarity\n  searchBySimilarity: (smiles, threshold) => api.post('/chemical-data/similarity', {\n    smiles,\n    threshold\n  }),\n  // Search by substructure\n  searchBySubstructure: smiles => api.post('/chemical-data/substructure', {\n    smiles\n  }),\n  // Get bioactivity data\n  getBioactivityData: chemblId => api.get(`/chemical-data/bioactivity/${chemblId}`),\n  // Get drug-target interactions\n  getDrugTargetInteractions: chemblId => api.get(`/chemical-data/drug-target/${chemblId}`),\n  // Similarity search with detailed options\n  similaritySearch: (query, targets, options = {}) => api.post('/similarity/search', {\n    query,\n    targets,\n    fingerprint: options.fingerprint || 'morgan',\n    metric: options.metric || 'tanimoto',\n    threshold: options.threshold || 0.7,\n    maxResults: options.maxResults || 50\n  }),\n  // Multi-reference similarity search\n  multiReferenceSimilaritySearch: (queries, targets, options = {}) => api.post('/similarity/multi-reference', {\n    queries,\n    targets,\n    fingerprint: options.fingerprint || 'morgan',\n    metric: options.metric || 'tanimoto',\n    threshold: options.threshold || 0.7,\n    maxResults: options.maxResults || 50,\n    aggregation: options.aggregation || 'max'\n  }),\n  // Diversity selection from a set of molecules\n  diversitySelection: (molecules, options = {}) => api.post('/similarity/diversity', {\n    molecules,\n    numPicks: options.numPicks || 10,\n    fingerprint: options.fingerprint || 'morgan',\n    metric: options.metric || 'tanimoto'\n  })\n};\n\n// Regulatory Analysis API\nexport const regulatoryAPI = {\n  // Analyze safety and toxicity\n  analyzeSafety: smiles => api.post('/regulatory/safety', {\n    smiles\n  }),\n  // Analyze pharmaceutical properties\n  analyzePharmaceuticalProperties: smiles => api.post('/regulatory/pharmaceutical', {\n    smiles\n  }),\n  // Get regulatory pathway\n  getRegulatoryPathway: data => api.post('/regulatory/pathway', data),\n  // Get similar approved drugs\n  getSimilarApprovedDrugs: smiles => api.post('/regulatory/similar-approved', {\n    smiles\n  }),\n  // Get development timeline\n  getDevelopmentTimeline: data => api.post('/regulatory/timeline', data),\n  // Get regulatory requirements\n  getRegulatoryRequirements: indication => api.get(`/regulatory/requirements/${indication}`)\n};\n\n// Collaborative features API\nexport const collaborationAPI = {\n  // Get projects\n  getProjects: () => api.get('/collaboration/projects'),\n  // Get project by ID\n  getProject: id => api.get(`/collaboration/projects/${id}`),\n  // Create project\n  createProject: project => api.post('/collaboration/projects', project),\n  // Update project\n  updateProject: (id, data) => api.put(`/collaboration/projects/${id}`, data),\n  // Delete project\n  deleteProject: id => api.delete(`/collaboration/projects/${id}`),\n  // Add member to project\n  addMember: (projectId, userId, role) => api.post(`/collaboration/projects/${projectId}/members`, {\n    userId,\n    role\n  }),\n  // Remove member from project\n  removeMember: (projectId, userId) => api.delete(`/collaboration/projects/${projectId}/members/${userId}`),\n  // Get project comments\n  getComments: projectId => api.get(`/collaboration/projects/${projectId}/comments`),\n  // Add comment\n  addComment: (projectId, comment) => api.post(`/collaboration/projects/${projectId}/comments`, comment),\n  // Get activity log\n  getActivityLog: projectId => api.get(`/collaboration/projects/${projectId}/activity`)\n};\n\n// Claude AI Assistant API\nexport const claudeAPI = {\n  // Ask Claude a question\n  askQuestion: (question, context = null) => api.post('/ai/ask', {\n    question,\n    context\n  }),\n  // Get molecule generation thinking process\n  getMoleculeThinking: requestId => api.get(`/ai/molecule-thinking/${requestId}`),\n  // Generate molecule\n  generateMolecule: requirements => api.post('/ai/generate-molecule', requirements),\n  // Analyze molecule\n  analyzeMolecule: smiles => api.post('/ai/analyze-molecule', {\n    smiles\n  }),\n  // Compare molecules\n  compareMolecules: molecules => api.post('/ai/compare-molecules', {\n    molecules\n  }),\n  // Analyze literature\n  analyzeLiterature: (articles, focus) => api.post('/ai/analyze-literature', {\n    articles,\n    focus\n  }),\n  // Get detailed thinking process\n  getThinkingProcess: requestId => api.get(`/ai/thinking-process/${requestId}`)\n};\nexport default {\n  auth: authAPI,\n  drugDesign: drugDesignAPI,\n  simulation: simulationAPI,\n  literature: literatureAPI,\n  chemicalData: chemicalDataAPI,\n  regulatory: regulatoryAPI,\n  collaboration: collaborationAPI,\n  claude: claudeAPI\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","Error","authAPI","login","credentials","post","register","userData","logout","getCurrentUser","get","drugDesignAPI","generateMolecule","requirements","refineMolecule","data","regulatoryAnalysis","saveMolecule","molecule","getSavedMolecules","getMolecule","id","updateMolecule","put","deleteMolecule","delete","simulationAPI","runRDKit","generate3DStructure","smiles","compareMolecules","smiles1","smiles2","calculateBindingAffinity","predictADMET","runMolecularDynamics","runDocking","getSimulationResults","saveSimulationResults","literatureAPI","searchPubMed","query","options","params","getPubMedArticle","pmid","saveArticle","article","getSavedArticles","getArticle","deleteArticle","analyzeLiterature","articles","chemicalDataAPI","searchChEMBL","getChEMBLCompound","chemblId","searchBySimilarity","threshold","searchBySubstructure","getBioactivityData","getDrugTargetInteractions","similaritySearch","targets","fingerprint","metric","maxResults","multiReferenceSimilaritySearch","queries","aggregation","diversitySelection","molecules","numPicks","regulatoryAPI","analyzeSafety","analyzePharmaceuticalProperties","getRegulatoryPathway","getSimilarApprovedDrugs","getDevelopmentTimeline","getRegulatoryRequirements","indication","collaborationAPI","getProjects","getProject","createProject","project","updateProject","deleteProject","addMember","projectId","userId","role","removeMember","getComments","addComment","comment","getActivityLog","claudeAPI","askQuestion","question","context","getMoleculeThinking","requestId","analyzeMolecule","focus","getThinkingProcess","auth","drugDesign","simulation","literature","chemicalData","regulatory","collaboration","claude"],"sources":["C:/Users/nicks/Downloads/breakinggood/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base URL and default headers\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || '/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor for authentication\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('auth_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle authentication errors\r\n    if (error.response && error.response.status === 401) {\r\n      localStorage.removeItem('auth_token');\r\n      window.location.href = '/login';\r\n      return Promise.reject(new Error('Authentication failed. Please log in again.'));\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  logout: () => api.post('/auth/logout'),\r\n  getCurrentUser: () => api.get('/auth/me'),\r\n};\r\n\r\n// Drug Design API\r\nexport const drugDesignAPI = {\r\n  // Generate molecule based on requirements\r\n  generateMolecule: (requirements) => api.post('/drug-design/generate', requirements),\r\n  \r\n  // Refine an existing molecule\r\n  refineMolecule: (data) => api.post('/drug-design/refine', data),\r\n  \r\n  // Analyze regulatory pathway\r\n  regulatoryAnalysis: (data) => api.post('/drug-design/regulatory-analysis', data),\r\n  \r\n  // Save molecule to user's collection\r\n  saveMolecule: (molecule) => api.post('/drug-design/molecules', molecule),\r\n  \r\n  // Get user's saved molecules\r\n  getSavedMolecules: () => api.get('/drug-design/molecules'),\r\n  \r\n  // Get specific molecule by ID\r\n  getMolecule: (id) => api.get(`/drug-design/molecules/${id}`),\r\n  \r\n  // Update molecule\r\n  updateMolecule: (id, data) => api.put(`/drug-design/molecules/${id}`, data),\r\n  \r\n  // Delete molecule\r\n  deleteMolecule: (id) => api.delete(`/drug-design/molecules/${id}`),\r\n};\r\n\r\n// Simulation API\r\nexport const simulationAPI = {\r\n  // Run RDKit operations\r\n  runRDKit: (data) => api.post('/simulation/rdkit', data),\r\n  \r\n  // Generate 3D structure\r\n  generate3DStructure: (smiles) => api.post('/simulation/3d-structure', { smiles }),\r\n  \r\n  // Compare two molecules\r\n  compareMolecules: (smiles1, smiles2) => api.post('/simulation/compare', { smiles1, smiles2 }),\r\n  \r\n  // Calculate binding affinity\r\n  calculateBindingAffinity: (data) => api.post('/simulation/binding-affinity', data),\r\n  \r\n  // Predict ADMET properties\r\n  predictADMET: (smiles) => api.post('/simulation/admet', { smiles }),\r\n  \r\n  // Run molecular dynamics simulation\r\n  runMolecularDynamics: (data) => api.post('/simulation/molecular-dynamics', data),\r\n  \r\n  // Run docking simulation\r\n  runDocking: (data) => api.post('/simulation/docking', data),\r\n  \r\n  // Get simulation results\r\n  getSimulationResults: (id) => api.get(`/simulation/results/${id}`),\r\n  \r\n  // Save simulation results\r\n  saveSimulationResults: (data) => api.post('/simulation/results', data),\r\n};\r\n\r\n// Literature API\r\nexport const literatureAPI = {\r\n  // Search PubMed\r\n  searchPubMed: (query, options) => api.get('/literature/pubmed', { params: { query, ...options } }),\r\n  \r\n  // Get PubMed article details\r\n  getPubMedArticle: (pmid) => api.get(`/literature/pubmed/${pmid}`),\r\n  \r\n  // Save article to user's collection\r\n  saveArticle: (article) => api.post('/literature/articles', article),\r\n  \r\n  // Get user's saved articles\r\n  getSavedArticles: () => api.get('/literature/articles'),\r\n  \r\n  // Get article by ID\r\n  getArticle: (id) => api.get(`/literature/articles/${id}`),\r\n  \r\n  // Delete saved article\r\n  deleteArticle: (id) => api.delete(`/literature/articles/${id}`),\r\n  \r\n  // Ask Claude to analyze literature\r\n  analyzeLiterature: (articles, query) => api.post('/literature/analyze', { articles, query }),\r\n};\r\n\r\n// Chemical Data API\r\nexport const chemicalDataAPI = {\r\n  // Search ChEMBL\r\n  searchChEMBL: (query, options) => api.get('/chemical-data/chembl', { params: { query, ...options } }),\r\n  \r\n  // Get compound details from ChEMBL\r\n  getChEMBLCompound: (chemblId) => api.get(`/chemical-data/chembl/${chemblId}`),\r\n  \r\n  // Search by structure similarity\r\n  searchBySimilarity: (smiles, threshold) => api.post('/chemical-data/similarity', { smiles, threshold }),\r\n  \r\n  // Search by substructure\r\n  searchBySubstructure: (smiles) => api.post('/chemical-data/substructure', { smiles }),\r\n  \r\n  // Get bioactivity data\r\n  getBioactivityData: (chemblId) => api.get(`/chemical-data/bioactivity/${chemblId}`),\r\n  \r\n  // Get drug-target interactions\r\n  getDrugTargetInteractions: (chemblId) => api.get(`/chemical-data/drug-target/${chemblId}`),\r\n  \r\n  // Similarity search with detailed options\r\n  similaritySearch: (query, targets, options = {}) => \r\n    api.post('/similarity/search', { \r\n      query,\r\n      targets,\r\n      fingerprint: options.fingerprint || 'morgan',\r\n      metric: options.metric || 'tanimoto',\r\n      threshold: options.threshold || 0.7,\r\n      maxResults: options.maxResults || 50\r\n    }),\r\n  \r\n  // Multi-reference similarity search\r\n  multiReferenceSimilaritySearch: (queries, targets, options = {}) => \r\n    api.post('/similarity/multi-reference', {\r\n      queries,\r\n      targets,\r\n      fingerprint: options.fingerprint || 'morgan',\r\n      metric: options.metric || 'tanimoto',\r\n      threshold: options.threshold || 0.7,\r\n      maxResults: options.maxResults || 50,\r\n      aggregation: options.aggregation || 'max'\r\n    }),\r\n  \r\n  // Diversity selection from a set of molecules\r\n  diversitySelection: (molecules, options = {}) => \r\n    api.post('/similarity/diversity', {\r\n      molecules,\r\n      numPicks: options.numPicks || 10,\r\n      fingerprint: options.fingerprint || 'morgan',\r\n      metric: options.metric || 'tanimoto'\r\n    })\r\n};\r\n\r\n// Regulatory Analysis API\r\nexport const regulatoryAPI = {\r\n  // Analyze safety and toxicity\r\n  analyzeSafety: (smiles) => api.post('/regulatory/safety', { smiles }),\r\n  \r\n  // Analyze pharmaceutical properties\r\n  analyzePharmaceuticalProperties: (smiles) => api.post('/regulatory/pharmaceutical', { smiles }),\r\n  \r\n  // Get regulatory pathway\r\n  getRegulatoryPathway: (data) => api.post('/regulatory/pathway', data),\r\n  \r\n  // Get similar approved drugs\r\n  getSimilarApprovedDrugs: (smiles) => api.post('/regulatory/similar-approved', { smiles }),\r\n  \r\n  // Get development timeline\r\n  getDevelopmentTimeline: (data) => api.post('/regulatory/timeline', data),\r\n  \r\n  // Get regulatory requirements\r\n  getRegulatoryRequirements: (indication) => api.get(`/regulatory/requirements/${indication}`),\r\n};\r\n\r\n// Collaborative features API\r\nexport const collaborationAPI = {\r\n  // Get projects\r\n  getProjects: () => api.get('/collaboration/projects'),\r\n  \r\n  // Get project by ID\r\n  getProject: (id) => api.get(`/collaboration/projects/${id}`),\r\n  \r\n  // Create project\r\n  createProject: (project) => api.post('/collaboration/projects', project),\r\n  \r\n  // Update project\r\n  updateProject: (id, data) => api.put(`/collaboration/projects/${id}`, data),\r\n  \r\n  // Delete project\r\n  deleteProject: (id) => api.delete(`/collaboration/projects/${id}`),\r\n  \r\n  // Add member to project\r\n  addMember: (projectId, userId, role) => api.post(`/collaboration/projects/${projectId}/members`, { userId, role }),\r\n  \r\n  // Remove member from project\r\n  removeMember: (projectId, userId) => api.delete(`/collaboration/projects/${projectId}/members/${userId}`),\r\n  \r\n  // Get project comments\r\n  getComments: (projectId) => api.get(`/collaboration/projects/${projectId}/comments`),\r\n  \r\n  // Add comment\r\n  addComment: (projectId, comment) => api.post(`/collaboration/projects/${projectId}/comments`, comment),\r\n  \r\n  // Get activity log\r\n  getActivityLog: (projectId) => api.get(`/collaboration/projects/${projectId}/activity`),\r\n};\r\n\r\n// Claude AI Assistant API\r\nexport const claudeAPI = {\r\n  // Ask Claude a question\r\n  askQuestion: (question, context = null) => api.post('/ai/ask', { question, context }),\r\n  \r\n  // Get molecule generation thinking process\r\n  getMoleculeThinking: (requestId) => api.get(`/ai/molecule-thinking/${requestId}`),\r\n  \r\n  // Generate molecule\r\n  generateMolecule: (requirements) => api.post('/ai/generate-molecule', requirements),\r\n  \r\n  // Analyze molecule\r\n  analyzeMolecule: (smiles) => api.post('/ai/analyze-molecule', { smiles }),\r\n  \r\n  // Compare molecules\r\n  compareMolecules: (molecules) => api.post('/ai/compare-molecules', { molecules }),\r\n  \r\n  // Analyze literature\r\n  analyzeLiterature: (articles, focus) => api.post('/ai/analyze-literature', { articles, focus }),\r\n  \r\n  // Get detailed thinking process\r\n  getThinkingProcess: (requestId) => api.get(`/ai/thinking-process/${requestId}`),\r\n};\r\n\r\nexport default {\r\n  auth: authAPI,\r\n  drugDesign: drugDesignAPI,\r\n  simulation: simulationAPI,\r\n  literature: literatureAPI,\r\n  chemicalData: chemicalDataAPI,\r\n  regulatory: regulatoryAPI,\r\n  collaboration: collaborationAPI,\r\n  claude: claudeAPI,\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}