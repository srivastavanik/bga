{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicks\\\\Downloads\\\\breakinggood\\\\frontend\\\\src\\\\components\\\\AIChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Paper, TextField, Button, List, ListItem, ListItemText, Typography, makeStyles, CircularProgress, Box, IconButton, Avatar } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport PersonIcon from '@material-ui/icons/Person';\nimport AssistantIcon from '@material-ui/icons/EmojiObjects'; // Using EmojiObjects for AI\nimport Alert from '@material-ui/lab/Alert';\nimport { claudeAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '500px',\n    // Or adjust as needed\n    border: `1px solid ${theme.palette.divider}`,\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: theme.palette.background.paper // Use theme paper background\n  },\n  messageList: {\n    flexGrow: 1,\n    overflowY: 'auto',\n    padding: theme.spacing(2)\n  },\n  messageInputContainer: {\n    display: 'flex',\n    padding: theme.spacing(1),\n    borderTop: `1px solid ${theme.palette.divider}`,\n    alignItems: 'center'\n  },\n  inputField: {\n    flexGrow: 1,\n    marginRight: theme.spacing(1)\n  },\n  userMessage: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginBottom: theme.spacing(1)\n  },\n  assistantMessage: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    marginBottom: theme.spacing(1)\n  },\n  messageBubble: {\n    padding: theme.spacing(1, 2),\n    borderRadius: theme.shape.borderRadius,\n    maxWidth: '80%',\n    wordWrap: 'break-word'\n  },\n  userBubble: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    marginLeft: 'auto'\n  },\n  assistantBubble: {\n    backgroundColor: theme.palette.grey[200],\n    // Keep assistant bubbles distinct but light\n    color: theme.palette.text.primary,\n    marginRight: 'auto'\n  },\n  avatar: {\n    marginRight: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.light,\n    // Lighter avatar background\n    color: theme.palette.secondary.contrastText\n  },\n  userAvatar: {\n    backgroundColor: theme.palette.primary.light,\n    // Lighter avatar background for user\n    color: theme.palette.primary.contrastText\n  }\n}));\nconst AIChatInterface = ({\n  initialContext = 'General drug design',\n  onMoleculeMentioned = () => {}\n}) => {\n  _s();\n  const classes = useStyles();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Optional: Add initial assistant message\n  useEffect(() => {\n    setMessages([{\n      role: 'assistant',\n      content: [{\n        type: 'text',\n        text: `Hello! I'm here to help with drug design. How can I assist you today? Context: ${initialContext}`\n      }]\n    }]);\n  }, [initialContext]);\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSendMessage = async event => {\n    event.preventDefault(); // Prevent form submission if wrapped in a form\n    const userMessageContent = input.trim();\n    if (!userMessageContent || isLoading) return;\n    const newUserMessage = {\n      role: 'user',\n      content: [{\n        type: 'text',\n        text: userMessageContent\n      }]\n    };\n    const updatedMessages = [...messages, newUserMessage];\n    setMessages(updatedMessages);\n    setInput('');\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Prepare messages for the API (only send role and content)\n      const apiMessages = updatedMessages.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n      const response = await claudeAPI.continueChat(apiMessages, initialContext);\n      if (response.data && response.data.response) {\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response\n        };\n        setMessages(prevMessages => [...prevMessages, assistantMessage]);\n\n        // Check if the response mentions a molecule (basic SMILES check)\n        const responseText = response.data.response.text || '';\n        const smilesRegex = /\\b([A-Za-z0-9@+\\-\\[\\]\\(\\)\\\\\\/%=#$!.~{},*]+)\\b/g;\n        const potentialSmiles = responseText.match(smilesRegex);\n        if (potentialSmiles) {\n          potentialSmiles.forEach(smiles => {\n            if (smiles.length > 5 && smiles.includes('C') && (smiles.includes('(') || smiles.includes('='))) {\n              onMoleculeMentioned(smiles); // Notify parent component\n            }\n          });\n        }\n      } else {\n        throw new Error('Invalid response format from API');\n      }\n    } catch (err) {\n      console.error('Error sending chat message:', err);\n      setError(err.message || 'Failed to get response from AI');\n      // Optionally add an error message to the chat\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: [{\n          type: 'text',\n          text: `Error: ${err.message || 'Failed to get response'}`\n        }],\n        isError: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    elevation: 1,\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      className: classes.messageList,\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n        className: msg.role === 'user' ? classes.userMessage : classes.assistantMessage,\n        children: [msg.role === 'assistant' && /*#__PURE__*/_jsxDEV(Avatar, {\n          className: classes.avatar,\n          children: /*#__PURE__*/_jsxDEV(AssistantIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: `${classes.messageBubble} ${msg.role === 'user' ? classes.userBubble : classes.assistantBubble}`,\n          children: Array.isArray(msg.content) ? msg.content.map((part, partIndex) => part.type === 'text' ? /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: part.text\n          }, partIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 42\n          }, this) : null) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: typeof msg.content === 'string' ? msg.content : 'Invalid message format'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), msg.role === 'user' && /*#__PURE__*/_jsxDEV(Avatar, {\n          className: `${classes.avatar} ${classes.userAvatar}`,\n          children: /*#__PURE__*/_jsxDEV(PersonIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(ListItem, {\n        className: classes.assistantMessage,\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          className: classes.avatar,\n          children: /*#__PURE__*/_jsxDEV(AssistantIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: `${classes.messageBubble} ${classes.assistantBubble}`,\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          style: {\n            width: '100%'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      className: classes.messageInputContainer,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: classes.inputField,\n        variant: \"outlined\",\n        size: \"small\",\n        placeholder: \"Ask Claude about the molecule...\",\n        value: input,\n        onChange: handleInputChange,\n        disabled: isLoading,\n        multiline: true,\n        maxRows: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        type: \"submit\",\n        color: \"primary\",\n        disabled: isLoading || !input.trim(),\n        children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatInterface, \"GOtcjabAxyU/dMnuUKQ8m1aofn8=\", false, function () {\n  return [useStyles];\n});\n_c = AIChatInterface;\nexport default AIChatInterface;\nvar _c;\n$RefreshReg$(_c, \"AIChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Paper","TextField","Button","List","ListItem","ListItemText","Typography","makeStyles","CircularProgress","Box","IconButton","Avatar","SendIcon","PersonIcon","AssistantIcon","Alert","claudeAPI","jsxDEV","_jsxDEV","useStyles","theme","root","display","flexDirection","height","border","palette","divider","borderRadius","shape","backgroundColor","background","paper","messageList","flexGrow","overflowY","padding","spacing","messageInputContainer","borderTop","alignItems","inputField","marginRight","userMessage","justifyContent","marginBottom","assistantMessage","messageBubble","maxWidth","wordWrap","userBubble","primary","main","color","contrastText","marginLeft","assistantBubble","grey","text","avatar","secondary","light","userAvatar","AIChatInterface","initialContext","onMoleculeMentioned","_s","classes","messages","setMessages","input","setInput","isLoading","setIsLoading","error","setError","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","role","content","type","handleInputChange","event","target","value","handleSendMessage","preventDefault","userMessageContent","trim","newUserMessage","updatedMessages","apiMessages","map","msg","response","continueChat","data","prevMessages","responseText","smilesRegex","potentialSmiles","match","forEach","smiles","length","includes","Error","err","console","message","isError","className","elevation","children","index","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","part","partIndex","variant","size","severity","style","width","ref","onSubmit","placeholder","onChange","disabled","multiline","maxRows","_c","$RefreshReg$"],"sources":["C:/Users/nicks/Downloads/breakinggood/frontend/src/components/AIChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Box,\r\n  IconButton,\r\n  Avatar\r\n} from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport AssistantIcon from '@material-ui/icons/EmojiObjects'; // Using EmojiObjects for AI\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { claudeAPI } from '../services/api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '500px', // Or adjust as needed\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: theme.palette.background.paper, // Use theme paper background\r\n  },\r\n  messageList: {\r\n    flexGrow: 1,\r\n    overflowY: 'auto',\r\n    padding: theme.spacing(2),\r\n  },\r\n  messageInputContainer: {\r\n    display: 'flex',\r\n    padding: theme.spacing(1),\r\n    borderTop: `1px solid ${theme.palette.divider}`,\r\n    alignItems: 'center',\r\n  },\r\n  inputField: {\r\n    flexGrow: 1,\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  userMessage: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  assistantMessage: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-start',\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  messageBubble: {\r\n    padding: theme.spacing(1, 2),\r\n    borderRadius: theme.shape.borderRadius,\r\n    maxWidth: '80%',\r\n    wordWrap: 'break-word',\r\n  },\r\n  userBubble: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.primary.contrastText,\r\n    marginLeft: 'auto',\r\n  },\r\n  assistantBubble: {\r\n    backgroundColor: theme.palette.grey[200], // Keep assistant bubbles distinct but light\r\n    color: theme.palette.text.primary,\r\n    marginRight: 'auto',\r\n  },\r\n  avatar: {\r\n    marginRight: theme.spacing(1),\r\n    marginLeft: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.light, // Lighter avatar background\r\n    color: theme.palette.secondary.contrastText,\r\n  },\r\n  userAvatar: {\r\n    backgroundColor: theme.palette.primary.light, // Lighter avatar background for user\r\n    color: theme.palette.primary.contrastText,\r\n  }\r\n}));\r\n\r\nconst AIChatInterface = ({ initialContext = 'General drug design', onMoleculeMentioned = () => {} }) => {\r\n  const classes = useStyles();\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Scroll to bottom when messages update\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Optional: Add initial assistant message\r\n  useEffect(() => {\r\n    setMessages([\r\n      {\r\n        role: 'assistant',\r\n        content: [{ type: 'text', text: `Hello! I'm here to help with drug design. How can I assist you today? Context: ${initialContext}` }]\r\n      }\r\n    ]);\r\n  }, [initialContext]);\r\n\r\n  const handleInputChange = (event) => {\r\n    setInput(event.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async (event) => {\r\n    event.preventDefault(); // Prevent form submission if wrapped in a form\r\n    const userMessageContent = input.trim();\r\n    if (!userMessageContent || isLoading) return;\r\n\r\n    const newUserMessage = { role: 'user', content: [{ type: 'text', text: userMessageContent }] };\r\n    const updatedMessages = [...messages, newUserMessage];\r\n    setMessages(updatedMessages);\r\n    setInput('');\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Prepare messages for the API (only send role and content)\r\n      const apiMessages = updatedMessages.map(msg => ({ role: msg.role, content: msg.content }));\r\n\r\n      const response = await claudeAPI.continueChat(apiMessages, initialContext);\r\n      \r\n      if (response.data && response.data.response) {\r\n        const assistantMessage = { role: 'assistant', content: response.data.response }; \r\n        setMessages(prevMessages => [...prevMessages, assistantMessage]);\r\n        \r\n        // Check if the response mentions a molecule (basic SMILES check)\r\n        const responseText = response.data.response.text || ''; \r\n        const smilesRegex = /\\b([A-Za-z0-9@+\\-\\[\\]\\(\\)\\\\\\/%=#$!.~{},*]+)\\b/g;\r\n        const potentialSmiles = responseText.match(smilesRegex);\r\n        if (potentialSmiles) {\r\n           potentialSmiles.forEach(smiles => {\r\n             if (smiles.length > 5 && smiles.includes('C') && (smiles.includes('(') || smiles.includes('='))) {\r\n               onMoleculeMentioned(smiles); // Notify parent component\r\n             }\r\n           });\r\n        }\r\n\r\n      } else {\r\n        throw new Error('Invalid response format from API');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error sending chat message:', err);\r\n      setError(err.message || 'Failed to get response from AI');\r\n      // Optionally add an error message to the chat\r\n      setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: [{ type: 'text', text: `Error: ${err.message || 'Failed to get response'}`}], isError: true }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root} elevation={1}>\r\n      <List className={classes.messageList}>\r\n        {messages.map((msg, index) => (\r\n          <ListItem key={index} className={msg.role === 'user' ? classes.userMessage : classes.assistantMessage}>\r\n            {msg.role === 'assistant' && (\r\n              <Avatar className={classes.avatar}>\r\n                <AssistantIcon fontSize=\"small\"/>\r\n              </Avatar>\r\n            )}\r\n            <Box className={`${classes.messageBubble} ${msg.role === 'user' ? classes.userBubble : classes.assistantBubble}`}>\r\n              {Array.isArray(msg.content) ? \r\n                msg.content.map((part, partIndex) => (\r\n                  part.type === 'text' ? <Typography key={partIndex} variant=\"body1\">{part.text}</Typography> : null\r\n                ))\r\n                : <Typography variant=\"body1\">{typeof msg.content === 'string' ? msg.content : 'Invalid message format'}</Typography>\r\n              }\r\n            </Box>\r\n            {msg.role === 'user' && (\r\n              <Avatar className={`${classes.avatar} ${classes.userAvatar}`}>\r\n                <PersonIcon fontSize=\"small\"/>\r\n              </Avatar>\r\n            )}\r\n          </ListItem>\r\n        ))}\r\n        {isLoading && (\r\n          <ListItem className={classes.assistantMessage}>\r\n            <Avatar className={classes.avatar}>\r\n              <AssistantIcon fontSize=\"small\"/>\r\n            </Avatar>\r\n            <Box className={`${classes.messageBubble} ${classes.assistantBubble}`}>\r\n              <CircularProgress size={20} />\r\n            </Box>\r\n          </ListItem>\r\n        )}\r\n        {error && (\r\n          <ListItem>\r\n            <Alert severity=\"error\" style={{ width: '100%' }}>{error}</Alert>\r\n          </ListItem>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </List>\r\n      <form onSubmit={handleSendMessage} className={classes.messageInputContainer}>\r\n        <TextField\r\n          className={classes.inputField}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          placeholder=\"Ask Claude about the molecule...\"\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          disabled={isLoading}\r\n          multiline\r\n          maxRows={3}\r\n        />\r\n        <IconButton type=\"submit\" color=\"primary\" disabled={isLoading || !input.trim()}>\r\n          <SendIcon />\r\n        </IconButton>\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default AIChatInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}