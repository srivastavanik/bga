{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicks\\\\Downloads\\\\breakinggood\\\\frontend\\\\src\\\\components\\\\MoleculeViewer3DImproved.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Typography, Slider, Grid, Paper, FormControl, InputLabel, Select, MenuItem, IconButton, Tooltip, Box, CircularProgress } from '@material-ui/core';\nimport { FullscreenOutlined, FullscreenExitOutlined, RefreshOutlined, SaveAlt, CameraAlt } from '@material-ui/icons';\nimport * as $3Dmol from '3dmol/build/3Dmol-min.js';\nimport 'xterm/css/xterm.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  viewerContainer: {\n    position: 'relative',\n    height: '400px',\n    width: '100%',\n    border: `1px solid ${theme.palette.divider}`,\n    borderRadius: theme.shape.borderRadius,\n    overflow: 'hidden'\n  },\n  fullscreenContainer: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100vw',\n    height: '100vh',\n    zIndex: 9999,\n    backgroundColor: theme.palette.background.paper\n  },\n  controlsContainer: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2)\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(255,255,255,0.7)',\n    zIndex: 10\n  },\n  errorOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.1)',\n    zIndex: 10,\n    padding: theme.spacing(2),\n    textAlign: 'center'\n  },\n  viewerControls: {\n    position: 'absolute',\n    top: theme.spacing(1),\n    right: theme.spacing(1),\n    zIndex: 5,\n    backgroundColor: 'rgba(255,255,255,0.7)',\n    borderRadius: theme.shape.borderRadius,\n    padding: theme.spacing(0.5)\n  }\n}));\nconst MoleculeViewer3DImproved = props => {\n  _s();\n  const {\n    smiles,\n    // For backward compatibility\n    moleculeData,\n    // Main molecule data input\n    format = 'smiles',\n    // Default to SMILES format\n    initialStyle = 'stick',\n    height = 400,\n    width = '100%'\n  } = props;\n  const classes = useStyles();\n  const viewerRef = useRef(null);\n  const [viewer, setViewer] = useState(null);\n  const [modelStyle, setModelStyle] = useState(initialStyle);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [molData, setMolData] = useState(null);\n  const animationRef = useRef(null);\n\n  // Support both smiles and moleculeData props\n  const moleculeInput = smiles || moleculeData;\n\n  // Fetch 3D structure from SMILES when input changes\n  useEffect(() => {\n    if (!moleculeInput) {\n      setError('No molecule data provided');\n      setIsLoading(false);\n      return;\n    }\n    const fetchMoleculeData = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        // Only call API if input is SMILES format\n        if (format === 'smiles') {\n          const response = await axios.post('/api/simulation/3d-structure', {\n            smiles: moleculeInput\n          });\n          if (response.data && response.data.molblock) {\n            setMolData(response.data.molblock);\n          } else {\n            throw new Error('Failed to convert SMILES to 3D structure');\n          }\n        } else {\n          // For other formats, use the input directly\n          setMolData(moleculeInput);\n        }\n        setIsLoading(false);\n      } catch (err) {\n        console.error('Error fetching molecule data:', err);\n        setError(err.message || 'Failed to load molecule data');\n        setIsLoading(false);\n      }\n    };\n    fetchMoleculeData();\n  }, [moleculeInput, format]);\n\n  // Initialize 3Dmol viewer when we have molecule data\n  useEffect(() => {\n    if (!viewerRef.current || !molData) return;\n\n    // Clean up any existing viewer\n    if (viewer) {\n      viewer.removeAllModels();\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n\n    // Initialize viewer with a white background\n    const newViewer = $3Dmol.createViewer(viewerRef.current, {\n      backgroundColor: 'white'\n    });\n    try {\n      // Add the model based on format\n      let model;\n      if (format === 'pdb') {\n        model = newViewer.addModel(molData, 'pdb');\n      } else if (format === 'smiles' || format === 'sdf' || format === 'mol') {\n        model = newViewer.addModel(molData, 'mol');\n      } else {\n        model = newViewer.addModel(molData, format);\n      }\n\n      // Apply style based on initial setting\n      if (modelStyle === 'stick') {\n        newViewer.setStyle({}, {\n          stick: {}\n        });\n      } else if (modelStyle === 'sphere') {\n        newViewer.setStyle({}, {\n          sphere: {}\n        });\n      } else if (modelStyle === 'line') {\n        newViewer.setStyle({}, {\n          line: {}\n        });\n      } else if (modelStyle === 'cartoon') {\n        newViewer.setStyle({}, {\n          cartoon: {}\n        });\n      }\n\n      // Add a surface with 50% opacity\n      newViewer.addSurface($3Dmol.SurfaceType.VDW, {\n        opacity: 0.5,\n        color: 'white'\n      });\n\n      // Center the view and render\n      newViewer.zoomTo();\n      newViewer.render();\n      setViewer(newViewer);\n\n      // Start a gentle rotation for better visualization\n      const animate = () => {\n        newViewer.rotate(0.5, {\n          x: 0,\n          y: 1,\n          z: 0\n        });\n        newViewer.render();\n        animationRef.current = requestAnimationFrame(animate);\n      };\n      animate();\n    } catch (err) {\n      console.error('Error rendering molecule:', err);\n      setError(`Failed to render molecule: ${err.message}`);\n    }\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [molData, format, modelStyle]);\n\n  // Handle fullscreen toggle\n  const toggleFullscreen = () => {\n    setIsFullscreen(!isFullscreen);\n\n    // Need to resize the viewer after changing container size\n    setTimeout(() => {\n      if (viewer) {\n        viewer.resize();\n        viewer.render();\n      }\n    }, 100);\n  };\n\n  // Refresh the viewer\n  const handleRefresh = () => {\n    if (viewer) {\n      viewer.removeAllModels();\n      viewer.removeAllSurfaces();\n\n      // Re-add the model based on format\n      let model;\n      if (format === 'pdb') {\n        model = viewer.addModel(molData, 'pdb');\n      } else if (format === 'smiles' || format === 'sdf' || format === 'mol') {\n        model = viewer.addModel(molData, 'mol');\n      } else {\n        model = viewer.addModel(molData, format);\n      }\n\n      // Re-apply style\n      if (modelStyle === 'stick') {\n        viewer.setStyle({}, {\n          stick: {}\n        });\n      } else if (modelStyle === 'sphere') {\n        viewer.setStyle({}, {\n          sphere: {}\n        });\n      } else if (modelStyle === 'line') {\n        viewer.setStyle({}, {\n          line: {}\n        });\n      } else if (modelStyle === 'cartoon') {\n        viewer.setStyle({}, {\n          cartoon: {}\n        });\n      }\n\n      // Re-add surface\n      viewer.addSurface($3Dmol.SurfaceType.VDW, {\n        opacity: 0.5,\n        color: 'white'\n      });\n      viewer.zoomTo();\n      viewer.render();\n    }\n  };\n\n  // Style for container based on fullscreen state\n  const containerStyle = isFullscreen ? classes.fullscreenContainer : classes.viewerContainer;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: isFullscreen ? '100%' : height,\n      width: isFullscreen ? '100%' : width,\n      position: 'relative'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: containerStyle,\n      ref: viewerRef,\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.loadingOverlay,\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.errorOverlay,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.viewerControls,\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isFullscreen ? \"Exit Fullscreen\" : \"Fullscreen\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: toggleFullscreen,\n            children: isFullscreen ? /*#__PURE__*/_jsxDEV(FullscreenExitOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 31\n            }, this) : /*#__PURE__*/_jsxDEV(FullscreenOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 60\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Refresh Viewer\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: handleRefresh,\n            children: /*#__PURE__*/_jsxDEV(RefreshOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n_s(MoleculeViewer3DImproved, \"fKCIb7ijlk/4r1fr5n/iN7xHixw=\", false, function () {\n  return [useStyles];\n});\n_c = MoleculeViewer3DImproved;\nMoleculeViewer3DImproved.propTypes = {\n  smiles: PropTypes.string,\n  moleculeData: PropTypes.string,\n  format: PropTypes.oneOf(['smiles', 'pdb', 'mol2', 'sdf', 'cif', 'xyz']),\n  initialStyle: PropTypes.oneOf(['stick', 'sphere', 'line', 'cartoon']),\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nexport default MoleculeViewer3DImproved;\nvar _c;\n$RefreshReg$(_c, \"MoleculeViewer3DImproved\");","map":{"version":3,"names":["React","useEffect","useRef","useState","PropTypes","makeStyles","Button","Typography","Slider","Grid","Paper","FormControl","InputLabel","Select","MenuItem","IconButton","Tooltip","Box","CircularProgress","FullscreenOutlined","FullscreenExitOutlined","RefreshOutlined","SaveAlt","CameraAlt","$3Dmol","axios","jsxDEV","_jsxDEV","useStyles","theme","viewerContainer","position","height","width","border","palette","divider","borderRadius","shape","overflow","fullscreenContainer","top","left","zIndex","backgroundColor","background","paper","controlsContainer","padding","spacing","marginTop","loadingOverlay","display","justifyContent","alignItems","errorOverlay","textAlign","viewerControls","right","MoleculeViewer3DImproved","props","_s","smiles","moleculeData","format","initialStyle","classes","viewerRef","viewer","setViewer","modelStyle","setModelStyle","isFullscreen","setIsFullscreen","isLoading","setIsLoading","error","setError","molData","setMolData","animationRef","moleculeInput","fetchMoleculeData","response","post","data","molblock","Error","err","console","message","current","removeAllModels","cancelAnimationFrame","newViewer","createViewer","model","addModel","setStyle","stick","sphere","line","cartoon","addSurface","SurfaceType","VDW","opacity","color","zoomTo","render","animate","rotate","x","y","z","requestAnimationFrame","toggleFullscreen","setTimeout","resize","handleRefresh","removeAllSurfaces","containerStyle","style","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","title","size","onClick","_c","propTypes","string","oneOf","oneOfType","number","$RefreshReg$"],"sources":["C:/Users/nicks/Downloads/breakinggood/frontend/src/components/MoleculeViewer3DImproved.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Typography, Slider, Grid, Paper, FormControl, InputLabel, Select, MenuItem, IconButton, Tooltip, Box, CircularProgress } from '@material-ui/core';\nimport { FullscreenOutlined, FullscreenExitOutlined, RefreshOutlined, SaveAlt, CameraAlt } from '@material-ui/icons';\nimport * as $3Dmol from '3dmol/build/3Dmol-min.js';\nimport 'xterm/css/xterm.css';\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n  viewerContainer: {\n    position: 'relative',\n    height: '400px',\n    width: '100%',\n    border: `1px solid ${theme.palette.divider}`,\n    borderRadius: theme.shape.borderRadius,\n    overflow: 'hidden',\n  },\n  fullscreenContainer: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100vw',\n    height: '100vh',\n    zIndex: 9999,\n    backgroundColor: theme.palette.background.paper,\n  },\n  controlsContainer: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(255,255,255,0.7)',\n    zIndex: 10\n  },\n  errorOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.1)',\n    zIndex: 10,\n    padding: theme.spacing(2),\n    textAlign: 'center'\n  },\n  viewerControls: {\n    position: 'absolute',\n    top: theme.spacing(1),\n    right: theme.spacing(1),\n    zIndex: 5,\n    backgroundColor: 'rgba(255,255,255,0.7)',\n    borderRadius: theme.shape.borderRadius,\n    padding: theme.spacing(0.5),\n  },\n}));\n\nconst MoleculeViewer3DImproved = (props) => {\n  const {\n    smiles,               // For backward compatibility\n    moleculeData,         // Main molecule data input\n    format = 'smiles',    // Default to SMILES format\n    initialStyle = 'stick',\n    height = 400,\n    width = '100%'\n  } = props;\n  \n  const classes = useStyles();\n  const viewerRef = useRef(null);\n  const [viewer, setViewer] = useState(null);\n  const [modelStyle, setModelStyle] = useState(initialStyle);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [molData, setMolData] = useState(null);\n  const animationRef = useRef(null);\n  \n  // Support both smiles and moleculeData props\n  const moleculeInput = smiles || moleculeData;\n  \n  // Fetch 3D structure from SMILES when input changes\n  useEffect(() => {\n    if (!moleculeInput) {\n      setError('No molecule data provided');\n      setIsLoading(false);\n      return;\n    }\n    \n    const fetchMoleculeData = async () => {\n      setIsLoading(true);\n      setError(null);\n      \n      try {\n        // Only call API if input is SMILES format\n        if (format === 'smiles') {\n          const response = await axios.post('/api/simulation/3d-structure', { \n            smiles: moleculeInput \n          });\n          \n          if (response.data && response.data.molblock) {\n            setMolData(response.data.molblock);\n          } else {\n            throw new Error('Failed to convert SMILES to 3D structure');\n          }\n        } else {\n          // For other formats, use the input directly\n          setMolData(moleculeInput);\n        }\n        \n        setIsLoading(false);\n      } catch (err) {\n        console.error('Error fetching molecule data:', err);\n        setError(err.message || 'Failed to load molecule data');\n        setIsLoading(false);\n      }\n    };\n    \n    fetchMoleculeData();\n  }, [moleculeInput, format]);\n  \n  // Initialize 3Dmol viewer when we have molecule data\n  useEffect(() => {\n    if (!viewerRef.current || !molData) return;\n    \n    // Clean up any existing viewer\n    if (viewer) {\n      viewer.removeAllModels();\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n    \n    // Initialize viewer with a white background\n    const newViewer = $3Dmol.createViewer(viewerRef.current, {\n      backgroundColor: 'white'\n    });\n    \n    try {\n      // Add the model based on format\n      let model;\n      if (format === 'pdb') {\n        model = newViewer.addModel(molData, 'pdb');\n      } else if (format === 'smiles' || format === 'sdf' || format === 'mol') {\n        model = newViewer.addModel(molData, 'mol');\n      } else {\n        model = newViewer.addModel(molData, format);\n      }\n      \n      // Apply style based on initial setting\n      if (modelStyle === 'stick') {\n        newViewer.setStyle({}, {stick: {}}); \n      } else if (modelStyle === 'sphere') {\n        newViewer.setStyle({}, {sphere: {}}); \n      } else if (modelStyle === 'line') {\n        newViewer.setStyle({}, {line: {}}); \n      } else if (modelStyle === 'cartoon') {\n        newViewer.setStyle({}, {cartoon: {}}); \n      }\n      \n      // Add a surface with 50% opacity\n      newViewer.addSurface($3Dmol.SurfaceType.VDW, {\n        opacity: 0.5,\n        color: 'white'\n      });\n      \n      // Center the view and render\n      newViewer.zoomTo();\n      newViewer.render();\n      setViewer(newViewer);\n      \n      // Start a gentle rotation for better visualization\n      const animate = () => {\n        newViewer.rotate(0.5, {x: 0, y: 1, z: 0});\n        newViewer.render();\n        animationRef.current = requestAnimationFrame(animate);\n      };\n      animate();\n    } catch (err) {\n      console.error('Error rendering molecule:', err);\n      setError(`Failed to render molecule: ${err.message}`);\n    }\n    \n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [molData, format, modelStyle]);\n  \n  // Handle fullscreen toggle\n  const toggleFullscreen = () => {\n    setIsFullscreen(!isFullscreen);\n    \n    // Need to resize the viewer after changing container size\n    setTimeout(() => {\n      if (viewer) {\n        viewer.resize();\n        viewer.render();\n      }\n    }, 100);\n  };\n  \n  // Refresh the viewer\n  const handleRefresh = () => {\n    if (viewer) {\n      viewer.removeAllModels();\n      viewer.removeAllSurfaces();\n      \n      // Re-add the model based on format\n      let model;\n      if (format === 'pdb') {\n        model = viewer.addModel(molData, 'pdb');\n      } else if (format === 'smiles' || format === 'sdf' || format === 'mol') {\n        model = viewer.addModel(molData, 'mol');\n      } else {\n        model = viewer.addModel(molData, format);\n      }\n      \n      // Re-apply style\n      if (modelStyle === 'stick') {\n        viewer.setStyle({}, {stick: {}}); \n      } else if (modelStyle === 'sphere') {\n        viewer.setStyle({}, {sphere: {}}); \n      } else if (modelStyle === 'line') {\n        viewer.setStyle({}, {line: {}}); \n      } else if (modelStyle === 'cartoon') {\n        viewer.setStyle({}, {cartoon: {}}); \n      }\n      \n      // Re-add surface\n      viewer.addSurface($3Dmol.SurfaceType.VDW, {\n        opacity: 0.5,\n        color: 'white'\n      });\n      \n      viewer.zoomTo();\n      viewer.render();\n    }\n  };\n  \n  // Style for container based on fullscreen state\n  const containerStyle = isFullscreen\n    ? classes.fullscreenContainer\n    : classes.viewerContainer;\n  \n  return (\n    <div \n      style={{\n        height: isFullscreen ? '100%' : height,\n        width: isFullscreen ? '100%' : width,\n        position: 'relative'\n      }}\n    >\n      <div className={containerStyle} ref={viewerRef}>\n        {/* Loading overlay */}\n        {isLoading && (\n          <div className={classes.loadingOverlay}>\n            <CircularProgress />\n          </div>\n        )}\n        \n        {/* Error overlay */}\n        {error && (\n          <div className={classes.errorOverlay}>\n            <Typography color=\"error\">\n              {error}\n            </Typography>\n          </div>\n        )}\n        \n        {/* Viewer controls */}\n        <div className={classes.viewerControls}>\n          <Tooltip title={isFullscreen ? \"Exit Fullscreen\" : \"Fullscreen\"}>\n            <IconButton size=\"small\" onClick={toggleFullscreen}>\n              {isFullscreen ? <FullscreenExitOutlined /> : <FullscreenOutlined />}\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Refresh Viewer\">\n            <IconButton size=\"small\" onClick={handleRefresh}>\n              <RefreshOutlined />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMoleculeViewer3DImproved.propTypes = {\n  smiles: PropTypes.string,\n  moleculeData: PropTypes.string,\n  format: PropTypes.oneOf(['smiles', 'pdb', 'mol2', 'sdf', 'cif', 'xyz']),\n  initialStyle: PropTypes.oneOf(['stick', 'sphere', 'line', 'cartoon']),\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\n\nexport default MoleculeViewer3DImproved;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}