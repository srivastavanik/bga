{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicks\\\\Downloads\\\\breakinggood\\\\frontend\\\\src\\\\components\\\\ThinkingProcess.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Paper, Typography, CircularProgress, Divider, Accordion, AccordionSummary, AccordionDetails, Card, CardContent, Box, Chip, Button, makeStyles } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport BuildIcon from '@material-ui/icons/Build'; // Using Build icon instead of Science\nimport FormatQuoteIcon from '@material-ui/icons/FormatQuote';\nimport LocalPharmacyIcon from '@material-ui/icons/LocalPharmacy';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport MoleculeViewer3D from './MoleculeViewer3D';\nimport { claudeAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2)\n  },\n  paper: {\n    padding: theme.spacing(3)\n  },\n  loadingContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: theme.spacing(4)\n  },\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2)\n  },\n  headerIcon: {\n    marginRight: theme.spacing(1),\n    color: theme.palette.primary.main\n  },\n  divider: {\n    margin: theme.spacing(2, 0)\n  },\n  sectionTitle: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(1),\n    fontWeight: 500\n  },\n  accordion: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  tag: {\n    marginRight: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  timestamp: {\n    marginTop: theme.spacing(1),\n    color: theme.palette.text.secondary,\n    fontSize: '0.9rem'\n  },\n  viewerCard: {\n    marginBottom: theme.spacing(2)\n  },\n  moleculeSection: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(2),\n    backgroundColor: theme.palette.background.default,\n    borderRadius: theme.shape.borderRadius\n  },\n  propertyItem: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5, 0)\n  },\n  statusChip: {\n    marginLeft: theme.spacing(1)\n  },\n  codeBlock: {\n    fontFamily: 'monospace',\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(2),\n    borderRadius: theme.shape.borderRadius,\n    overflowX: 'auto',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  promptBlock: {\n    backgroundColor: '#f0f7ff',\n    padding: theme.spacing(2),\n    borderRadius: theme.shape.borderRadius,\n    marginBottom: theme.spacing(2),\n    borderLeft: `4px solid ${theme.palette.primary.main}`\n  }\n}));\nconst extractSections = thinking => {\n  // This is a simplistic approach; in a real implementation, you'd want\n  // more sophisticated parsing based on Claude's actual output structure\n  const sections = [];\n  if (!thinking) return sections;\n\n  // Try to identify major sections using headers\n  const lines = thinking.split('\\n');\n  let currentSection = null;\n  let currentContent = [];\n  lines.forEach(line => {\n    const trimmedLine = line.trim();\n    // Check if this line seems like a header (various formats)\n    const isHeader = /^(#+|Candidate|Step|Phase|Molecule \\d+:|Analysis of|Design Rationale|Candidate \\w+:|Synthesis|Regulatory|Safety|Pharmacokinetics|ADMET|Binding|Manufacturing|References)/i.test(trimmedLine) && trimmedLine.length < 100;\n    if (isHeader) {\n      // Save previous section if it exists\n      if (currentSection) {\n        sections.push({\n          title: currentSection,\n          content: currentContent.join('\\n')\n        });\n      }\n\n      // Start new section\n      currentSection = trimmedLine;\n      currentContent = [];\n    } else if (currentSection) {\n      currentContent.push(line);\n    } else {\n      // First lines before any clear section header\n      if (!currentSection) {\n        currentSection = \"Introduction\";\n      }\n      currentContent.push(line);\n    }\n  });\n\n  // Add the final section\n  if (currentSection) {\n    sections.push({\n      title: currentSection,\n      content: currentContent.join('\\n')\n    });\n  }\n  return sections;\n};\nconst ThinkingProcess = ({\n  requestId,\n  onSelectMolecule\n}) => {\n  _s();\n  const classes = useStyles();\n  const [thinkingData, setThinkingData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [expandedSection, setExpandedSection] = useState(null);\n  const [sections, setSections] = useState([]);\n  useEffect(() => {\n    if (!requestId) {\n      setError('No request ID provided');\n      setLoading(false);\n      return;\n    }\n    const fetchThinkingProcess = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await claudeAPI.getMoleculeThinking(requestId);\n        setThinkingData(response.data);\n\n        // Parse the thinking process into sections\n        const parsedSections = extractSections(response.data.thinking);\n        setSections(parsedSections);\n\n        // Expand the first section by default\n        if (parsedSections.length > 0) {\n          setExpandedSection(0);\n        }\n        setLoading(false);\n      } catch (err) {\n        var _err$response, _err$response$data;\n        console.error('Error fetching thinking process:', err);\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Failed to load thinking process');\n        setLoading(false);\n      }\n    };\n    fetchThinkingProcess();\n  }, [requestId]);\n  const handleAccordionChange = index => (event, isExpanded) => {\n    setExpandedSection(isExpanded ? index : null);\n  };\n\n  // Format timestamp\n  const formatDate = isoString => {\n    if (!isoString) return '';\n    const date = new Date(isoString);\n    return date.toLocaleString();\n  };\n\n  // Function to select a molecule when clicked\n  const handleSelectMolecule = smiles => {\n    if (onSelectMolecule) {\n      onSelectMolecule(smiles);\n    }\n  };\n\n  // Extract SMILES strings from a section\n  const extractSmiles = content => {\n    const smilesMatches = content.match(/SMILES:?\\s*([^\\s]+)/g);\n    if (!smilesMatches) return [];\n    return smilesMatches.map(match => {\n      return match.replace(/SMILES:?\\s*/, '').replace(/[`'\"]/g, '');\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        style: {\n          marginTop: 16\n        },\n        children: \"Loading thinking process...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this);\n  }\n  if (!thinkingData) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"warning\",\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n        children: \"No Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), \"No thinking process data is available.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: `${classes.root} ${classes.paper}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.header,\n      children: [/*#__PURE__*/_jsxDEV(BuildIcon, {\n        className: classes.headerIcon,\n        fontSize: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: [\"Molecule Design Thinking Process\", /*#__PURE__*/_jsxDEV(Chip, {\n          label: thinkingData.status,\n          color: thinkingData.status === 'completed' ? 'primary' : 'default',\n          icon: thinkingData.status === 'completed' ? /*#__PURE__*/_jsxDEV(CheckCircleIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 57\n          }, this) : /*#__PURE__*/_jsxDEV(WarningIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 79\n          }, this),\n          size: \"small\",\n          className: classes.statusChip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      className: classes.timestamp,\n      children: [\"Generated: \", formatDate(thinkingData.timestamp)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      className: classes.divider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      className: classes.sectionTitle,\n      children: \"Prompt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.promptBlock,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: thinkingData.prompt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), thinkingData.result && thinkingData.result.smiles && thinkingData.result.smiles.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        className: classes.sectionTitle,\n        children: \"Generated Molecules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        children: thinkingData.result.smiles.map((smiles, index) => /*#__PURE__*/_jsxDEV(Card, {\n          className: classes.viewerCard,\n          style: {\n            width: 300,\n            margin: 8\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              gutterBottom: true,\n              children: [\"Molecule \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(MoleculeViewer3D, {\n              smiles: smiles,\n              height: 200\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              className: classes.codeBlock,\n              children: smiles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"primary\",\n              fullWidth: true,\n              onClick: () => handleSelectMolecule(smiles),\n              size: \"small\",\n              startIcon: /*#__PURE__*/_jsxDEV(LocalPharmacyIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 32\n              }, this),\n              children: \"Select This Molecule\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      className: classes.sectionTitle,\n      children: \"Detailed Thinking Process\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), sections.length > 0 ? sections.map((section, index) => {\n      const sectionSmiles = extractSmiles(section.content);\n      return /*#__PURE__*/_jsxDEV(Accordion, {\n        expanded: expandedSection === index,\n        onChange: handleAccordionChange(index),\n        className: classes.accordion,\n        children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n          expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 45\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            children: section.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            width: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              component: \"div\",\n              children: section.content.split('\\n').map((line, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 25\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 19\n            }, this), sectionSmiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.moleculeSection,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Molecules in this section:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                flexWrap: \"wrap\",\n                children: sectionSmiles.map((smiles, i) => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: `Molecule ${i + 1}`,\n                  onClick: () => handleSelectMolecule(smiles),\n                  className: classes.tag,\n                  icon: /*#__PURE__*/_jsxDEV(LocalPharmacyIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 35\n                  }, this),\n                  color: \"primary\",\n                  variant: \"outlined\"\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      color: \"textSecondary\",\n      children: \"No sections could be extracted from the thinking process.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      className: classes.divider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      className: classes.sectionTitle,\n      children: \"Raw Thinking Output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n      className: classes.accordion,\n      children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n        expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 39\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: \"Complete Raw Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          component: \"div\",\n          style: {\n            whiteSpace: 'pre-wrap',\n            width: '100%'\n          },\n          children: thinkingData.thinking\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n};\n_s(ThinkingProcess, \"9jzYi6krnHsUlgbjfrM9j5KjXe4=\", false, function () {\n  return [useStyles];\n});\n_c = ThinkingProcess;\nexport default ThinkingProcess;\nvar _c;\n$RefreshReg$(_c, \"ThinkingProcess\");","map":{"version":3,"names":["React","useState","useEffect","Paper","Typography","CircularProgress","Divider","Accordion","AccordionSummary","AccordionDetails","Card","CardContent","Box","Chip","Button","makeStyles","ExpandMoreIcon","BuildIcon","FormatQuoteIcon","LocalPharmacyIcon","CheckCircleIcon","WarningIcon","Alert","AlertTitle","MoleculeViewer3D","claudeAPI","jsxDEV","_jsxDEV","Fragment","_Fragment","useStyles","theme","root","width","marginTop","spacing","marginBottom","paper","padding","loadingContainer","display","flexDirection","alignItems","justifyContent","header","headerIcon","marginRight","color","palette","primary","main","divider","margin","sectionTitle","fontWeight","accordion","tag","timestamp","text","secondary","fontSize","viewerCard","moleculeSection","backgroundColor","background","default","borderRadius","shape","propertyItem","statusChip","marginLeft","codeBlock","fontFamily","overflowX","promptBlock","borderLeft","extractSections","thinking","sections","lines","split","currentSection","currentContent","forEach","line","trimmedLine","trim","isHeader","test","length","push","title","content","join","ThinkingProcess","requestId","onSelectMolecule","_s","classes","thinkingData","setThinkingData","loading","setLoading","error","setError","expandedSection","setExpandedSection","setSections","fetchThinkingProcess","response","getMoleculeThinking","data","parsedSections","err","_err$response","_err$response$data","console","handleAccordionChange","index","event","isExpanded","formatDate","isoString","date","Date","toLocaleString","handleSelectMolecule","smiles","extractSmiles","smilesMatches","match","map","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","style","severity","label","status","icon","size","prompt","result","flexWrap","gutterBottom","height","fullWidth","onClick","startIcon","section","sectionSmiles","expanded","onChange","expandIcon","component","i","whiteSpace","_c","$RefreshReg$"],"sources":["C:/Users/nicks/Downloads/breakinggood/frontend/src/components/ThinkingProcess.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Paper, \r\n  Typography, \r\n  CircularProgress,\r\n  Divider,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Card,\r\n  CardContent,\r\n  Box,\r\n  Chip,\r\n  Button,\r\n  makeStyles \r\n} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport BuildIcon from '@material-ui/icons/Build'; // Using Build icon instead of Science\r\nimport FormatQuoteIcon from '@material-ui/icons/FormatQuote';\r\nimport LocalPharmacyIcon from '@material-ui/icons/LocalPharmacy';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport MoleculeViewer3D from './MoleculeViewer3D';\r\nimport { claudeAPI } from '../services/api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n  },\r\n  loadingContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: theme.spacing(4),\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  headerIcon: {\r\n    marginRight: theme.spacing(1),\r\n    color: theme.palette.primary.main,\r\n  },\r\n  divider: {\r\n    margin: theme.spacing(2, 0),\r\n  },\r\n  sectionTitle: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(1),\r\n    fontWeight: 500,\r\n  },\r\n  accordion: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  tag: {\r\n    marginRight: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  timestamp: {\r\n    marginTop: theme.spacing(1),\r\n    color: theme.palette.text.secondary,\r\n    fontSize: '0.9rem',\r\n  },\r\n  viewerCard: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  moleculeSection: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    backgroundColor: theme.palette.background.default,\r\n    borderRadius: theme.shape.borderRadius,\r\n  },\r\n  propertyItem: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    padding: theme.spacing(0.5, 0),\r\n  },\r\n  statusChip: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  codeBlock: {\r\n    fontFamily: 'monospace',\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(2),\r\n    borderRadius: theme.shape.borderRadius,\r\n    overflowX: 'auto',\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  promptBlock: {\r\n    backgroundColor: '#f0f7ff',\r\n    padding: theme.spacing(2),\r\n    borderRadius: theme.shape.borderRadius,\r\n    marginBottom: theme.spacing(2),\r\n    borderLeft: `4px solid ${theme.palette.primary.main}`,\r\n  },\r\n}));\r\n\r\nconst extractSections = (thinking) => {\r\n  // This is a simplistic approach; in a real implementation, you'd want\r\n  // more sophisticated parsing based on Claude's actual output structure\r\n  const sections = [];\r\n  \r\n  if (!thinking) return sections;\r\n  \r\n  // Try to identify major sections using headers\r\n  const lines = thinking.split('\\n');\r\n  let currentSection = null;\r\n  let currentContent = [];\r\n  \r\n  lines.forEach(line => {\r\n    const trimmedLine = line.trim();\r\n    // Check if this line seems like a header (various formats)\r\n    const isHeader = \r\n      /^(#+|Candidate|Step|Phase|Molecule \\d+:|Analysis of|Design Rationale|Candidate \\w+:|Synthesis|Regulatory|Safety|Pharmacokinetics|ADMET|Binding|Manufacturing|References)/i.test(trimmedLine) && \r\n      trimmedLine.length < 100;\r\n    \r\n    if (isHeader) {\r\n      // Save previous section if it exists\r\n      if (currentSection) {\r\n        sections.push({\r\n          title: currentSection,\r\n          content: currentContent.join('\\n')\r\n        });\r\n      }\r\n      \r\n      // Start new section\r\n      currentSection = trimmedLine;\r\n      currentContent = [];\r\n    } else if (currentSection) {\r\n      currentContent.push(line);\r\n    } else {\r\n      // First lines before any clear section header\r\n      if (!currentSection) {\r\n        currentSection = \"Introduction\";\r\n      }\r\n      currentContent.push(line);\r\n    }\r\n  });\r\n  \r\n  // Add the final section\r\n  if (currentSection) {\r\n    sections.push({\r\n      title: currentSection,\r\n      content: currentContent.join('\\n')\r\n    });\r\n  }\r\n  \r\n  return sections;\r\n};\r\n\r\nconst ThinkingProcess = ({ requestId, onSelectMolecule }) => {\r\n  const classes = useStyles();\r\n  const [thinkingData, setThinkingData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [expandedSection, setExpandedSection] = useState(null);\r\n  const [sections, setSections] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    if (!requestId) {\r\n      setError('No request ID provided');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    const fetchThinkingProcess = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        const response = await claudeAPI.getMoleculeThinking(requestId);\r\n        setThinkingData(response.data);\r\n        \r\n        // Parse the thinking process into sections\r\n        const parsedSections = extractSections(response.data.thinking);\r\n        setSections(parsedSections);\r\n        \r\n        // Expand the first section by default\r\n        if (parsedSections.length > 0) {\r\n          setExpandedSection(0);\r\n        }\r\n        \r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching thinking process:', err);\r\n        setError(err.response?.data?.error || 'Failed to load thinking process');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchThinkingProcess();\r\n  }, [requestId]);\r\n  \r\n  const handleAccordionChange = (index) => (event, isExpanded) => {\r\n    setExpandedSection(isExpanded ? index : null);\r\n  };\r\n  \r\n  // Format timestamp\r\n  const formatDate = (isoString) => {\r\n    if (!isoString) return '';\r\n    const date = new Date(isoString);\r\n    return date.toLocaleString();\r\n  };\r\n  \r\n  // Function to select a molecule when clicked\r\n  const handleSelectMolecule = (smiles) => {\r\n    if (onSelectMolecule) {\r\n      onSelectMolecule(smiles);\r\n    }\r\n  };\r\n  \r\n  // Extract SMILES strings from a section\r\n  const extractSmiles = (content) => {\r\n    const smilesMatches = content.match(/SMILES:?\\s*([^\\s]+)/g);\r\n    if (!smilesMatches) return [];\r\n    \r\n    return smilesMatches.map(match => {\r\n      return match.replace(/SMILES:?\\s*/, '').replace(/[`'\"]/g, '');\r\n    });\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <Paper className={classes.loadingContainer}>\r\n        <CircularProgress />\r\n        <Typography variant=\"body1\" style={{ marginTop: 16 }}>\r\n          Loading thinking process...\r\n        </Typography>\r\n      </Paper>\r\n    );\r\n  }\r\n  \r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" className={classes.root}>\r\n        <AlertTitle>Error</AlertTitle>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n  \r\n  if (!thinkingData) {\r\n    return (\r\n      <Alert severity=\"warning\" className={classes.root}>\r\n        <AlertTitle>No Data</AlertTitle>\r\n        No thinking process data is available.\r\n      </Alert>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Paper className={`${classes.root} ${classes.paper}`}>\r\n      <div className={classes.header}>\r\n        <BuildIcon className={classes.headerIcon} fontSize=\"large\" />\r\n        <Typography variant=\"h5\">\r\n          Molecule Design Thinking Process\r\n          <Chip \r\n            label={thinkingData.status} \r\n            color={thinkingData.status === 'completed' ? 'primary' : 'default'}\r\n            icon={thinkingData.status === 'completed' ? <CheckCircleIcon /> : <WarningIcon />}\r\n            size=\"small\"\r\n            className={classes.statusChip}\r\n          />\r\n        </Typography>\r\n      </div>\r\n      \r\n      <Typography variant=\"body2\" className={classes.timestamp}>\r\n        Generated: {formatDate(thinkingData.timestamp)}\r\n      </Typography>\r\n      \r\n      <Divider className={classes.divider} />\r\n      \r\n      <Typography variant=\"h6\" className={classes.sectionTitle}>\r\n        Prompt\r\n      </Typography>\r\n      \r\n      <div className={classes.promptBlock}>\r\n        <Typography variant=\"body1\">\r\n          {thinkingData.prompt}\r\n        </Typography>\r\n      </div>\r\n      \r\n      {thinkingData.result && thinkingData.result.smiles && thinkingData.result.smiles.length > 0 && (\r\n        <>\r\n          <Typography variant=\"h6\" className={classes.sectionTitle}>\r\n            Generated Molecules\r\n          </Typography>\r\n          \r\n          <Box display=\"flex\" flexWrap=\"wrap\">\r\n            {thinkingData.result.smiles.map((smiles, index) => (\r\n              <Card key={index} className={classes.viewerCard} style={{ width: 300, margin: 8 }}>\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    Molecule {index + 1}\r\n                  </Typography>\r\n                  <MoleculeViewer3D \r\n                    smiles={smiles} \r\n                    height={200} \r\n                  />\r\n                  <Typography variant=\"body2\" className={classes.codeBlock}>\r\n                    {smiles}\r\n                  </Typography>\r\n                  <Button \r\n                    variant=\"outlined\" \r\n                    color=\"primary\" \r\n                    fullWidth\r\n                    onClick={() => handleSelectMolecule(smiles)}\r\n                    size=\"small\"\r\n                    startIcon={<LocalPharmacyIcon />}\r\n                  >\r\n                    Select This Molecule\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </Box>\r\n        </>\r\n      )}\r\n      \r\n      <Typography variant=\"h6\" className={classes.sectionTitle}>\r\n        Detailed Thinking Process\r\n      </Typography>\r\n      \r\n      {sections.length > 0 ? (\r\n        sections.map((section, index) => {\r\n          const sectionSmiles = extractSmiles(section.content);\r\n          \r\n          return (\r\n            <Accordion \r\n              key={index} \r\n              expanded={expandedSection === index} \r\n              onChange={handleAccordionChange(index)}\r\n              className={classes.accordion}\r\n            >\r\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                <Typography variant=\"subtitle1\">{section.title}</Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <Box width=\"100%\">\r\n                  <Typography variant=\"body1\" component=\"div\">\r\n                    {section.content.split('\\n').map((line, i) => (\r\n                      <React.Fragment key={i}>\r\n                        {line}\r\n                        <br />\r\n                      </React.Fragment>\r\n                    ))}\r\n                  </Typography>\r\n                  \r\n                  {sectionSmiles.length > 0 && (\r\n                    <div className={classes.moleculeSection}>\r\n                      <Typography variant=\"subtitle2\" gutterBottom>\r\n                        Molecules in this section:\r\n                      </Typography>\r\n                      <Box display=\"flex\" flexWrap=\"wrap\">\r\n                        {sectionSmiles.map((smiles, i) => (\r\n                          <Chip \r\n                            key={i} \r\n                            label={`Molecule ${i+1}`} \r\n                            onClick={() => handleSelectMolecule(smiles)}\r\n                            className={classes.tag}\r\n                            icon={<LocalPharmacyIcon />}\r\n                            color=\"primary\"\r\n                            variant=\"outlined\"\r\n                          />\r\n                        ))}\r\n                      </Box>\r\n                    </div>\r\n                  )}\r\n                </Box>\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          );\r\n        })\r\n      ) : (\r\n        <Typography variant=\"body1\" color=\"textSecondary\">\r\n          No sections could be extracted from the thinking process.\r\n        </Typography>\r\n      )}\r\n      \r\n      <Divider className={classes.divider} />\r\n      \r\n      <Typography variant=\"h6\" className={classes.sectionTitle}>\r\n        Raw Thinking Output\r\n      </Typography>\r\n      \r\n      <Accordion className={classes.accordion}>\r\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n          <Typography variant=\"subtitle1\">\r\n            Complete Raw Output\r\n          </Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Typography variant=\"body2\" component=\"div\" style={{ whiteSpace: 'pre-wrap', width: '100%' }}>\r\n            {thinkingData.thinking}\r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ThinkingProcess; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}